<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>自动编译proto文件</title>
      <link href="skill/back-end/49446.html"/>
      <url>skill/back-end/49446.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>你是否和我一样厌烦了无休止的<code>protobuf</code>编译，是否对<code>protoc</code>的命令深恶痛绝，如果有，那请继续看下去。初接触<code>protobuf</code>的我，对他的各种编译命令深恶痛绝，生涩难记。</p><p>在同事的帮助下，弄了个编译proto的库：<a href="https://github.com/InkDP/proto_build">proto_build</a>，每次改完<code>proto</code>文件，直接执行就完事，再也不用去输入各种乱七八糟的命令，简直爽到飞起。</p><h3 id="使用Goland实现自动编译"><a href="#使用Goland实现自动编译" class="headerlink" title="使用Goland实现自动编译"></a>使用Goland实现自动编译</h3><p><strong>Jetbrains</strong>全家桶提供了<code>file watcher</code>的功能，可以实现对文件的监听，文件发生更改时可以执行某些操作，这与我们开发的程序结合，即可解放双手，实现自动编译。</p><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/20210927211122.png" alt="image-20210927211122811"></p><p>下载<a href="https://github.com/InkDP/proto_build/releases">proto_build程序包</a>，或下载<a href="(https://github.com/InkDP/proto_build)">源码</a>后编译，打开<strong>Jetbrains</strong>家的<code>ide</code>，这里以<code>Goland</code>为例：</p><p><code>Preferences</code> → <code>Tools</code> → <code>File Watcher</code></p><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/20210927211053.png" alt="image-20210927211053278"></p><p>新建<code>File Watcher</code>：点击 <code>+</code> → <code>&lt;custom&gt;</code></p><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/20210927211252.png" alt="image-20210927211252517"></p><p>选择监听文件类型<code>Protocol Buffer</code>，文件监听范围(根据自己实际需求选择，这里我选择当前项目)，选择上面下载或自行编译的运行程序，工作目录选择当前项目所在目录即可。</p><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/20210927212113.png" alt="image-20210927212113805"></p><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/20210927212208.png" alt="image-20210927212208720"></p><p>编辑<code>proto</code>文件，查看是否自动编译生成对应<code>.go</code>文件</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> protobuf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发查找切片</title>
      <link href="skill/back-end/118.html"/>
      <url>skill/back-end/118.html</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><blockquote><p>假设有一个超长的切片，切片的元素类型为int，切片中的元素为乱序排列。限时5秒，使用多个goroutine查找切片中是否存在给定值，在找到目标值或者超时后立刻结束所有goroutine的执行。</p><p>比如切片为：[23, 32, 78, 43, 76, 65, 345, 762, …… 915, 86]，查找的目标值为345，如果切片中存在目标值程序输出:”Found it!”并且立即取消仍在执行查找任务的<code>goroutine</code>。如果在超时时间未找到目标值程序输出:”Timeout! Not Found”，同时立即取消仍在执行查找任务的<code>goroutine</code>。</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>思路参考：<a href="https://mp.weixin.qq.com/s/GhC2WDw3VHP91DrrFVCnag">上周并发题的解题思路以及介绍Go语言调度器</a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math/rand&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">targetNum := <span class="number">898982</span></span><br><span class="line">total := <span class="number">2000000000</span></span><br><span class="line">s := GetRandomSlice(total, <span class="number">200000000</span>, targetNum)</span><br><span class="line">t := time.Now()</span><br><span class="line">manager := NewManager(<span class="number">250000000</span>)</span><br><span class="line">manager.Search(s, targetNum)</span><br><span class="line">fmt.Println(manager.Result())</span><br><span class="line">fmt.Printf(<span class="string">&quot;find the number of %d, time conumin %v\n&quot;</span>, total, time.Since(t))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetRandomSlice</span><span class="params">(sliceLen <span class="keyword">int</span>, randNum <span class="keyword">int</span>, targetNum <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">tmp := <span class="built_in">make</span>([]<span class="keyword">int</span>, sliceLen)</span><br><span class="line">rand.Seed(time.Now().UnixNano())</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; sliceLen; i++ &#123;</span><br><span class="line">randNum := rand.Intn(randNum)</span><br><span class="line">tmp[i] = randNum</span><br><span class="line"><span class="keyword">if</span> randNum == targetNum &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;randNum is &quot;</span>, i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> tmp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Manager <span class="keyword">struct</span> &#123;</span><br><span class="line">s         []<span class="keyword">int</span></span><br><span class="line">targetNum <span class="keyword">int</span></span><br><span class="line">chunkSize <span class="keyword">int</span></span><br><span class="line">chunkNum  <span class="keyword">int</span></span><br><span class="line">once      sync.Once</span><br><span class="line">ctx       context.Context</span><br><span class="line">cancel    <span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line">result    <span class="keyword">chan</span> <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewManager</span><span class="params">(chunkSize <span class="keyword">int</span>)</span> *<span class="title">Manager</span></span> &#123;</span><br><span class="line">ctx, cancel := context.WithCancel(context.Background())</span><br><span class="line"><span class="keyword">return</span> &amp;Manager&#123;</span><br><span class="line">chunkSize: chunkSize,</span><br><span class="line">once:      sync.Once&#123;&#125;,</span><br><span class="line">ctx:       ctx,</span><br><span class="line">cancel:    cancel,</span><br><span class="line">result:    <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Manager)</span> <span class="title">Search</span><span class="params">(s []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">m.s = s</span><br><span class="line">m.targetNum = target</span><br><span class="line">Chunk(<span class="built_in">len</span>(s), m.chunkSize, m.Worker)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Chunk</span><span class="params">(total, chunkSize <span class="keyword">int</span>, f <span class="keyword">func</span>(part, startIndex, endIndex <span class="keyword">int</span>)</span>)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> total%chunkSize == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; total/chunkSize; i++ &#123;</span><br><span class="line">e := (i + <span class="number">1</span>) * chunkSize</span><br><span class="line">f(i+<span class="number">1</span>, i*chunkSize, e)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= total/chunkSize; i++ &#123;</span><br><span class="line">e := (i + <span class="number">1</span>) * chunkSize</span><br><span class="line"><span class="keyword">if</span> i == (total / chunkSize) &#123;</span><br><span class="line">e = i*chunkSize + total%chunkSize</span><br><span class="line">&#125;</span><br><span class="line">f(i+<span class="number">1</span>, i*chunkSize, e)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Manager)</span> <span class="title">Worker</span><span class="params">(part, startIndex, endIndex <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">m.chunkNum++</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> m.s[startIndex:endIndex] &#123;</span><br><span class="line"><span class="keyword">if</span> v == m.targetNum &#123;</span><br><span class="line">m.result &lt;- fmt.Sprintf(<span class="string">&quot;Found! At index %d\n&quot;</span>, (part<span class="number">-1</span>)*m.chunkSize+i)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-m.ctx.Done():</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">m.result &lt;- <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *Manager)</span> <span class="title">Result</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> once sync.Once</span><br><span class="line"><span class="keyword">var</span> num <span class="keyword">int</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-time.After(time.Second * time.Duration(<span class="number">10</span>)):</span><br><span class="line">once.Do(m.cancel)</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Timeout! Not Found&quot;</span></span><br><span class="line"><span class="keyword">case</span> res := &lt;-m.result:</span><br><span class="line"><span class="keyword">if</span> res != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">once.Do(m.cancel)</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line">num++</span><br><span class="line"><span class="keyword">if</span> num == m.chunkNum &#123;</span><br><span class="line">once.Do(m.cancel)</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;All Task Done,Not Found!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://mp.weixin.qq.com/s/GhC2WDw3VHP91DrrFVCnag">https://mp.weixin.qq.com/s/GhC2WDw3VHP91DrrFVCnag</a></li><li><a href="https://github.com/cuteLittleDevil/-">https://github.com/cuteLittleDevil/-</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-递归</title>
      <link href="skill/algorithm/64723.html"/>
      <url>skill/algorithm/64723.html</url>
      
        <content type="html"><![CDATA[<p>递归算是简单而又常见的算法，但是大多时候我们也只是能看懂他，而想要掌握他还是需要一定的技巧</p><h3 id="递归的三大要素"><a href="#递归的三大要素" class="headerlink" title="递归的三大要素"></a>递归的三大要素</h3><h4 id="第一要素：函数实现功能"><a href="#第一要素：函数实现功能" class="headerlink" title="第一要素：函数实现功能"></a>第一要素：函数实现功能</h4><p>对于一个函数，最先清楚的应该它说要实现的功能，也就是它要干什么，这个完全由函数定义者决定，所以，我们不应该最先思考里面代码怎么写，而是应该先思考，你这个函数用来写什么。递归也是一个函数，所以需要遵循这个规则。</p><p>例如，我们定义一个函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 求1～n的和</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数的功能就是求1～n的和，到此，我们完成了函数的定义，也明确它实现的功能。</p><h4 id="第二要素：寻找递归结束条件"><a href="#第二要素：寻找递归结束条件" class="headerlink" title="第二要素：寻找递归结束条件"></a>第二要素：寻找递归结束条件</h4><p>递归就是在函数内部不断的调用这个函数本身，因此我们必须找出递归结束条件，否则，这个函数就会一直执行下去，成为一个死循环。找到结束条件，递归结束，并返回结果。根据这个结束条件，我们是可以直接知道函数的结果的。比如上面的例子，当<code>n = 0</code>时，你可以明确知道<code>sum(n)</code>的结果是什么，此时，<code>sum(0) = 0</code>。将第二要素添加到代码中，如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 求1～n的和</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>仔细思考，发现<code>n = 1</code>时，也可以直接得到结果，所以我们将他们合并，如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 求1～n的和</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">2</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>递归条件的定义必须要足够严谨，否则就会出现漏算或者多算的情况。</p><h3 id="第三要素：找出函数的等价关系式"><a href="#第三要素：找出函数的等价关系式" class="headerlink" title="第三要素：找出函数的等价关系式"></a>第三要素：找出函数的等价关系式</h3><p>第三元素是需要不断缩小参数的范围，缩小后，可以通过一些辅助变量或操作使得原函数的结果不变。</p><p>上面的例子中，<code>sum(n)</code>范围比较大的时候，我们可以让<code>sum(n) = n+sum(n-1)</code>，这样范围就从<code>n</code>变成了<code>n-1</code>，以此类推，最终范围会缩小至我们第二要素的递归结束条件，并且原函数的结果不会变。</p><p>我们最终需要找到一个与原函数等价的关系式即可，<code>sum(n)</code>的等价关系式为<code>n + sum(n-1)</code>，即<code>sum(n) = n + sum(n-1)</code></p><blockquote><p>这个等价关系式的寻找，是整个递归中最难也是最重要的一部分，暂时不懂没有关系，多找一些递归相关的题，多练习熟悉之后自然就手到擒来了</p></blockquote><p>找出了等价关系，将它添加到函数中完善函数，完整函数如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 求1～n的和</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> n &lt; <span class="number">2</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> n + sum(n<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此递归三要素就全部写到函数中了，这个求和函数也完成了，每次做递归时试着将这三要素找出来，你就会觉得递归变得很简单。</p><p>还是不懂没关系，下面我们结合案例讲解一些题目。</p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="LeetCode-509-斐波拉切数"><a href="#LeetCode-509-斐波拉切数" class="headerlink" title="LeetCode 509.斐波拉切数"></a>LeetCode 509.斐波拉切数</h4><p>斐波那契数，通常用 F(n) 表示，形成的序列称为 斐波那契数列 。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是：</p><blockquote><p>F(0) = 0，F(1) = 1<br>F(n) = F(n - 1) + F(n - 2)，其中 n &gt; 1</p></blockquote><p>给你 n ，请计算 F(n) 。</p><p>结合上面的说讲的，是从三大要素入手</p><h5 id="第一要素：定义函数"><a href="#第一要素：定义函数" class="headerlink" title="第一要素：定义函数"></a>第一要素：定义函数</h5><p>定义函数完成该功能</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 斐波拉契数列</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fib</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="第二要素：结束条件"><a href="#第二要素：结束条件" class="headerlink" title="第二要素：结束条件"></a>第二要素：结束条件</h5><p>通过观察可得，当<code>n = 1</code>或<code>n = 2</code>时，我们可以轻易知道结果<code>fib(1) = fib(2) = 1</code>，所以递归结束条件可以为<code>n &lt;=2 </code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 斐波拉契数列</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fib</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">2</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="第三要素：等价关系式"><a href="#第三要素：等价关系式" class="headerlink" title="第三要素：等价关系式"></a>第三要素：等价关系式</h5><p>题目中已经给出了等价关系<code>f(n) = f(n-1)+f(n-2) </code>。大多时候我们都是需要自己去寻找等下关系式，这也是最难的一个环节，因为题目中直接给出关系式的原因，所以直接写到函数中即可。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fib</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">   <span class="keyword">if</span> n &lt;= <span class="number">2</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> fib(n<span class="number">-1</span>) + fib(n<span class="number">-2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单吧，一道非常简单且经典的求斐波拉契数列就完成了。</p><h4 id="兔子跳台阶"><a href="#兔子跳台阶" class="headerlink" title="兔子跳台阶"></a>兔子跳台阶</h4><blockquote><p>一只兔子一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p></blockquote><h5 id="第一要素：定义函数-1"><a href="#第一要素：定义函数-1" class="headerlink" title="第一要素：定义函数"></a>第一要素：定义函数</h5><p>定义函数完成该功能</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 兔子跳台阶</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">jump</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="第二要素：结束条件-1"><a href="#第二要素：结束条件-1" class="headerlink" title="第二要素：结束条件"></a>第二要素：结束条件</h5><p>第二要素要找到可以最直观知道结果的<code>jump(n)</code>，当台阶数为1时我们可以很直观的知道，小兔子只有1种跳法；当台阶数为2时，小兔子也只有两种，再往上就不符合最直观的逻辑了，所以我们得出结束条件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 兔子跳台阶</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">jump</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">2</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="第三要素：等价关系式-1"><a href="#第三要素：等价关系式-1" class="headerlink" title="第三要素：等价关系式"></a>第三要素：等价关系式</h5><p>每次跳可跳一个或两个台阶，所以每次跳的时候又两种跳法：</p><ul><li>此次我跳了1个台阶，那么还剩下<code>n-1</code>个台阶没跳，所以剩下的台阶有<code>jump(n-1)</code>种跳法</li><li>此次我跳了2个台阶，那么还剩下<code>n-2</code>个台阶没跳，所以剩下的台阶有<code>jump(n-2)</code>种跳法</li></ul><p>所以兔子的全部跳法为两种跳法之和，<code>jump(n) = jump(n-1)+jump(n-2)</code>，熟悉吗，其实这就是一个斐波拉契数列。至此，等价关系式也就出来了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 兔子跳台阶</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">jump</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">   <span class="keyword">if</span> n &lt;= <span class="number">2</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> n</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> jump(n<span class="number">-1</span>) + jump(n<span class="number">-2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单吧，下面来一个稍微复杂一点的</p><h4 id="汉诺塔"><a href="#汉诺塔" class="headerlink" title="汉诺塔"></a>汉诺塔</h4><p>从左到右有A、B、C三根柱子，其中A柱子上面有从小叠到大的n个圆盘，现要求将A柱子上的圆盘移到C柱子上去，期间只有一个原则：一次只能移到一个盘子且大盘子不能在小盘子上面，求移动的步骤和移动的次数</p><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/20210915232257.jpg" alt="img"></p><h5 id="第一要素：定义函数-2"><a href="#第一要素：定义函数-2" class="headerlink" title="第一要素：定义函数"></a>第一要素：定义函数</h5><p>定义函数完成该功能</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 汉洛塔</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hanota</span><span class="params">(n <span class="keyword">int</span>, A, B, C <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再定义一个函数来打印移动</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打印移动情况</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">move</span><span class="params">(n <span class="keyword">int</span>, original, target <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">   m++</span><br><span class="line">   fmt.Printf(<span class="string">&quot;第%d次移动， 把%d号盘子从%s移动到%s\n&quot;</span>, m, n, original, target)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="第二要素：结束条件-2"><a href="#第二要素：结束条件-2" class="headerlink" title="第二要素：结束条件"></a>第二要素：结束条件</h5><p>当我们只有一个圆盘的时候，直接把圆盘从A移到C即可</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 汉洛塔</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hanota</span><span class="params">(n <span class="keyword">int</span>, A, B, C <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">   <span class="keyword">if</span> n == <span class="number">1</span> &#123;</span><br><span class="line">      move(n, A, C)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三要素：等价关系式</p><p>假设我们只有两个圆盘时，正确的移动步骤应该是：</p><ol><li>将第一个圆盘，从A移到B</li><li>将第二个圆盘，从A移动C</li><li>将第一个圆盘，从B移到C</li></ol><p>此时回到我们有N个圆盘的时候，我们将<code>[1, n-1]</code>个圆盘看作一个圆盘，这样我们就可以以两个圆盘的移动方式对待：</p><ol><li>将<code>[1, n-1]</code>圆盘，从A移到B</li><li>将第n个圆盘，从A移动C</li><li>将<code>[1, n-1]</code>圆盘，从B移到C</li></ol><p>此时等价关系式就出现了，<code>hanota(n-1, A, C, B)</code>与<code>hanota(n-1, B, A, C)</code>；不同于斐波拉契数列，他的关系式不需要返回，且有两个，但是大同小异，只是稍加变化而已。写进函数如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 汉洛塔</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hanota</span><span class="params">(n <span class="keyword">int</span>, A, B, C <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">   <span class="keyword">if</span> n == <span class="number">1</span> &#123;</span><br><span class="line">      move(n, A, C)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// [1，n-1] 从A移到B</span></span><br><span class="line">   hanota(n<span class="number">-1</span>, A, C, B)</span><br><span class="line">   <span class="comment">// n 从A移到C</span></span><br><span class="line">   move(n, A, C)</span><br><span class="line">   <span class="comment">// [1，n-1] 从B移到C</span></span><br><span class="line">   hanota(n<span class="number">-1</span>, B, A, C)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三道题更前两道似乎不太一样，没有求和，也没有返回，但这确实也是递归，多假练习加以熟悉即可。</p><h3 id="递归优化"><a href="#递归优化" class="headerlink" title="递归优化"></a>递归优化</h3><p>因为递归是不断的去通过子函数实现最终的功能，如果不进行子函数的优化，就会导致重复计算，我们以上述斐波拉契数列为例</p><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/20210915230414.png" alt="image-20210915230414278"></p><p>求<code>f(8)</code>的过程，从上图可知，出现了3次<code>f(5)</code>，4次<code>f(4)</code>。。。。当n越大，里面出现的重复计算也就越多，优化还是很有必要的。</p><p>将这些可能重复的计算值存储起来，如果已经计算过直接返回即可，就无需重复计算，以此节省很多空间，优化后代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 斐波拉契数列</span></span><br><span class="line"><span class="keyword">var</span> mapFib = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fib</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">   <span class="keyword">if</span> n &lt;= <span class="number">2</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> v,ok := mapFib[n]; ok &#123;</span><br><span class="line">      <span class="keyword">return</span> v</span><br><span class="line">   &#125;</span><br><span class="line">   mapFib[n] = fib(n<span class="number">-1</span>) + fib(n<span class="number">-2</span>)</span><br><span class="line">   <span class="keyword">return</span> mapFib[n]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021书单分享</title>
      <link href="reading/65135.html"/>
      <url>reading/65135.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-《白说》"><a href="#1-《白说》" class="headerlink" title="1.《白说》"></a>1.《白说》</h3><p>整本书通过整理白岩松老师多个场合的演讲而来，涵盖多个领域，时政、教育、改革、音乐、阅读、人生；书中说表述的大道理，于20出头的我来说，过于高深，大多都是智商盲区，以至于几乎无法消化，虽生涩难懂，但却能从字里行间收获一种宁静，引人深思，同时从文中也能感觉到白岩松的博学。也许多年后重读此书会有更深感悟。</p><blockquote><p>幸福可以无限接近，无法彻底到达</p></blockquote><p>推荐指数：⭐⭐⭐</p><h3 id="2-《沉默的巡游》"><a href="#2-《沉默的巡游》" class="headerlink" title="2.《沉默的巡游》"></a>2.《沉默的巡游》</h3><p>买这本书完全是因为作者与书的大名，也是第一次看推理小说。内容上环环相扣，顺叙、倒叙、插叙相结合，叙述视角多而不乱，情节安排详略得当，脉络清晰，推理严密；以并木食堂的营业场景开篇，也以之结尾，首尾呼应，结构完整，跟随主角的思路去发现破绽，并通过各种破绽并细细推敲过去的真相的过程，让人直呼过瘾，这大概就是推理小说的魅力所在。</p><blockquote><p>这是一个悲伤的故事，却会给你一整年的温暖</p></blockquote><p>推荐指数：⭐⭐⭐⭐⭐</p><h3 id="3-《局外人》"><a href="#3-《局外人》" class="headerlink" title="3.《局外人》"></a>3.《局外人》</h3><p>从小被灌输的概念就是以孝为本，完全无法理解书中主人公的做法。母亲死于养老院中，他去奔丧，送葬，但无动于衷，毫无眼泪和悲伤，在旁人看来不能理解，并最终成为他在法庭上的罪证。以及与女友结婚，和邻居一起对付阿拉伯人，并最终失手打死其中一个，最后被逮捕并处决为死刑。他似乎获得真的如同一个局外人，细想之下，这大概就是极致理智。</p><blockquote><p>为了把一切都做得完善，为了使我感到不那么孤独，我还希望处决我的那一天有很多人来，希望他们对我报之以仇恨的喊叫声。</p></blockquote><p>推荐指数：⭐⭐⭐⭐⭐</p><h3 id="4-《穷爸爸富爸爸》"><a href="#4-《穷爸爸富爸爸》" class="headerlink" title="4.《穷爸爸富爸爸》"></a>4.《穷爸爸富爸爸》</h3><p>穷爸爸的思维：遇到钱的问题就逃避，看不起、看不上、不关心，当然也得不到；富爸爸思维：遇到钱的问题努力解决问题，赞美、享受金钱，并且实践大量赚钱的方法。整本书更多的是希望能建立一个理财的思想，给人感触最深的是要去实践，**富爸爸真正强大的部分：我知道我要成为什么人，然后不断暗示自己，并坚定地走下去。合上书后就买了基金，狂跌后现在都还没涨回来。</p><p>推荐指数：⭐⭐⭐</p><h3 id="5-《平凡的世界》"><a href="#5-《平凡的世界》" class="headerlink" title="5.《平凡的世界》"></a>5.《平凡的世界》</h3><p>书中为我们描述了一个平凡而伟大的世界，书中的几位主人公各有各的悲惨生活，却又有着各自的感情线，其中对孙少平与田晓霞的爱情有种莫名的期待，因为孙少安与田润叶的悲剧让我更期待这对情侣在一起，而这种种期待最终在今天化为泡影，在洪水中为了救一个小姑娘，田晓霞去世了，久久不能从书中的悲伤中走出来。文章直到最后也没有令人所谓的反转，所有人都朝着自己认识的方向平凡而不平庸的生活着。</p><blockquote><p>少平，你要记得，你与其他人不一样，你是一个有另外世界的人，你的心不应该只在这，而是在远方，那个充满光的地方</p></blockquote><p>推荐指数：⭐⭐⭐⭐⭐</p><h3 id="6-《不要让未来的你，讨厌现在的自己》"><a href="#6-《不要让未来的你，讨厌现在的自己》" class="headerlink" title="6.《不要让未来的你，讨厌现在的自己》"></a>6.《不要让未来的你，讨厌现在的自己》</h3><p>特立独行的猫代表作，在这个鸡汤盛行的时代，书里面的一个个小故事，给人讲了一个又一个小道理，给人一种不一样的鸡汤的味道，细细品味，也能得出不一样的体验，但最后，我们还是需要自己去执行，看再多大道理，读再多心灵鸡汤，不如看似微小，实际上却 坚实而有力的一步，只有去执行，一切才有意义。</p><blockquote><p>你今天偷的懒，会成为日后的坑。你现在所做的一切，注定了未来的可能。</p></blockquote><p>推荐指数：⭐⭐⭐⭐</p><h3 id="7-《放学后》"><a href="#7-《放学后》" class="headerlink" title="7.《放学后》"></a>7.《放学后》</h3><p>主人公是一个女子高中的数学教师，当本身却并不喜欢这个工作，只不过是为了养家糊口，顺其自然才当上了教师。因为不管学生的事情，也不接触学生，所以被人冠以“机器”的外号，虽然这样，他内心却也有着让人不易察觉的温柔。可谁也想不到这样一个人的生命会收到威胁，多次出现的意外不得不让人联想到暗杀。本以为事情会朝着这条路线继续发展下去，结果学校却发生了密室杀人案，然后开始了以一系列推理破案的过程，其中出现了经典日本高中生推理能力超过警察的桥段。警方介入调查，主人公却并未告知暗杀一事，随着时间推移，命案淡出视野，凶手再一次在众目睽睽之下杀了本该是主人公扮演的小丑，结合之前的暗杀，所有人都认为主人公才是真正的目标。警察开始对主人公进行保护，他也在千丝万缕中找到了最意想不到的真凶。最后没将真凶公之于众也凸显出人物性格，最后被妻子情夫捅伤失去意识前还想着不能让妻子成为杀人犯，纠结，优柔寡断，冷漠，关心，种种矛盾组成了主人公的性格，也断送了他的生命。</p><p>合上书的那一刻，在思考为何主人公的妻子要杀他，其实也不难猜测，主人的冷漠不作为，以及打掉孩子早已埋下仇恨的种子。我看的版本有所缺失，省去的正是杀人动机的地方，倒是与我猜测的有些出入。</p><blockquote><p>但我不能死，死在这里也留不下什么，只会让裕美子成为杀人犯。我倒在柏油路上，专心等待着有人路过。我还能等。</p></blockquote><p>推荐指数：⭐⭐⭐⭐⭐</p>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode-数组系列6</title>
      <link href="skill/algorithm/55343.html"/>
      <url>skill/algorithm/55343.html</url>
      
        <content type="html"><![CDATA[<h3 id="674-最长连续递增序列"><a href="#674-最长连续递增序列" class="headerlink" title="674. 最长连续递增序列"></a>674. 最长连续递增序列</h3><p>给定一个未经排序的整数数组，找到最长且<strong> 连续递增的子序列</strong>，并返回该序列的长度。</p><p><strong>连续递增的子序列</strong> 可以由两个下标 <code>l</code> 和 <code>r</code>（<code>l < r</code>）确定，如果对于每个 <code>l <= i < r</code>，都有 <code>nums[i] < nums[i + 1]</code> ，那么子序列 <code>[nums[l], nums[l + 1], ..., nums[r - 1], nums[r]]</code> 就是连续递增子序列。</p><p> </p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong>nums = [1,3,5,4,7]<br><strong>输出：</strong>3<br><strong>解释：</strong>最长连续递增序列是 [1,3,5], 长度为3。<br>尽管 [1,3,5,7] 也是升序的子序列, 但它不是连续的，因为 5 和 7 在原数组里被 4 隔开。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong>nums = [2,2,2,2,2]<br><strong>输出：</strong>1<br><strong>解释：</strong>最长连续递增序列是 [2], 长度为1。</p></blockquote><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><div class="note no-icon info simple"><p>因为求的是递增序列，所以当前元素小于等于上一个元素时，表示上一个递增子序列结束，我们更新下一个子序列开始位置，并求出此时最大子序列，依此循环即可</p></div><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findLengthOfLCIS</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> ans, start <span class="keyword">int</span></span><br><span class="line">   <span class="keyword">for</span> k, v := <span class="keyword">range</span> nums &#123;</span><br><span class="line">      <span class="keyword">if</span> k &gt; <span class="number">0</span> &amp;&amp; v &lt;= nums[k<span class="number">-1</span>] &#123;</span><br><span class="line">         start = k</span><br><span class="line">      &#125;</span><br><span class="line">      ans = max(ans, k-start +<span class="number">1</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">   <span class="keyword">if</span> a &lt; b &#123;</span><br><span class="line">      <span class="keyword">return</span> b</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Golang </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go发现网络活跃主机</title>
      <link href="skill/back-end/27211.html"/>
      <url>skill/back-end/27211.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&emsp;&emsp;最近实际开发中突然遇到一个比较有意思的需求，大体内容是我需要从前端给我的一堆主机IP中拿出其中处于活跃状态的主机，说简单的就是能<code>ping</code>通的主机，乍一看不难，就想着去网上copy一份解决方案，但是乱七八糟一堆却没有实际解决问题的，大多是通过调用ping命令来实现，或者就是携带端口扫描的，这些都与我目前想实现的方式相背，所以都不能采用。</p><h3 id="思考🤔"><a href="#思考🤔" class="headerlink" title="思考🤔"></a>思考🤔</h3><p>不调用主机ping命令的情况下，自己去实现一个ping，基于这个思路，继续寻找解决方案，这才倒是有了，但都是通过ICMP协议，启动时需要sudo权限，这又与我所需要的相背，我需要的是不依赖于ICMP也可以Ping的方案。</p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>本文主角：<a href="https://github.com/go-ping/ping">go-ping</a>，它可以通过 UDP 发送一个“非特权”ping，与我的实际需求完全一致</p><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/20210829172002.png" alt="image-20210829172002459"></p><p>看一个官方示例的ping程序：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">pinger, err := ping.NewPinger(<span class="string">&quot;www.google.com&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Listen for Ctrl-C.</span></span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal, <span class="number">1</span>)</span><br><span class="line">signal.Notify(c, os.Interrupt)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _ = <span class="keyword">range</span> c &#123;</span><br><span class="line">pinger.Stop()</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">pinger.OnRecv = <span class="function"><span class="keyword">func</span><span class="params">(pkt *ping.Packet)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%d bytes from %s: icmp_seq=%d time=%v\n&quot;</span>,</span><br><span class="line">pkt.Nbytes, pkt.IPAddr, pkt.Seq, pkt.Rtt)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pinger.OnDuplicateRecv = <span class="function"><span class="keyword">func</span><span class="params">(pkt *ping.Packet)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%d bytes from %s: icmp_seq=%d time=%v ttl=%v (DUP!)\n&quot;</span>,</span><br><span class="line">pkt.Nbytes, pkt.IPAddr, pkt.Seq, pkt.Rtt, pkt.Ttl)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pinger.OnFinish = <span class="function"><span class="keyword">func</span><span class="params">(stats *ping.Statistics)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;\n--- %s ping statistics ---\n&quot;</span>, stats.Addr)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%d packets transmitted, %d packets received, %v%% packet loss\n&quot;</span>,</span><br><span class="line">stats.PacketsSent, stats.PacketsRecv, stats.PacketLoss)</span><br><span class="line">fmt.Printf(<span class="string">&quot;round-trip min/avg/max/stddev = %v/%v/%v/%v\n&quot;</span>,</span><br><span class="line">stats.MinRtt, stats.AvgRtt, stats.MaxRtt, stats.StdDevRtt)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;PING %s (%s):\n&quot;</span>, pinger.Addr(), pinger.IPAddr())</span><br><span class="line">err = pinger.Run()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际运行效果:</p><blockquote><p>PING <a href="http://www.baidu.com/">www.baidu.com</a> (14.215.177.38):<br>24 bytes from 14.215.177.38: icmp_seq=0 time=29.801ms<br>24 bytes from 14.215.177.38: icmp_seq=1 time=37.256ms<br>24 bytes from 14.215.177.38: icmp_seq=2 time=36.844ms<br>24 bytes from 14.215.177.38: icmp_seq=3 time=36.24ms<br>24 bytes from 14.215.177.38: icmp_seq=4 time=30.73ms<br>24 bytes from 14.215.177.38: icmp_seq=5 time=36.381ms<br>24 bytes from 14.215.177.38: icmp_seq=6 time=36.173ms<br>24 bytes from 14.215.177.38: icmp_seq=7 time=29.764ms<br>24 bytes from 14.215.177.38: icmp_seq=8 time=29.755ms<br>24 bytes from 14.215.177.38: icmp_seq=9 time=29.676ms<br>24 bytes from 14.215.177.38: icmp_seq=10 time=29.63ms<br>24 bytes from 14.215.177.38: icmp_seq=11 time=36.294ms<br>24 bytes from 14.215.177.38: icmp_seq=12 time=36.003ms</p><p>— <a href="http://www.baidu.com/">www.baidu.com</a> ping statistics —<br>13 packets transmitted, 13 packets received, 0% packet loss<br>round-trip min/avg/max/stddev = 29.63ms/33.426693ms/37.256ms/3.295477ms</p></blockquote><p>他通过发送和接收到的包来计算丢失率，在<code>pinger.OnFinish</code>时即可得到结果，但是我们实际运用的时候却不能去手动关闭这个<code>ping</code>程序来得到结果，通过阅读源码发现：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Pinger <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// Interval is the wait time between each packet send. Default is 1s.</span></span><br><span class="line">Interval time.Duration</span><br><span class="line"></span><br><span class="line"><span class="comment">// Timeout specifies a timeout before ping exits, regardless of how many</span></span><br><span class="line"><span class="comment">// packets have been received.</span></span><br><span class="line">Timeout time.Duration</span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了等待时间与超时时间，就可以通过超时而结束，在<code>pinger.OnFinish</code>中查看是否有收到包，以此判断主机是否处于活跃状态</p><h3 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a>最终代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PingIP</span><span class="params">(ip <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">   pinger, err := ping.NewPinger(ip)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">var</span> b <span class="keyword">bool</span></span><br><span class="line">   pinger.Interval = <span class="number">1</span> * time.Millisecond <span class="comment">// 发送间隔</span></span><br><span class="line">   pinger.Timeout = <span class="number">5</span> * time.Millisecond <span class="comment">// 超时时间</span></span><br><span class="line">   pinger.OnFinish = <span class="function"><span class="keyword">func</span><span class="params">(stats *ping.Statistics)</span></span> &#123;</span><br><span class="line">      <span class="keyword">if</span> stats.PacketsRecv != <span class="number">0</span> &#123;</span><br><span class="line">         b = <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   err = pinger.Run()</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过与具体业务的整合，即可得出一个发现活跃服务器</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode-数组系列5</title>
      <link href="skill/algorithm/55663.html"/>
      <url>skill/algorithm/55663.html</url>
      
        <content type="html"><![CDATA[<h3 id="115-最小栈"><a href="#115-最小栈" class="headerlink" title="115. 最小栈"></a>115. 最小栈</h3><p>设计一个支持<code>push</code> ，<code>pop</code>，<code>top</code>操作，并能在常数时间内检索到最小元素的栈。</p><ul><li><code>push(x)</code> —— 将元素 x 推入栈中。</li><li><code>pop()</code> —— 删除栈顶的元素。</li><li><code>top()</code> —— 获取栈顶元素。</li><li><code>getMin()</code> —— 检索栈中的最小元素。</li></ul><p><strong>示例:</strong></p><blockquote><p><strong>输入：</strong><br>[“MinStack”,”push”,”push”,”push”,”getMin”,”pop”,”top”,”getMin”]<br>[[],[-2],[0],[-3],[],[],[],[]]</p><p><strong>输出：</strong><br>[null,null,null,null,-3,null,0,-2]</p><p><strong>解释：</strong><br>MinStack minStack = new MinStack();<br>minStack.push(-2);<br>minStack.push(0);<br>minStack.push(-3);<br>minStack.getMin();   –&gt; 返回 -3.<br>minStack.pop();<br>minStack.top();      –&gt; 返回 0.<br>minStack.getMin();   –&gt; 返回 -2.</p></blockquote><p><strong>提示：</strong></p><p>pop、top 和 getMin 操作总是在 非空栈 上调用。</p><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><div class="note no-icon info simple"><p>因为要输入栈中最小值，所以我们额外定义一个辅助栈，用于入栈时记录当前数此时栈中最小值，出栈时一起出即可。</p></div><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">   <span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">      <span class="keyword">return</span> b</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MinStack <span class="keyword">struct</span> &#123;</span><br><span class="line">   stack    []<span class="keyword">int</span></span><br><span class="line">   minStack []<span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** initialize your data structure here. */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Constructor</span><span class="params">()</span> <span class="title">MinStack</span></span> &#123;</span><br><span class="line">   <span class="keyword">return</span> MinStack&#123;</span><br><span class="line">      stack:    []<span class="keyword">int</span>&#123;&#125;,</span><br><span class="line">      minStack: []<span class="keyword">int</span>&#123;math.MaxInt64&#125;,</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MinStack)</span> <span class="title">Push</span><span class="params">(val <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">   this.stack = <span class="built_in">append</span>(this.stack, val)</span><br><span class="line">   this.minStack = <span class="built_in">append</span>(this.minStack, min(val, this.minStack[<span class="built_in">len</span>(this.minStack)<span class="number">-1</span>]))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MinStack)</span> <span class="title">Pop</span><span class="params">()</span></span> &#123;</span><br><span class="line">   this.stack = this.stack[:<span class="built_in">len</span>(this.stack)<span class="number">-1</span>]</span><br><span class="line">   this.minStack = this.minStack[:<span class="built_in">len</span>(this.minStack)<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MinStack)</span> <span class="title">Top</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">   <span class="keyword">return</span> this.stack[<span class="built_in">len</span>(this.stack)<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MinStack)</span> <span class="title">GetMin</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">   <span class="keyword">return</span> this.minStack[<span class="built_in">len</span>(this.minStack)<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="594-最长和谐子序列"><a href="#594-最长和谐子序列" class="headerlink" title="594. 最长和谐子序列"></a>594. 最长和谐子序列</h3><p>和谐数组是指一个数组里元素的最大值和最小值之间的差别 <strong>正好是 1</strong> 。</p><p>现在，给你一个整数数组 nums ，请你在所有可能的子序列中找到最长的和谐子序列的长度。</p><p>数组的子序列是一个由数组派生出来的序列，它可以通过删除一些元素或不删除元素、且不改变其余元素的顺序而得到。</p><p><strong>示例 1：</strong></p><blockquote><p> 输入：nums = [1,3,2,2,5,2,3,7]<br>输出：5<br>解释：最长的和谐子序列是 [3,2,2,2,3]</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p> 输入：nums = [1,2,3,4]<br>输出：2</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p>输入：nums = [1,1,1,1]<br>输出：0</p></blockquote><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><div class="note no-icon info simple"><p>扫描数组，将扫描到元素<code>x</code>时，将<code>x</code>存入哈希表，然后获取哈希表中<code>x-1,x,x+1</code>出现的次数<code>a,b,c</code>，此时<code>a+b</code>与<code>b+c</code>分别为<code>x-1,x</code>与<code>x, x+1</code>组成的和谐子序列长度，我们取出其中最大的一个即为最长和谐子序列的长度。</p></div><h4 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findLHS</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">   mapList := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>)</span><br><span class="line">   <span class="keyword">var</span> res <span class="keyword">int</span></span><br><span class="line">   <span class="keyword">for</span> _, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">      mapList[num] ++</span><br><span class="line">      <span class="keyword">if</span> _, ok := mapList[num<span class="number">-1</span>]; ok &amp;&amp; res &lt; (mapList[num<span class="number">-1</span>] + mapList[num])&#123;</span><br><span class="line">         res = mapList[num<span class="number">-1</span>] + mapList[num]</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> _, ok := mapList[num+<span class="number">1</span>]; ok &amp;&amp; res &lt; (mapList[num+<span class="number">1</span>] + mapList[num])&#123;</span><br><span class="line">         res = mapList[num+<span class="number">1</span>] + mapList[num]</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="202-快乐数"><a href="#202-快乐数" class="headerlink" title="202. 快乐数"></a>202. 快乐数</h3><p>编写一个算法来判断一个数 n 是不是快乐数。</p><p>「快乐数」定义为：</p><ul><li><p>对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。</p></li><li><p>然后重复这个过程直到这个数变为 1，也可能是 无限循环 但始终变不到 1。</p></li><li><p>如果 可以变为  1，那么这个数就是快乐数。</p></li></ul><p>如果 n 是快乐数就返回 true ；不是，则返回 false 。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong>19<br><strong>输出：</strong>true<br><strong>解释：</strong><br>12 + 92 = 82<br>82 + 22 = 68<br>62 + 82 = 100<br>12 + 02 + 02 = 1</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong>n = 2<br><strong>输出：</strong>false</p></blockquote><div class="tabs" id="202"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#202-1">哈希</button></li><li class="tab"><button type="button" data-href="#202-2">快慢指针</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="202-1"><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><div class="note info no-icon simple"><p>对数进行列举发现数总共会出现3种情况：</p><ol><li>最终会得到 11。</li><li>最终会进入循环。</li><li>值会越来越大，最后接近无穷大</li></ol><p>第三种情况是最复杂，继续变大我们无法处理，经过实际测试我们发现：</p><table><thead><tr><th>位数</th><th>最大数</th><th>下一步得到的数</th></tr></thead><tbody><tr><td>1</td><td>9</td><td>81</td></tr><tr><td>2</td><td>99</td><td>162</td></tr><tr><td>3</td><td>999</td><td>243</td></tr><tr><td>4</td><td>9999</td><td>324</td></tr><tr><td>13</td><td>9999999999999</td><td>1053</td></tr></tbody></table><p>经过上表可得，3位数最大可得243，因为4位数和4位数以上的数字最后都会降到3位，这意味着这个数要么在243中循环，要么变成1。由此可将算法分为两个部分：</p><ol><li>计算n的下一位数</li><li>判断该数结果是否出现过，存在过这表示进入循环，不是快乐数</li></ol></div><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isHappy</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">   m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">bool</span>)</span><br><span class="line">   <span class="keyword">for</span> ; n != <span class="number">1</span> &amp;&amp; !m[n]; n, m[n] = step(n), <span class="literal">true</span> &#123;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> n == <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">step</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">   sum := <span class="number">0</span></span><br><span class="line">   <span class="keyword">for</span> n &gt; <span class="number">0</span> &#123;</span><br><span class="line">      sum += (n%<span class="number">10</span>) * (n%<span class="number">10</span>)</span><br><span class="line">      n /= <span class="number">10</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="202-2"><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><div class="note info no-icon simple"><p>哈希解法中的反复调用<code>step</code>函数可以看作一个链表中的<code>getNext</code>，由此我们得到一个隐形链表，虽然我们没有实际的链表节点和指针，但数据还是形成了一个链表数据结构。</p><p>由哈希初分析解法可知，最终结果只有两种，得到1和无限循环。循环在链表中既表示为闭环。采用快慢指针去遍历链表，慢指针每次前进一步，快指针前进两步，如果快指针会追上慢指针，则此链表闭环(不是快乐数)，快指针循环到链表尾部(得到1)，着不闭环(快乐数)</p></div><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isHappyList</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">   slow, fast := n, step(n)</span><br><span class="line">   <span class="keyword">for</span> ;fast != <span class="number">1</span> &amp;&amp; slow != fast; &#123;</span><br><span class="line">      slow = step(slow)</span><br><span class="line">      fast = step(step(fast))</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> fast == <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="598-范围求和-II"><a href="#598-范围求和-II" class="headerlink" title="598. 范围求和 II"></a>598. 范围求和 II</h3><p>给定一个初始元素全部为&nbsp;<strong>0</strong>，大小为 m*n 的矩阵&nbsp;<strong>M&nbsp;</strong>以及在&nbsp;<strong>M&nbsp;</strong>上的一系列更新操作。</p><p>操作用二维数组表示，其中的每个操作用一个含有两个<strong>正整数&nbsp;a</strong> 和 <strong>b</strong> 的数组表示，含义是将所有符合&nbsp;<strong>0 &lt;= i &lt; a</strong> 以及 <strong>0 &lt;= j &lt; b</strong> 的元素&nbsp;<strong>M[i][j]&nbsp;</strong>的值都<strong>增加 1</strong>。</p><p>在执行给定的一系列操作后，你需要返回矩阵中含有最大整数的元素个数。</p><p><strong>示例 1:</strong></p><p><strong>输入:</strong></p><blockquote><p>m = 3, n = 3<br>operations = [[2,2],[3,3]]<br><strong>输出:</strong> 4<br><strong>解释:</strong><br>初始状态, M =<br>[[0, 0, 0],<br> [0, 0, 0],<br> [0, 0, 0]]</p><p>执行完操作 [2,2] 后, M =<br>[[1, 1, 0],<br> [1, 1, 0],<br> [0, 0, 0]]</p><p>执行完操作 [3,3] 后, M =<br>[[2, 2, 1],<br> [2, 2, 1],<br> [1, 1, 1]]</p><p>M 中最大的整数是 2, 而且 M 中有4个值为2的元素。因此返回 4。</p></blockquote><p><strong>注意:</strong></p><ol>   <li>m 和 n 的范围是&nbsp;[1,40000]。</li>   <li>a 的范围是 [1,m]，b 的范围是 [1,n]。</li>   <li>操作数目不超过 10000。</li></ol><div class="tabs" id="598"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#598-1">暴力法</button></li><li class="tab"><button type="button" data-href="#598-2">重叠区域</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="598-1"><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><div class="note info simple no-icon simple"><p>由于所有的变化都是从<code>[0,0]</code>开始，所以[0,0]肯定是最大的，循环求出所有与其相等的即可。<mark class="hl-label red">注意：Leetcode提交时会提示内存不足</mark> </p></div><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxCount</span><span class="params">(m <span class="keyword">int</span>, n <span class="keyword">int</span>, ops [][]<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">   arr := <span class="built_in">make</span>([][]<span class="keyword">int</span>, m)</span><br><span class="line">   <span class="keyword">for</span> i := <span class="keyword">range</span> arr &#123;</span><br><span class="line">      arr[i] = <span class="built_in">make</span>([]<span class="keyword">int</span>, n)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span> _, op := <span class="keyword">range</span> ops &#123;</span><br><span class="line">      <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; op[<span class="number">0</span>]; i++ &#123;</span><br><span class="line">         <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; op[<span class="number">1</span>]; j++ &#123;</span><br><span class="line">            arr[i][j]++</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   max := arr[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">   <span class="keyword">var</span> count <span class="keyword">int</span></span><br><span class="line">   <span class="keyword">for</span> _, ints := <span class="keyword">range</span> arr &#123;</span><br><span class="line">      <span class="keyword">for</span> _, v := <span class="keyword">range</span> ints &#123;</span><br><span class="line">         <span class="keyword">if</span> v == max &#123;</span><br><span class="line">            count ++</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="598-2"><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><div class="note info simple no-icon simple"><p>由题意可知，每次增加都是从左上角开始，到<code>[i,j]</code>，重叠的范围为ops中最小的<code>(x,y)</code>，有了范围，最大的元素数目就为<code>x*y</code></p></div><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxCount</span><span class="params">(m <span class="keyword">int</span>, n <span class="keyword">int</span>, ops [][]<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">   <span class="keyword">for</span> _, op := <span class="keyword">range</span> ops &#123;</span><br><span class="line">      <span class="keyword">if</span> m &gt; op[<span class="number">0</span>] &#123;</span><br><span class="line">         m = op[<span class="number">0</span>]</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> n &gt; op[<span class="number">1</span>] &#123;</span><br><span class="line">         n = op[<span class="number">1</span>]</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> m*n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="599-两个列表的最小索引总和"><a href="#599-两个列表的最小索引总和" class="headerlink" title="599. 两个列表的最小索引总和"></a>599. 两个列表的最小索引总和</h3><p>假设Andy和Doris想在晚餐时选择一家餐厅，并且他们都有一个表示最喜爱餐厅的列表，每个餐厅的名字用字符串表示。</p><p>你需要帮助他们用<strong>最少的索引和</strong>找出他们<strong>共同喜爱的餐厅</strong>。 如果答案不止一个，则输出所有答案并且不考虑顺序。 你可以假设总是存在一个答案。</p><p><strong>示例 1:</strong></p><blockquote><p> <strong>输入:</strong></p><p>[&quot;Shogun&quot;, &quot;Tapioca Express&quot;, &quot;Burger King&quot;, &quot;KFC&quot;]<br>[&quot;Piatti&quot;, &quot;The Grill at Torrey Pines&quot;, &quot;Hungry Hunter Steakhouse&quot;, &quot;Shogun&quot;]<br><strong>输出:</strong> [&quot;Shogun&quot;]<br><strong>解释:</strong> 他们唯一共同喜爱的餐厅是&ldquo;Shogun&rdquo;。<br></pre></p></blockquote><p><strong>示例 2:</strong></p><blockquote><p><strong>输入:</strong></p><p>[&quot;Shogun&quot;, &quot;Tapioca Express&quot;, &quot;Burger King&quot;, &quot;KFC&quot;]<br>[&quot;KFC&quot;, &quot;Shogun&quot;, &quot;Burger King&quot;]<br><strong>输出:</strong> [&quot;Shogun&quot;]<br><strong>解释:</strong> 他们共同喜爱且具有最小索引和的餐厅是&ldquo;Shogun&rdquo;，它有最小的索引和1(0+1)。</p></blockquote><h4 id="解体思路"><a href="#解体思路" class="headerlink" title="解体思路"></a>解体思路</h4><div class="note no-icon simple info simple"><p>利用哈希表，遍历<code>list1</code>，以餐厅名称为<code>key</code>，下标为<code>value</code>，存入map，再遍历第二个数组，map中存在表示为同时喜欢餐厅，此时将两个下标相加即可得到索引，如果和比之前记录的最小值要小，那么清空返回结果列表，并将此结果添加进去，如果相等则追加</p></div><h4 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findRestaurant</span><span class="params">(list1 []<span class="keyword">string</span>, list2 []<span class="keyword">string</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> (</span><br><span class="line">      res      = []<span class="keyword">string</span>&#123;&#125;</span><br><span class="line">      mapList  = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br><span class="line">      minIndex = math.MaxInt32</span><br><span class="line">   )</span><br><span class="line">   <span class="keyword">for</span> i, s := <span class="keyword">range</span> list1 &#123;</span><br><span class="line">      mapList[s] = i</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span> i, s := <span class="keyword">range</span> list2 &#123;</span><br><span class="line">      <span class="keyword">if</span> v, ok := mapList[s]; ok &#123;</span><br><span class="line">         sum := v + i</span><br><span class="line">         <span class="keyword">if</span> sum == minIndex &#123;</span><br><span class="line">            res = <span class="built_in">append</span>(res, s)</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> sum &lt; minIndex &#123;</span><br><span class="line">            minIndex = sum</span><br><span class="line">            res = []<span class="keyword">string</span>&#123;s&#125;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="645-错误的集合"><a href="#645-错误的集合" class="headerlink" title="645. 错误的集合"></a>645. 错误的集合</h3><p>集合 <code>s</code> 包含从 <code>1</code> 到 <code>n</code> 的整数。不幸的是，因为数据错误，导致集合里面某一个数字复制了成了集合里面的另外一个数字的值，导致集合 <strong>丢失了一个数字</strong> 并且 <strong>有一个数字重复</strong> 。</p><p>给定一个数组 <code>nums</code> 代表了集合 <code>S</code> 发生错误后的结果。</p><p>请你找出重复出现的整数，再找到丢失的整数，将它们以数组的形式返回。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入：</strong>nums = [1,2,2,4]<br><strong>输出：</strong>[2,3]</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong>nums = [1,1]<br><strong>输出：</strong>[1,2]</p></blockquote><div class="tabs" id="645"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#645-1">排序</button></li><li class="tab"><button type="button" data-href="#645-2">哈希</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="645-1"><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><div class="note no-icon simple info simple"><p>先排序，比较每对相邻的元素，即可找到错误的集合。如果相邻的两个元素相等，则该元素为重复的数字；丢失的数字分为两种情况：</p><ul><li>如果丢失的数字大于 11且小于 n，两个数的差等于 2，他们之间的数即为丢失的数字；</li><li>如果丢失的数字是 1 或 n，则需要额外处理。</li></ul><p>由于要寻找丢失的数字，所以我们需要记录上一个数字，用来计算两个数字的差，如果丢失的是1，将上一个数字记录为0即可。如果最后一个数字不是n，那么丢失的就是n</p></div><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findRestaurant</span><span class="params">(list1 []<span class="keyword">string</span>, list2 []<span class="keyword">string</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> (</span><br><span class="line">      res      = []<span class="keyword">string</span>&#123;&#125;</span><br><span class="line">      mapList  = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br><span class="line">      minIndex = math.MaxInt32</span><br><span class="line">   )</span><br><span class="line">   <span class="keyword">for</span> i, s := <span class="keyword">range</span> list1 &#123;</span><br><span class="line">      mapList[s] = i</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span> i, s := <span class="keyword">range</span> list2 &#123;</span><br><span class="line">      <span class="keyword">if</span> v, ok := mapList[s]; ok &#123;</span><br><span class="line">         sum := v + i</span><br><span class="line">         <span class="keyword">if</span> sum == minIndex &#123;</span><br><span class="line">            res = <span class="built_in">append</span>(res, s)</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> sum &lt; minIndex &#123;</span><br><span class="line">            minIndex = sum</span><br><span class="line">            res = []<span class="keyword">string</span>&#123;s&#125;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="645-2"><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><div class="note no-icon simple info simple"><p>遍历数组，用哈希表记录数字出现的次数，再遍历1到n，出现2次的就是重复的，出现0次的就是丢失的</p></div><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findErrorNums</span><span class="params">(nums []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">   res := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">2</span>)</span><br><span class="line">   m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>, <span class="number">0</span>)</span><br><span class="line">   <span class="keyword">for</span> _, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">      m[num] ++</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">      <span class="keyword">if</span> v := m[i]; v == <span class="number">2</span> &#123;</span><br><span class="line">         res[<span class="number">0</span>] = i</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> v == <span class="number">0</span> &#123;</span><br><span class="line">         res[<span class="number">1</span>] = i</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Golang </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode-数组系列4</title>
      <link href="skill/algorithm/6574.html"/>
      <url>skill/algorithm/6574.html</url>
      
        <content type="html"><![CDATA[<h3 id="463-岛屿的周长"><a href="#463-岛屿的周长" class="headerlink" title="463. 岛屿的周长"></a>463. 岛屿的周长</h3><p>给定一个 row x col 的二维网格地图 grid ，其中：grid[i][j] = 1 表示陆地， grid[i][j] = 0 表示水域。</p><p>网格中的格子<strong>水平和垂直</strong>方向相连（对角线方向不相连）。整个网格被水完全包围，但其中恰好有一个岛屿（或者说，一个或多个表示陆地的格子相连组成的岛屿）。</p><p>岛屿中没有“湖”（“湖” 指水域在岛屿内部且不和岛屿周围的水相连）。格子是边长为 1 的正方形。网格为长方形，且宽度和高度均不超过 100 。计算这个岛屿的周长。</p><p><strong>示例 1：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/20210722195626.png" alt="img"></p><blockquote><p><strong>输入</strong>：grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]<br><strong>输出</strong>：16<br><strong>解释</strong>：它的周长是上面图片中的 16 个黄色的边</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入</strong>：grid = [[1]]<br><strong>输出</strong>：4</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p><strong>输入</strong>：grid = [[1,0]]<br><strong>输出</strong>：4</p></blockquote><div class="tabs" id="463"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#463-1">公式法</button></li><li class="tab"><button type="button" data-href="#463-2">DFS</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="463-1"><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><div class="note info no-icon simple"><p>通过观察不难看出每个格子都有4条边，而两个格子相邻时会去掉两条边，所以周长应该为 <code>4*格子数量 - 2*响铃的边</code>；由于格子相邻是互相的，所以寻找相邻的格子时只寻找右下方的即可</p></div><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">islandPerimeter</span><span class="params">(grid [][]<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> count, edge <span class="keyword">int</span></span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(grid); i++ &#123;</span><br><span class="line">      <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="built_in">len</span>(grid[i]); j++ &#123;</span><br><span class="line">         <span class="keyword">if</span> grid[i][j] == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">         &#125;</span><br><span class="line">         count++</span><br><span class="line">         <span class="keyword">if</span> j+<span class="number">1</span> &lt; <span class="built_in">len</span>(grid[i]) &amp;&amp; grid[i][j+<span class="number">1</span>] == <span class="number">1</span> &#123;</span><br><span class="line">            edge++</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> i+<span class="number">1</span> &lt; <span class="built_in">len</span>(grid) &amp;&amp; grid[i+<span class="number">1</span>][j] == <span class="number">1</span> &#123;</span><br><span class="line">            edge++</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">4</span>*count - <span class="number">2</span>*edge</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="463-2"><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><div class="note info no-icon simple"><p>因为总共就一个岛屿，所以我们从遇到的第一块土地开始，基于他递归上下左右4个点：从土地到土地不会产生周长，从土地到海洋会产生周长，从土地到边界会参数周长，将这些周长相加即可。</p><p>在上述过程中，递归会导致重复，造成重复计算，将遍历过得土地做一个特殊标记，区别于1和0表示已经访问过了。</p></div><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">islandPerimeter</span><span class="params">(grid [][]<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(grid); i++ &#123;</span><br><span class="line">      <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="built_in">len</span>(grid[i]); j++ &#123;</span><br><span class="line">         <span class="keyword">if</span> grid[i][j] == <span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> dfs(grid, i, j)</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dfs</span><span class="params">(grid [][]<span class="keyword">int</span>, x, y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">   <span class="keyword">if</span> x &lt; <span class="number">0</span> || x &gt;= <span class="built_in">len</span>(grid) || y &lt; <span class="number">0</span> || y &gt;= <span class="built_in">len</span>(grid[<span class="number">0</span>]) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> grid[x][y] == <span class="number">0</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> grid[x][y] == <span class="number">2</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">   &#125;</span><br><span class="line">   grid[x][y] = <span class="number">2</span></span><br><span class="line">   <span class="keyword">return</span> dfs(grid, x<span class="number">-1</span>, y) + dfs(grid, x+<span class="number">1</span>, y) + dfs(grid, x, y<span class="number">-1</span>) + dfs(grid, x, y+<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="495-提莫攻击"><a href="#495-提莫攻击" class="headerlink" title="495. 提莫攻击"></a>495. 提莫攻击</h3><p>在《英雄联盟》的世界中，有一个叫 “提莫” 的英雄，他的攻击可以让敌方英雄艾希（编者注：寒冰射手）进入中毒状态。现在，给出提莫对艾希的攻击时间序列和提莫攻击的中毒持续时间，你需要输出艾希的中毒状态总时长。</p><p>你可以认为提莫在给定的时间点进行攻击，并立即使艾希处于中毒状态。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入</strong>: [1,4], 2<br><strong>输出</strong>: 4<br><strong>原因</strong>: 第 1 秒初，提莫开始对艾希进行攻击并使其立即中毒。中毒状态会维持 2 秒钟，直到第 2 秒末结束。<br>第 4 秒初，提莫再次攻击艾希，使得艾希获得另外 2 秒中毒时间。<br>所以最终输出 4 秒。</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入</strong>: [1,2], 2<br><strong>输出</strong>: 3<br><strong>原因</strong>: 第 1 秒初，提莫开始对艾希进行攻击并使其立即中毒。中毒状态会维持 2 秒钟，直到第 2 秒末结束。<br>但是第 2 秒初，提莫再次攻击了已经处于中毒状态的艾希。<br>由于中毒状态不可叠加，提莫在第 2 秒初的这次攻击会在第 3 秒末结束。<br>所以最终输出 3 。</p></blockquote><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><div class="note info no-icon simple"><p>先考虑两个相邻攻击时间节点<code>timeSeries[i]</code>和<code>timeSeries[i-1]</code>的差，如果大于攻击持续时间<code>duration</code>，则第<code>i-1</code>次攻击持续</p><p><code>duration</code>，反之则持续<code>timeSeries[i] - timeSeries[i-1]</code>，最后一次攻击始终会持续<code>duration</code>，将它们相加即可</p></div><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findPoisonedDuration</span><span class="params">(timeSeries []<span class="keyword">int</span>, duration <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">   <span class="keyword">if</span> <span class="built_in">len</span>(timeSeries) == <span class="number">0</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">var</span> total <span class="keyword">int</span></span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(timeSeries); i++ &#123;</span><br><span class="line">      <span class="keyword">if</span> timeSeries[i]-timeSeries[i<span class="number">-1</span>] &lt; duration &#123;</span><br><span class="line">         total += timeSeries[i] - timeSeries[i<span class="number">-1</span>]</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         total += duration</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> total + duration</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="496-下一个更大元素-I"><a href="#496-下一个更大元素-I" class="headerlink" title="496. 下一个更大元素 I"></a>496. 下一个更大元素 I</h3><p>给你两个<strong>没有重复元素</strong>的数组<code>nums1</code>和<code>nums2</code> ，其中<code>nums1</code>是<code>nums2</code>的子集。</p><p>请你找出<code>nums1</code>中每个元素在<code>nums2</code>中的下一个比其大的值。</p><p>nums1 中数字 x 的下一个更大元素是指 x 在 nums2 中对应位置的右边的第一个比 x 大的元素。如果不存在，对应位置输出 -1 。</p><p><strong>示例 1</strong> :</p><blockquote><p><strong>输入</strong>: nums1 = [4,1,2], nums2 = [1,3,4,2].<br><strong>输出</strong>: [-1,3,-1]<br><strong>解释</strong>:<br>             对于 num1 中的数字 4 ，你无法在第二个数组中找到下一个更大的数字，因此输出 -1 。<br>             对于 num1 中的数字 1 ，第二个数组中数字1右边的下一个较大数字是 3 。<br>             对于 num1 中的数字 2 ，第二个数组中没有下一个更大的数字，因此输出 -1 。</p></blockquote><p><strong>示例 2</strong>:</p><blockquote><p><strong>输入</strong>: nums1 = [2,4], nums2 = [1,2,3,4].<br><strong>输出</strong>: [3,-1]<br><strong>解释</strong>:<br>        对于 num1 中的数字 2 ，第二个数组中的下一个较大数字是 3 。<br>        对于 num1 中的数字 4 ，第二个数组中没有下一个更大的数字，因此输出 -1 。</p></blockquote><p><strong>提示</strong>：</p><ul><li><code>1 &lt;= nums1.length &lt;= nums2.length &lt;= 1000</code></li><li><code>0 &lt;= nums1[i], nums2[i] &lt;= 104</code></li><li><code>nums1</code>和<code>nums2</code>中所有整数 互不相同</li><li><code>nums1</code> 中的所有整数同样出现在 <code>nums2</code> 中</li></ul><p><strong>进阶</strong>：你可以设计一个时间复杂度为<code>O(nums1.length + nums2.length)</code>的解决方案吗？</p><div class="tabs" id="496"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#496-1">暴力法</button></li><li class="tab"><button type="button" data-href="#496-2">单调栈</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="496-1"><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><div class="note info no-icon simple"><p>循环<code>nums1</code>，在<code>nums2</code>中查找它的位置，并想有遍历寻找第一个比它大的元素</p></div><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">nextGreaterElement</span><span class="params">(nums1 []<span class="keyword">int</span>, nums2 []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">   res := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(nums1))</span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums1); i++ &#123;</span><br><span class="line">      j := <span class="number">0</span></span><br><span class="line">      <span class="keyword">for</span> ;j&lt;<span class="built_in">len</span>(nums2) &amp;&amp; nums1[i] != nums2[j]; &#123;</span><br><span class="line">         j++</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> ;j&lt;<span class="built_in">len</span>(nums2); j ++ &#123;</span><br><span class="line">         <span class="keyword">if</span> nums1[i]&lt; nums2[j] &#123;</span><br><span class="line">            res[i] = nums2[j]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> j == <span class="built_in">len</span>(nums2)&#123;</span><br><span class="line">         res[i] = <span class="number">-1</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="496-2"><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><div class="note no-icon info simple"><p>由于<code>nums1</code>是<code>nums2</code>的子集，整体思路就是求出<code>nums2</code>中每个元素对应的下一个更大元素，存在map中，其中<code>key</code>为<code>nums2</code>中的元素值，<code>value</code>为下一个更大元素。</p><p>正序遍历数组<code>nums2</code>，对于当前考察元素<code>nums2[i]</code>来说：</p><ul><li>如果栈为空，将<code>nums[i]</code>入栈，继续向后遍历，看是否有大于<code>nums[i]</code>的</li><li>如果栈不为空且其值大于栈顶元素，由于正序遍历所以当前元素<code>nums[i]</code>是栈顶元素的下一个更大元素。所以栈顶元素出栈作为<code>key</code>，<code>nums[i]</code>作为<code>value</code>存入map。对于出栈后的新栈，继续上诉操作，知道<code>nums[i]</code>不再大于栈顶元素或者栈为空时入栈。</li></ul><p>数组遍历完后，查看栈是否为空，不为空时栈类元素为没有更大的元素，值为<code>-1</code></p></div><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">nextGreaterElement</span><span class="params">(nums1 []<span class="keyword">int</span>, nums2 []<span class="keyword">int</span>)</span> []<span class="title">int</span></span>  &#123;</span><br><span class="line">   stack := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>)</span><br><span class="line">   mapList := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>)</span><br><span class="line">   <span class="keyword">for</span> _, v := <span class="keyword">range</span> nums2 &#123;</span><br><span class="line">      <span class="keyword">if</span> <span class="built_in">len</span>(stack) == <span class="number">0</span> &#123;</span><br><span class="line">         stack = <span class="built_in">append</span>(stack, v)</span><br><span class="line">         <span class="keyword">continue</span></span><br><span class="line">      &#125;</span><br><span class="line">      i := <span class="number">0</span></span><br><span class="line">      <span class="keyword">for</span> ; i &lt; <span class="built_in">len</span>(stack); i++ &#123;</span><br><span class="line">         <span class="keyword">if</span> v &gt; stack[i] &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> j := i; j &lt; <span class="built_in">len</span>(stack); j++ &#123;</span><br><span class="line">         mapList[stack[j]] = v</span><br><span class="line">      &#125;</span><br><span class="line">      stack = stack[:i]</span><br><span class="line">      stack = <span class="built_in">append</span>(stack, v)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span> _,v := <span class="keyword">range</span> stack &#123;</span><br><span class="line">      mapList[v] = <span class="number">-1</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span> k, v := <span class="keyword">range</span> nums1 &#123;</span><br><span class="line">      nums1[k] = mapList[v]</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> nums1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="500-键盘行"><a href="#500-键盘行" class="headerlink" title="500. 键盘行"></a>500. 键盘行</h3><p>给你一个字符串数组 words ，只返回可以使用在<strong>美式键盘</strong>同一行的字母打印出来的单词。键盘如下图所示。</p><p><strong>美式键盘</strong>中：</p><ul><li>第一行由字符<code>&quot;qwertyuiop&quot;</code>组成。</li><li>第二行由字符`”asdfghjkl” 组成。</li><li>第三行由字符<code>&quot;zxcvbnm&quot;</code>组成。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/20210726193833.png" alt="American keyboard"></p><p><strong>示例 1</strong>：</p><blockquote><p><strong>输入：</strong>words = [“Hello”,”Alaska”,”Dad”,”Peace”]<br><strong>输出：</strong>[“Alaska”,”Dad”]</p></blockquote><p><strong>示例 2</strong>：</p><blockquote><p><strong>输入：</strong>words = [“omk”]<br><strong>输出：</strong>[]</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p><strong>输入：</strong>words = [“adsdf”,”sfd”]<br><strong>输出：</strong>[“adsdf”,”sfd”]</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= words.length &lt;= 20</code></li><li><code>1 &lt;= words[i].length &lt;= 100</code></li><li><code>words[i]</code>由英文字母（小写和大写字母）组成</li></ul><div class="tabs" id="500"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#500-1">哈希</button></li><li class="tab"><button type="button" data-href="#500-2">标准库</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="500-1"><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><div class="note no-icon simple info simple"><p>以键盘字母为<code>key</code>，所在行数为<code>value</code>存入map。遍历words中每一个单词的字母，是否在同一行</p></div><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findWords</span><span class="params">(words []<span class="keyword">string</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> (</span><br><span class="line">      res []<span class="keyword">string</span></span><br><span class="line">      keyboard <span class="keyword">map</span>[<span class="keyword">byte</span>]<span class="keyword">int</span></span><br><span class="line">   )</span><br><span class="line">   keyboard = <span class="keyword">map</span>[<span class="keyword">byte</span>]<span class="keyword">int</span>&#123;</span><br><span class="line">      <span class="string">&#x27;q&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;w&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;r&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;t&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;u&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;i&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;o&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;p&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;s&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;f&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;g&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;h&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;j&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;k&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;l&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="string">&#x27;z&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;x&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;v&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;n&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;m&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span> _, word := <span class="keyword">range</span> words &#123;</span><br><span class="line">      b := <span class="literal">true</span></span><br><span class="line">      lowercase := strings.ToLower(word)</span><br><span class="line">      <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(lowercase); i++ &#123;</span><br><span class="line">         <span class="keyword">if</span> keyboard[lowercase[i<span class="number">-1</span>]] != keyboard[lowercase[i]] &#123;</span><br><span class="line">            b = <span class="literal">false</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> b &#123;</span><br><span class="line">         res = <span class="built_in">append</span>(res, word)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="500-2"><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><div class="note no-icon info simple"><p>利用<code>strings</code>库提供的<code>ContainsAny</code>函数，判断输入的单词是否出现在键盘的某一行中，如果一个单词在多行中出现则表示不符合标准</p></div><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findWords2</span><span class="params">(words []<span class="keyword">string</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">   line1 := <span class="string">&quot;qwertyuiopQWERTYUIOP&quot;</span></span><br><span class="line">   line2 := <span class="string">&quot;asdfghjklASDFGHJKL&quot;</span></span><br><span class="line">   line3 := <span class="string">&quot;zxcvbnmZXCVBNM&quot;</span></span><br><span class="line">   <span class="keyword">var</span> res []<span class="keyword">string</span></span><br><span class="line">   <span class="keyword">for</span> _, word := <span class="keyword">range</span> words&#123;</span><br><span class="line">      b1 := strings.ContainsAny(word, line1)</span><br><span class="line">      b2 := strings.ContainsAny(word, line2)</span><br><span class="line">      b3 := strings.ContainsAny(word, line3)</span><br><span class="line">      <span class="keyword">if</span> (b1 &amp;&amp; !b2 &amp;&amp; !b3) || (!b1 &amp;&amp; b2 &amp;&amp; !b3) || (!b1 &amp;&amp; !b2 &amp;&amp; b3)&#123;</span><br><span class="line">         res = <span class="built_in">append</span>(res, word)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="506-相对名次"><a href="#506-相对名次" class="headerlink" title="506. 相对名次"></a>506. 相对名次</h3><p>给出<strong>N</strong>名运动员的成绩，找出他们的相对名次并授予前三名对应的奖牌。前三名运动员将会被分别授予 “金牌”，“银牌” 和“ 铜牌”（”Gold Medal”, “Silver Medal”, “Bronze Medal”）。</p><p>(注：分数越高的选手，排名越靠前。)</p><p><strong>示例 1:</strong></p><blockquote><p><strong>输入:</strong> [5, 4, 3, 2, 1]<br><strong>输出:</strong>  [“Gold Medal”, “Silver Medal”, “Bronze Medal”, “4”, “5”]<br><strong>解释:</strong>  前三名运动员的成绩为前三高的，因此将会分别被授予 “金牌”，“银牌”和“铜牌” (“Gold Medal”, “Silver Medal” and “Bronze Medal”).<br>余下的两名运动员，我们只需要通过他们的成绩计算将其相对名次即可。</p></blockquote><p><strong>提示:</strong></p><ol><li>N是一个正整数并且不会超过 10000。</li><li>所有运动员的成绩都不相同。</li></ol><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><div class="note no-icon info simple"><ol><li>将原位置存入Hash</li><li>排序</li><li>循环排序后的数组，从map中出去原位置作为下标加入返回数组中</li></ol></div><h4 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findRelativeRanks</span><span class="params">(score []<span class="keyword">int</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">   mapList := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>, <span class="built_in">len</span>(score))</span><br><span class="line">   <span class="keyword">for</span> k, v := <span class="keyword">range</span> score &#123;</span><br><span class="line">      mapList[v] = k</span><br><span class="line">   &#125;</span><br><span class="line">   sort.Ints(score)</span><br><span class="line">   res := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="built_in">len</span>(score))</span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(score); i++ &#123;</span><br><span class="line">      <span class="keyword">if</span> <span class="built_in">len</span>(score)-i == <span class="number">1</span> &#123;</span><br><span class="line">         res[mapList[score[i]]] = <span class="string">&quot;Gold Medal&quot;</span></span><br><span class="line">         <span class="keyword">continue</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> <span class="built_in">len</span>(score)-i == <span class="number">2</span> &#123;</span><br><span class="line">         res[mapList[score[i]]] = <span class="string">&quot;Silver Medal&quot;</span></span><br><span class="line">         <span class="keyword">continue</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> <span class="built_in">len</span>(score)-i == <span class="number">3</span> &#123;</span><br><span class="line">         res[mapList[score[i]]] = <span class="string">&quot;Bronze Medal&quot;</span></span><br><span class="line">         <span class="keyword">continue</span></span><br><span class="line">      &#125;</span><br><span class="line">      res[mapList[score[i]]] = strconv.Itoa(<span class="built_in">len</span>(score) - i)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="575-分糖果"><a href="#575-分糖果" class="headerlink" title="575. 分糖果"></a>575. 分糖果</h3><p>给定一个<strong>偶数</strong>长度的数组，其中不同的数字代表着不同种类的糖果，每一个数字代表一个糖果。你需要把这些糖果<strong>平均</strong>分给一个弟弟和一个妹妹。返回妹妹可以获得的最大糖果的种类数。</p><p><strong>示例 1:</strong></p><blockquote><p><strong>输入:</strong> candies = [1,1,2,2,3,3]<br><strong>输出:</strong> 3<br><strong>解析:</strong> 一共有三种种类的糖果，每一种都有两个。<br>         最优分配方案：妹妹获得[1,2,3],弟弟也获得[1,2,3]。这样使妹妹获得糖果的种类数最多。</p></blockquote><p><strong>示例 2 :</strong></p><blockquote><p><strong>输入:</strong> candies = [1,1,2,3]<br><strong>输出:</strong> 2<br><strong>解析:</strong> 妹妹获得糖果[2,3],弟弟获得糖果[1,1]，妹妹有两种不同的糖果，弟弟只有一种。这样使得妹妹可以获得的糖果种类数最多。</p></blockquote><p><strong>注意:</strong></p><ol><li>数组的长度为[2, 10,000]，并且确定为偶数。</li><li>数组中数字的大小在范围[-100,000, 100,000]内。</li></ol><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><div class="note no-icon info simple"><p>因为是平均分配，所以妹妹糖果的情况为：</p><ul><li>最多：所有糖果数量的一半(此时糖果种类大于等于糖果总数的一半)</li><li>最少：1种(所有糖果为一类)</li></ul><p>所以妹妹获得糖果种类为：<code>min(总数的一半,糖果种类)</code></p></div><h4 id="示例代码：排序"><a href="#示例代码：排序" class="headerlink" title="示例代码：排序"></a>示例代码：排序</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">distributeCandies</span><span class="params">(candyType []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">   sort.Ints(candyType)</span><br><span class="line">   count := <span class="number">1</span></span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(candyType) &amp;&amp; count &lt; <span class="built_in">len</span>(candyType)/<span class="number">2</span>; i++ &#123;</span><br><span class="line">      <span class="keyword">if</span> candyType[i] != candyType[i<span class="number">-1</span>] &#123;</span><br><span class="line">         count++</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="示例代码：Map"><a href="#示例代码：Map" class="headerlink" title="示例代码：Map"></a>示例代码：Map</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">distributeCandies</span><span class="params">(candyType []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">   mapList := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">struct</span>&#123;&#125;, <span class="number">0</span> )</span><br><span class="line">   <span class="keyword">for</span> _, v := <span class="keyword">range</span> candyType &#123;</span><br><span class="line">      mapList[v] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> <span class="built_in">len</span>(mapList) &lt; <span class="built_in">len</span>(candyType)/<span class="number">2</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">len</span>(mapList)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">len</span>(candyType)/<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Golang </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode-数组系列3</title>
      <link href="skill/algorithm/56303.html"/>
      <url>skill/algorithm/56303.html</url>
      
        <content type="html"><![CDATA[<h3 id="返回总目录"><a href="#返回总目录" class="headerlink" title="返回总目录"></a>返回总目录</h3><p><a href="/leetcode.html">日刷leetcode–简单版</a></p><hr><h3 id="204-计数质数"><a href="#204-计数质数" class="headerlink" title="204. 计数质数"></a>204. 计数质数</h3><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/20210713143946.png" alt="image-20210713143946282"></p><div class="tabs" id="204"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#204-1">枚举</button></li><li class="tab"><button type="button" data-href="#204-2">埃氏筛</button></li><li class="tab"><button type="button" data-href="#204-3">埃氏筛</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="204-1"><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><div class="note info no-icon simple"><p>根据质数定义可知，除了1和它本身意外不再有其他因数的自然数。对于每一个<code>x</code>，我们可以枚举<code>[2, x-1]</code>中的每个数<code>y</code>，判断<code>y</code>是否是<code>x</code>的因数。如果<code>y</code>是<code>x</code>的因数，那么<code>y</code>永远在<code>[2, √x]</code>范围内</p></div><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">countPrimes</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> count <span class="keyword">int</span></span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">2</span>; i &lt; n; i++ &#123;</span><br><span class="line">      <span class="keyword">if</span> isPrime(i) &#123;</span><br><span class="line">         count++</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPrime</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">2</span>; i*i &lt;= x; i++ &#123;</span><br><span class="line">      <span class="keyword">if</span> x%i == <span class="number">0</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="204-2"><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><div class="note info no-icon simple"><p><a href="https://zh.wikipedia.org/wiki/%E5%9F%83%E6%8B%89%E6%89%98%E6%96%AF%E7%89%B9%E5%B0%BC%E7%AD%9B%E6%B3%95">厄拉多塞筛法</a>的定义不再详细解释，大致的意思是：如果<code>x</code>是质数，那么<code>2x</code>，<code>3x</code>，<code>4x</code>….一定不是质数。定义一个数组<code>isPrime</code>表示是否为质数，如果<code>isPrime[i]</code>是质数，就将<code>i</code>的倍数全部标记为非质数。</p></div><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">countPrimes</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> count <span class="keyword">int</span></span><br><span class="line">   isPrime := <span class="built_in">make</span>([]<span class="keyword">bool</span>, n)</span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">      isPrime[i] = <span class="literal">true</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">2</span>; i &lt; n; i++ &#123;</span><br><span class="line">      <span class="keyword">if</span> isPrime[i] &#123;</span><br><span class="line">         count++</span><br><span class="line">         <span class="keyword">for</span> j := i * <span class="number">2</span>; j &lt; n; j += i &#123;</span><br><span class="line">            isPrime[j] = <span class="literal">false</span></span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="204-3"><!-- tab 线性筛 --><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><div class="note info no-icon simple"><p>思路来自于埃氏筛，我们将已知的质数存放与一个数组中，遍历数组取出质数<code>x</code>，我们不再标记<code>x</code>的倍数，而是标记质数集合每一项与当前<code>i</code>乘积，切当<code>i</code>为质数倍数时结束当前标记，避免了重复标记</p></div><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">countPrimes</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">   primes := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">   isPrime := <span class="built_in">make</span>([]<span class="keyword">bool</span>, n)</span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">      isPrime[i] = <span class="literal">true</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">2</span>; i &lt; n; i++ &#123;</span><br><span class="line">      <span class="keyword">if</span> isPrime[i] &#123;</span><br><span class="line">         primes = <span class="built_in">append</span>(primes, i)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> _, prime := <span class="keyword">range</span> primes &#123;</span><br><span class="line">         <span class="keyword">if</span> i*prime &gt;= n &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">         &#125;</span><br><span class="line">         isPrime[i*prime] = <span class="literal">false</span></span><br><span class="line">         <span class="keyword">if</span> i%prime == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">len</span>(primes)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="303-区域和检索-数组不可变"><a href="#303-区域和检索-数组不可变" class="headerlink" title="303. 区域和检索 - 数组不可变"></a>303. 区域和检索 - 数组不可变</h3><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/20210713165305.png" alt="image-20210713165305675"></p><div class="tabs" id="303"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#303-1">直接计算</button></li><li class="tab"><button type="button" data-href="#303-2">前缀和</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="303-1"><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><div class="note info no-icon simple"><p>将原数组存放在NumArray中，在SumRange中求<code>i</code>到<code>j</code>的和即可</p></div><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> NumArray <span class="keyword">struct</span> &#123;</span><br><span class="line">   sums []<span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Constructor</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">NumArray</span></span> &#123;</span><br><span class="line">   sums := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(nums))</span><br><span class="line">   <span class="keyword">for</span> i, v := <span class="keyword">range</span> nums &#123;</span><br><span class="line">      sums[i] = v</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> NumArray&#123;sums: sums&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *NumArray)</span> <span class="title">SumRange</span><span class="params">(left <span class="keyword">int</span>, right <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> count <span class="keyword">int</span></span><br><span class="line">   <span class="keyword">for</span> i := left; i &lt;= right; i++ &#123;</span><br><span class="line">      count += this.sums[i]</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="303-2"><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><div class="note info no-icon simple"><p>假设数组<code>nums</code>的长度为<code>n</code>，创建长度为<code>n+1</code>的数组<code>sums</code>，对于<code>0 ≤ i &lt; n</code>都有<code>sums[i+1] = sums[i] + nums[i]</code>，<code>sums[i]</code>表示了<code>nums</code>从下标<code>0</code>到<code>i-1</code>的前缀和，因为前缀和数组<code>sums</code>的长度为<code>n+1</code>的缘故，不需要对<code>i = 0</code>进行额外处理，所以：<code>sumRange(i,j)=sums[j+1]−sums[i]</code></p></div><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> NumArray <span class="keyword">struct</span> &#123;</span><br><span class="line">   sums []<span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Constructor</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">NumArray</span></span> &#123;</span><br><span class="line">   sums := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(nums)+<span class="number">1</span>)</span><br><span class="line">   <span class="keyword">for</span> i, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">      sums[i+<span class="number">1</span>] = sums[i] + num <span class="comment">// sum[i+1]存储nums[i]的前缀和</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> NumArray&#123;sums: sums&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *NumArray)</span> <span class="title">SumRange</span><span class="params">(left <span class="keyword">int</span>, right <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">   <span class="keyword">return</span> this.sums[right+<span class="number">1</span>] - this.sums[left]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="349-两个数组的交集"><a href="#349-两个数组的交集" class="headerlink" title="349. 两个数组的交集"></a>349. 两个数组的交集</h3><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/20210714143501.png" alt="image-20210713173412962"></p><div class="tabs" id="349"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#349-1">Map</button></li><li class="tab"><button type="button" data-href="#349-2">排序加双指针</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="349-1"><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><div class="note no-icon info simple"><p>创建<code>key</code>为<code>int</code>，<code>value</code>为<code>bool</code>的map，遍历<code>nums1</code>，将数值的元素为<code>key</code>值为<code>true</code>存入map，循环<code>nums2</code>，判断map中是否存在，存在则表示此数在两数组中同事存在，为了避免重复添加，将值改为<code>flase</code>，判断是改为map中存在切值为<code>true</code>。</p><p>处于节省空间考虑，建立map数组时应尽量使用较小的数组</p></div><h4 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">intersection</span><span class="params">(nums1 []<span class="keyword">int</span>, nums2 []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">   <span class="keyword">if</span> <span class="built_in">len</span>(nums1) &gt; <span class="built_in">len</span>(nums2)&#123; <span class="comment">// 遍历较小的数组生成map</span></span><br><span class="line">      intersection(nums2, nums1)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">var</span> intersection []<span class="keyword">int</span></span><br><span class="line">   mapList := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">bool</span>)</span><br><span class="line">   <span class="keyword">for</span> _, v := <span class="keyword">range</span> nums1 &#123;</span><br><span class="line">      mapList[v] = <span class="literal">true</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> _, v := <span class="keyword">range</span> nums2 &#123;</span><br><span class="line">      <span class="keyword">if</span> _, ok := mapList[v]; ok &amp;&amp; mapList[v] &#123;</span><br><span class="line">         intersection = <span class="built_in">append</span>(intersection, v)</span><br><span class="line">         mapList[v] = <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> intersection</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="349-2"><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><div class="note no-icon info simple"><p>先对两个数组排序，然后双指针循环两个数组，判断指针指向的数是否相等，若相等，则指针后移，交集中不存在则添加值交集数组中，指针所在数不相等则判断两数的大小，较小的数指针后移</p></div><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">intersection</span><span class="params">(nums1 []<span class="keyword">int</span>, nums2 []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> intersection []<span class="keyword">int</span></span><br><span class="line">   sort.Ints(nums1)</span><br><span class="line">   sort.Ints(nums2)</span><br><span class="line">   <span class="keyword">for</span> i,j := <span class="number">0</span>,<span class="number">0</span>; i&lt;<span class="built_in">len</span>(nums1) &amp;&amp; j &lt;<span class="built_in">len</span>(nums2); &#123;</span><br><span class="line">      <span class="keyword">if</span> nums1[i] == nums2[j] &#123;</span><br><span class="line">         <span class="keyword">if</span> intersection == <span class="literal">nil</span> || intersection[<span class="built_in">len</span>(intersection)<span class="number">-1</span>] != nums1[i] &#123;</span><br><span class="line">            intersection = <span class="built_in">append</span>(intersection, nums1[i])</span><br><span class="line">         &#125;</span><br><span class="line">         i++</span><br><span class="line">         j++</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span> nums1[i] &gt; nums2[j]&#123;</span><br><span class="line">         j++</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         i++</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> intersection</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="350-两个数的交集-II"><a href="#350-两个数的交集-II" class="headerlink" title="350. 两个数的交集 II"></a>350. 两个数的交集 II</h3><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/20210714111828.png" alt="image-20210714111828350"></p><div class="tabs" id="350"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#350-1">Map</button></li><li class="tab"><button type="button" data-href="#350-2">排序+双指针</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="350-1"><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><div class="note no-icon info simple"><p>基于349的map思路，将map的值由bool换成int，循环第一个数组时，记录出现的值的次数，循环第二个数组时判断是否存在且剩余个数大于1则添加为交集</p></div><h4 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">intersect</span><span class="params">(nums1 []<span class="keyword">int</span>, nums2 []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">   <span class="keyword">if</span> <span class="built_in">len</span>(nums1) &gt; <span class="built_in">len</span>(nums2) &#123; <span class="comment">// 遍历较小的数组生成map</span></span><br><span class="line">      intersect(nums2, nums1)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">var</span> intersection []<span class="keyword">int</span></span><br><span class="line">   mapList := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>)</span><br><span class="line">   <span class="keyword">for</span> _, v := <span class="keyword">range</span> nums1 &#123;</span><br><span class="line">      mapList[v] ++</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> _, v := <span class="keyword">range</span> nums2 &#123;</span><br><span class="line">      <span class="keyword">if</span> _, ok := mapList[v]; ok &amp;&amp; mapList[v] &gt; <span class="number">0</span> &#123;</span><br><span class="line">         intersection = <span class="built_in">append</span>(intersection, v)</span><br><span class="line">         mapList[v] --</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> intersection</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="350-2"><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><div class="note no-icon info simple"><p>因为不需要去重，所以对于两个排好序的数组，直接遍历即可，遇到相同的就添加，不相同时较小的后移</p></div><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">intersect</span><span class="params">(nums1 []<span class="keyword">int</span>, nums2 []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> intersection []<span class="keyword">int</span></span><br><span class="line">   sort.Ints(nums1)</span><br><span class="line">   sort.Ints(nums2)</span><br><span class="line">   <span class="keyword">for</span> i, j := <span class="number">0</span>, <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums1) &amp;&amp; j &lt; <span class="built_in">len</span>(nums2); &#123;</span><br><span class="line">      <span class="keyword">if</span> nums1[i] == nums2[j] &#123;</span><br><span class="line">         intersection = <span class="built_in">append</span>(intersection, nums1[i])</span><br><span class="line">         i++</span><br><span class="line">         j++</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> nums1[i] &gt; nums2[j] &#123;</span><br><span class="line">         j++</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         i++</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> intersection</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="453-最小操作次数使数组元素相同"><a href="#453-最小操作次数使数组元素相同" class="headerlink" title="453. 最小操作次数使数组元素相同"></a>453. 最小操作次数使数组元素相同</h3><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/20210714150911.png" alt="image-20210714150911830"></p><div class="tabs" id="453"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#453-1">排序</button></li><li class="tab"><button type="button" data-href="#453-2">排序优化</button></li><li class="tab"><button type="button" data-href="#453-3">动态规划</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="453-1"><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><div class="note no-icon info simple"><p>先看示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[1,2,3] &#x3D;&gt; [2,3,3] &#x3D;&gt; [3,4,3] &#x3D;&gt; [4,4,4]  3</span><br><span class="line">[1,3,5] &#x3D;&gt; [2,4,5] &#x3D;&gt; [3,5,5] &#x3D;&gt; [4,5,6] &#x3D;&gt; [5,7,5] &#x3D;&gt; [6,7,6] &#x3D;&gt; [7,7,7]  6</span><br><span class="line">[1,2,5] &#x3D;&gt; [2,3,5] &#x3D;&gt; [3,4,5] &#x3D;&gt; [4,5,5] &#x3D;&gt; [5,6,5] &#x3D;&gt; [6,6,6] 5</span><br><span class="line">[1,2,3,4] &#x3D;&gt; [2,3,4,4] &#x3D;&gt; [3,4,5,4] &#x3D;&gt; [4,5,6,4] &#x3D;&gt; [5,6,6,5] &#x3D;&gt; [6,6,7,6] &#x3D;&gt; [7,7,7,7]  6</span><br></pre></td></tr></table></figure><p>根据以上示例可知，假设数组是有序，每一位加上与最小位相差的数既得到最终的次数以<code>[1,2,5]</code>为例，第一位和第二位加<code>4</code>后可得<code>[5,6,5]</code>，排序可得<code>[5,5,6]</code>，重复上述步骤加<code>1</code>，得到<code>[6,6,6]</code>，共操作5次</p></div><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">minMoves</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">   sort.Ints(nums)</span><br><span class="line">   <span class="keyword">var</span> count <span class="keyword">int</span></span><br><span class="line">   <span class="keyword">for</span> i := <span class="built_in">len</span>(nums) - <span class="number">1</span>; i &gt; <span class="number">0</span>; i-- &#123;</span><br><span class="line">      count += nums[i] - nums[<span class="number">0</span>]</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="453-2"><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><div class="note no-icon info simple"><p>基于排序的思路我们不难发现最终操作次数为数组中所有数组与最小值差的和，也即是数组的和减去N个最小值</p></div><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">minMoves</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">   count, min := <span class="number">0</span>, math.MaxInt32</span><br><span class="line">   <span class="keyword">for</span> _, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">      count += num</span><br><span class="line">      <span class="keyword">if</span> min &gt; num &#123;</span><br><span class="line">         min = num</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> count - <span class="built_in">len</span>(nums)*min</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="453-3"><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><div class="note no-icon info simple"><p>假设数组时有序的，数组长度为3，那么要是三个数相等，可以分两步做</p><ul><li>先使前两个数相等，则需要移动次数为<code>nums[1]-nums[0]</code>记为<code>moves</code>。注意：<mark class="hl-label green">此时第三个数以静发生了变化，增大了<code>moves</code>，<code>新arr[2]=原arr[2]+moves</code></mark> </li><li>此时前两个数已经相等，相等的数可以看做一个数，此时则需要让后两个数相等，让<code>num[1]</code>等于<code>新num[2]</code>，则需要移动<code>新nums[2] - nums[1] = 原nums[2] + moves - nums[1]</code>记为<code>diff2</code>，最终结果为<code>moves = moves + newmoves</code></li></ul><p>当数组长度大于3时，依照上面方式递推即可</p></div><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">minMoves</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">   sort.Ints(nums)</span><br><span class="line">   <span class="keyword">var</span> moves <span class="keyword">int</span></span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">      diff := moves + nums[i]- nums[i<span class="number">-1</span>]</span><br><span class="line">      nums[i] += moves <span class="comment">// 这里比较难理解,此时相加的实际上是完成上一次操作中的改变nums[2]</span></span><br><span class="line">      moves += diff</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> moves</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="455-分发饼干"><a href="#455-分发饼干" class="headerlink" title="455. 分发饼干"></a>455. 分发饼干</h3><p>假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。</p><p>对每个孩子<code>i</code>，都有一个胃口值<code>g[i]</code>，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干<code>j</code>，都有一个尺寸<code>s[j]</code> 。如果<code>s[j] &gt;= g[i]</code>，我们可以将这个饼干<code>j</code>分配给孩子<code>i</code>，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。</p><p><strong>示例 1：</strong></p><blockquote><p><strong>输入</strong>: g = [1,2,3], s = [1,1]<br><strong>输出</strong>: 1<br><strong>解释</strong>:<br>你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。<br>虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。<br>所以你应该输出1。</p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入</strong>: g = [1,2], s = [1,2,3]<br><strong>输出</strong>: 2<br><strong>解释</strong>:<br>你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。<br>你拥有的饼干数量和尺寸都足以让所有孩子满足。<br>所以你应该输出2.</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= g.length &lt;= 3 * 104</code></li><li><code>0 &lt;= s.length &lt;= 3 * 104</code></li><li><code>1 &lt;= g[i], s[j] &lt;= 231 - 1</code></li></ul><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><div class="note no-icon simple info simple"><p>直接将两个两个数组排序，然后双指针的方式向后移，当满足<code>g[i] &lt;= s[j]</code>的时候，将饼干<code>j</code>分配给孩子<code>i</code>，<code>i</code>和<code>j</code>同时后移为下一个孩子分配饼干；不满足时<code>j</code>后移知道满足</p></div><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findContentChildren</span><span class="params">(g []<span class="keyword">int</span>, s []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">   sort.Ints(g)</span><br><span class="line">   sort.Ints(s)</span><br><span class="line">   <span class="keyword">var</span> count <span class="keyword">int</span></span><br><span class="line">   <span class="keyword">for</span>    i,j := <span class="number">0</span>,<span class="number">0</span>; i&lt;<span class="built_in">len</span>(g) &amp;&amp; j &lt; <span class="built_in">len</span>(s); &#123;</span><br><span class="line">      <span class="keyword">if</span> g[i] &lt;= s[j] &#123; <span class="comment">// 满足即分配</span></span><br><span class="line">         count ++</span><br><span class="line">         i++</span><br><span class="line">         j++</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123; <span class="comment">// 寻找符合孩子胃口的饼干</span></span><br><span class="line">         j ++</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Golang </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为你的Api加上Swagger</title>
      <link href="skill/back-end/21173.html"/>
      <url>skill/back-end/21173.html</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;一个好的API项目，文档是必不可少的，一份标准的API文档给前后端的沟通带来很多便利。手写，那自然是不可能的。<code>Swagger</code>可通过注释的方式实现接口文档，而且生成的接口文档可直接进行请求已完成测试。</p><h1 id="安装Swagger"><a href="#安装Swagger" class="headerlink" title="安装Swagger"></a>安装Swagger</h1><ul><li><p>go get</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com&#x2F;swaggo&#x2F;swag&#x2F;cmd&#x2F;swag</span><br></pre></td></tr></table></figure><p>因为swagger需要全局使用，请确保 <code>$GOPATH/bin</code> 加入<code>$PATH</code>，或将可执行文件移动到<code>$GOBIN</code>下</p></li><li><p>验证是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">❯ swag -v</span><br><span class="line">swag version v1.7.0</span><br></pre></td></tr></table></figure></li></ul><h1 id="gin-swagger"><a href="#gin-swagger" class="headerlink" title="gin-swagger"></a>gin-swagger</h1><p>项目地址:<a href="https://github.com/swaggo/gin-swagger">https://github.com/swaggo/gin-swagger</a></p><h2 id="引入包"><a href="#引入包" class="headerlink" title="引入包"></a>引入包</h2><p>在路由所在文件引入以下包</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   swaggerFiles <span class="string">&quot;github.com/swaggo/files&quot;</span></span><br><span class="line">   ginSwagger <span class="string">&quot;github.com/swaggo/gin-swagger&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="编写API描述"><a href="#编写API描述" class="headerlink" title="编写API描述"></a>编写API描述</h2><p>在<code>main.go</code>函数前添加项目描述文件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @title Swagger 生成文档测试</span></span><br><span class="line"><span class="comment">// @version 1.0</span></span><br><span class="line"><span class="comment">// @description 这是一个Swagger文档生成测试</span></span><br><span class="line"><span class="comment">// @host localhost:8088</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考<a href="https://github.com/swaggo/swag/blob/master/README_zh-CN.md#%E5%A6%82%E4%BD%95%E4%B8%8Egin%E9%9B%86%E6%88%90">官方示例</a>，书写对应所需内容</p><h2 id="编写API注释"><a href="#编写API注释" class="headerlink" title="编写API注释"></a>编写API注释</h2><p>先看看官方的示例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @Summary Show a account</span></span><br><span class="line"><span class="comment">// @Description get string by ID</span></span><br><span class="line"><span class="comment">// @ID get-string-by-int</span></span><br><span class="line"><span class="comment">// @Accept  json</span></span><br><span class="line"><span class="comment">// @Produce  json</span></span><br><span class="line"><span class="comment">// @Param id path int true &quot;Account ID&quot;</span></span><br><span class="line"><span class="comment">// @Success 200 &#123;object&#125; model.Account</span></span><br><span class="line"><span class="comment">// @Header 200 &#123;string&#125; Token &quot;qwerty&quot;</span></span><br><span class="line"><span class="comment">// @Failure 400,404 &#123;object&#125; httputil.HTTPError</span></span><br><span class="line"><span class="comment">// @Failure 500 &#123;object&#125; httputil.HTTPError</span></span><br><span class="line"><span class="comment">// @Failure default &#123;object&#125; httputil.DefaultError</span></span><br><span class="line"><span class="comment">// @Router /accounts/&#123;id&#125; [get]</span></span><br></pre></td></tr></table></figure><p>参照<code>Swagger</code>的注解规范以及实际情况编写</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @Summary 获取标签</span></span><br><span class="line"><span class="comment">// @Description 通过id获取标签</span></span><br><span class="line"><span class="comment">// @ID get-string-by-int</span></span><br><span class="line"><span class="comment">// @Accept  json</span></span><br><span class="line"><span class="comment">// @Produce  json</span></span><br><span class="line"><span class="comment">// @Param id query int true &quot;标签id&quot;</span></span><br><span class="line"><span class="comment">// @Success 200 &#123;object&#125; TagData</span></span><br><span class="line"><span class="comment">// @Failure 400 &#123;object&#125; HTTPError</span></span><br><span class="line"><span class="comment">// @Router /tag [get]</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *tag)</span> <span class="title">Get</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Summary 添加标签</span></span><br><span class="line"><span class="comment">// @Description 添加标签</span></span><br><span class="line"><span class="comment">// @Accept  json</span></span><br><span class="line"><span class="comment">// @Produce  json</span></span><br><span class="line"><span class="comment">// @Param account body TagData true &quot;标签内容&quot;</span></span><br><span class="line"><span class="comment">// @Success 200 &#123;object&#125; HTTPOk</span></span><br><span class="line"><span class="comment">// @Failure 400 &#123;object&#125; HTTPError</span></span><br><span class="line"><span class="comment">// @Router /tag [POST]</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *tag)</span> <span class="title">Add</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h2><p>到你的项目文件下执行生成命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">❯ swag init</span><br><span class="line">2021/03/31 23:38:59 Generate swagger docs....</span><br><span class="line">2021/03/31 23:38:59 Generate general API Info, search dir:./</span><br><span class="line">2021/03/31 23:38:59 Generating controller.TagData</span><br><span class="line">2021/03/31 23:38:59 Generating controller.HTTPError</span><br><span class="line">2021/03/31 23:38:59 Generating controller.HTTPOk</span><br><span class="line">2021/03/31 23:38:59 create docs.go at docs/docs.go</span><br><span class="line">2021/03/31 23:38:59 create swagger.json at docs/swagger.json</span><br><span class="line">2021/03/31 23:38:59 create swagger.yaml at docs/swagger.yaml</span><br></pre></td></tr></table></figure><p>执行成功后会在项目根目录生成文件<code>docs</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docs&#x2F;</span><br><span class="line">├────   docs.go</span><br><span class="line">├────   swagger.json</span><br><span class="line">└────   swagger.yaml</span><br></pre></td></tr></table></figure><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>在<code>main.go</code>中引入包<code>docs</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="string">&quot;goweb/docs&quot;</span></span><br></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>运行项目，访问一下 <code>http://127.0.0.1:8088/swagger/index.html</code>， 查看 <code>API</code> 文档生成是否正确</p><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-20210331234603894.png" alt="image-20210331234603894"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>本文源代码: <a href="https://github.com/InkDP/goweb.git">goweb</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go读取和删除照片Exif隐私信息</title>
      <link href="skill/48989.html"/>
      <url>skill/48989.html</url>
      
        <content type="html"><![CDATA[<h1 id="Exif"><a href="#Exif" class="headerlink" title="Exif"></a>Exif</h1><p><strong>可交换图像文件格式</strong>（英语：Exchangeable image file format，官方简称<strong>Exif</strong>），是专门为数码相机的照片设定的文件格式，可以记录数码照片的属性信息和拍摄数据。</p><p>通过手机或者相机拍摄的照片中会携带Exif信息，而某些手机默认会携带地理位置等隐私信息，比如下面这张图片</p><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/IMG_20210125_191526.jpg" alt="IMG_20210125_191526"></p><p>它的Exif信息为：<br><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/20210125183002.png"></p><p>可以直接看到该照片使用<strong>Redmi K30 Pro</strong>拍摄于<strong>2021:01:25 19:15:28</strong>，甚至还可以直接看到经纬度信息(手机设置中可关闭)。这种未经过处理的照片直接上传到网上之后，可能会造成隐私的泄露。</p><h1 id="Go读取Exif信息"><a href="#Go读取Exif信息" class="headerlink" title="Go读取Exif信息"></a>Go读取Exif信息</h1><p>通过包<a href="https://github.com/rwcarlsen/goexif">goexif/exif</a>，可以查看照片的全部Exif信息</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetExif</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">   ImgFile := <span class="string">&quot;./IMG_20210125_191526.jpg&quot;</span></span><br><span class="line">   file, err := os.Open(ImgFile)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Println(err)</span><br><span class="line">      <span class="keyword">return</span> err</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">defer</span> file.Close()</span><br><span class="line">   x, err := exif.Decode(file)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> err</span><br><span class="line">   &#125;</span><br><span class="line">   fmt.Printf(<span class="string">&quot;%+v&quot;</span>, x)</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为没找到直接操作图片Exif的库(如果有欢迎留言告诉我)，只能通过解析图片的色彩空间，然后通过此色彩空间重新生成一张新的图片因为是重新生成的图片，也就相当于抹除了Exif信息</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CreateNewImage</span><span class="params">(f, newF *os.File)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">   m, _, err := image.Decode(f)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> err</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 获取宽高</span></span><br><span class="line">   width, height := m.Bounds().Max.X, m.Bounds().Max.Y</span><br><span class="line">   <span class="keyword">var</span> subImage image.Image</span><br><span class="line">   img := m.(*image.YCbCr)</span><br><span class="line">   subImage = img.SubImage(image.Rect(<span class="number">0</span>, <span class="number">0</span>, width, height)).(*image.YCbCr)</span><br><span class="line">   err = jpeg.Encode(newF, subImage, &amp;jpeg.Options&#123;<span class="number">100</span>&#125;)</span><br><span class="line">   <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="所有代码："><a href="#所有代码：" class="headerlink" title="所有代码："></a>所有代码：</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">&quot;fmt&quot;</span></span><br><span class="line">   <span class="string">&quot;image&quot;</span></span><br><span class="line">   _ <span class="string">&quot;image/gif&quot;</span></span><br><span class="line">   <span class="string">&quot;image/jpeg&quot;</span></span><br><span class="line">   _ <span class="string">&quot;image/jpeg&quot;</span></span><br><span class="line">   _ <span class="string">&quot;image/png&quot;</span></span><br><span class="line">   <span class="string">&quot;os&quot;</span></span><br><span class="line">   <span class="string">&quot;path&quot;</span></span><br><span class="line">   <span class="string">&quot;strings&quot;</span></span><br><span class="line"></span><br><span class="line">   <span class="string">&quot;github.com/rwcarlsen/goexif/exif&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   ImgFile := <span class="string">&quot;./IMG_20210125_191526.jpg&quot;</span></span><br><span class="line">   fileNameWithSuffix := path.Base(ImgFile)                        <span class="comment">// 获取文件名带后缀</span></span><br><span class="line">   imgType := path.Ext(fileNameWithSuffix)                         <span class="comment">// 获取文件后缀</span></span><br><span class="line">   fileNameOnly := strings.TrimSuffix(fileNameWithSuffix, imgType) <span class="comment">// 获取文件名</span></span><br><span class="line">   newImageFile := fileNameOnly + <span class="string">&quot;_no_exif&quot;</span> + imgType</span><br><span class="line">   file, err := os.Open(ImgFile)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;打开文件失败&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">defer</span> file.Close()</span><br><span class="line">   err = GetExif(file)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="built_in">panic</span>(err)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 设置文件偏移,重新从第一位开始读取</span></span><br><span class="line">   file.Seek(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">   newFile, err := os.Create(newImageFile)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;file create fail&quot;</span>)</span><br><span class="line">      <span class="built_in">panic</span>(err)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">defer</span> newFile.Close()</span><br><span class="line">   err = CreateNewImage(file, newFile)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="built_in">panic</span>(err)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetExif</span><span class="params">(file *os.File)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">   x, err := exif.Decode(file)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> err</span><br><span class="line">   &#125;</span><br><span class="line">   fmt.Printf(<span class="string">&quot;%+v&quot;</span>, x)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CreateNewImage</span><span class="params">(f, newF *os.File)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">   m, _, err := image.Decode(f)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> err</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 获取宽高</span></span><br><span class="line">   width, height := m.Bounds().Max.X, m.Bounds().Max.Y</span><br><span class="line">   <span class="keyword">var</span> subImage image.Image</span><br><span class="line">   img := m.(*image.YCbCr)</span><br><span class="line">   subImage = img.SubImage(image.Rect(<span class="number">0</span>, <span class="number">0</span>, width, height)).(*image.YCbCr)</span><br><span class="line">   err = jpeg.Encode(newF, subImage, &amp;jpeg.Options&#123;<span class="number">100</span>&#125;)</span><br><span class="line">   <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Create</span><span class="params">(fileName <span class="keyword">string</span>)</span> <span class="params">(*os.File, error)</span></span> &#123;</span><br><span class="line">   f, err := os.Create(fileName) <span class="comment">// 创建文件</span></span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Println(<span class="string">&quot;file create fail&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> f, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode-数组系列2</title>
      <link href="skill/algorithm/51727.html"/>
      <url>skill/algorithm/51727.html</url>
      
        <content type="html"><![CDATA[<h3 id="返回总目录"><a href="#返回总目录" class="headerlink" title="返回总目录"></a>返回总目录</h3><p><a href="/leetcode.html">日刷leetcode–简单版</a></p><hr><h3 id="566-重塑矩阵"><a href="#566-重塑矩阵" class="headerlink" title="566. 重塑矩阵"></a>566. 重塑矩阵</h3><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-20210122002325449.png" alt="image-20210122002325449"></p><div class="tabs" id="566"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#566-1">方法一</button></li><li class="tab"><button type="button" data-href="#566-2">方法二</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="566-1"><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><div class="note info no-icon simple"><p>创建固定的行，依次循环原数组，同时放入结果数组中，每一行存满后，就添加新的列继续存储</p></div><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">matrixReshape</span><span class="params">(nums [][]<span class="keyword">int</span>, r <span class="keyword">int</span>, c <span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line">   x, y := <span class="built_in">len</span>(nums), <span class="built_in">len</span>(nums[<span class="number">0</span>])</span><br><span class="line">   <span class="keyword">if</span> r*c != x*y &#123;</span><br><span class="line">      <span class="keyword">return</span> nums</span><br><span class="line">   &#125;</span><br><span class="line">   i, j := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">   arr := <span class="built_in">make</span>([][]<span class="keyword">int</span>, r)</span><br><span class="line">   <span class="keyword">for</span> _, row := <span class="keyword">range</span> nums &#123;</span><br><span class="line">      <span class="keyword">for</span> _, v := <span class="keyword">range</span> row &#123;</span><br><span class="line">         arr[i] = <span class="built_in">append</span>(arr[i], v)</span><br><span class="line">         j++</span><br><span class="line">         <span class="keyword">if</span> j == c &#123;</span><br><span class="line">            j = <span class="number">0</span></span><br><span class="line">            i++</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="566-2"><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><div class="note info no-icon simple"><p>将二维数组通过列行遍历改变为一维数组，我们会惊讶的发现原数组的下标<code>nums[i][j]</code>变成了一维数组<code>newNums[n*i+j]</code>,其中<code>n</code>为原二维数组的列数。二维数组的下标<code>i</code>和<code>j</code>可以分别表示了在第<code>i</code>行，第<code>j</code>列，由此我们可将一维数组<code>newNums[i]</code>变回二维数组<code>nums[i/c][i%c]</code>,其中<code>c</code>为二维数组的列数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nums := [][]<span class="keyword">int</span>&#123;</span><br><span class="line">[]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;,</span><br><span class="line">[]<span class="keyword">int</span>&#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">newNums := []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br></pre></td></tr></table></figure><p>值<code>5</code>在两个数组中分别表示为<code>nums[1][1]</code>和<code>nums[4]</code>，<code>1(i)*3(n)+1(j) = 4(i)</code>，<code>[1(4/3)][1(4%3)]</code>符合上述推导，故二维数组的转换都可基于一维数组实现</p></div><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">matrixReshape2</span><span class="params">(nums [][]<span class="keyword">int</span>, r <span class="keyword">int</span>, c <span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line">x, y := <span class="built_in">len</span>(nums), <span class="built_in">len</span>(nums[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">if</span> r*c != x*y &#123;</span><br><span class="line"><span class="keyword">return</span> nums</span><br><span class="line">&#125;</span><br><span class="line">newNums := <span class="built_in">make</span>([][]<span class="keyword">int</span>, r)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; r; i++ &#123;</span><br><span class="line">newNums[i] = <span class="built_in">make</span>([]<span class="keyword">int</span>, c)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; r*c; i++ &#123;</span><br><span class="line"><span class="comment">// 两个二维数组都是基于同一个一维数组变化而来,他们在一维数组中的值是相等的</span></span><br><span class="line">newNums[i/c][i%c] = nums[i/y][i%y]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> newNums</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="605-种花问题"><a href="#605-种花问题" class="headerlink" title="605. 种花问题"></a>605. 种花问题</h3><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-20210123141345851.png" alt="605.种花问题"></p><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><div class="note info no-icon simple"><p>数组由<code>0</code>和<code>1</code>组成，循环一次数组，并分别处理即可</p><ul><li>当前元素为<code>1</code>表示有花，根据规则，下一次有花必定是两格后，直接跳到<code>i+2</code>处即可</li><li>当前元素为<code>0</code>表示没有话，因为遇到花就会跳两个，所以前一个位置必定不是花，我们只需要判断下一格是否为<code>1</code>即可，不为<code>1</code>或者当前格子已经是最后一格，即可种，执行<code>n--</code>，然后此格变成了<code>1</code>，继续往后跳两格；如果是<code>1</code>，则不可种，两格后也不可种，直接跳三格即可</li></ul><p>循环结束后查看<code>n</code>是否为<code>0</code>，为<code>0</code>则表示可种<code>n</code>朵花，返回<code>true</code>，反之返回<code>false</code></p></div><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">canPlaceFlowers</span><span class="params">(flowerbed []<span class="keyword">int</span>, n <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(flowerbed) &amp;&amp; n &gt; <span class="number">0</span>; &#123;</span><br><span class="line">      <span class="keyword">if</span> flowerbed[i] == <span class="number">1</span> &#123; <span class="comment">// 当前格子已经有花,我们两格后见</span></span><br><span class="line">         i += <span class="number">2</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> i == <span class="built_in">len</span>(flowerbed)<span class="number">-1</span> || flowerbed[i+<span class="number">1</span>] == <span class="number">0</span> &#123; <span class="comment">// 当前格子不是花,下一个格子也不是花或着当前格子已经是最后一个</span></span><br><span class="line">         n--</span><br><span class="line">         i += <span class="number">2</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123; <span class="comment">// 当前格子不是花,但是下一格是</span></span><br><span class="line">         i += <span class="number">3</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> n == <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="628-三个数的最大乘积"><a href="#628-三个数的最大乘积" class="headerlink" title="628. 三个数的最大乘积"></a>628. 三个数的最大乘积</h3><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-20210123145818480.png" alt="628. 三个数的最大乘积"></p><div class="tabs" id="628"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#628-1">方法一</button></li><li class="tab"><button type="button" data-href="#628-2">方法二</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="628-1"><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><div class="note info no-icon simple"><p>首先将数组排序，再根据数组内的数是正负数进行处理</p><ul><li>数组中的数全部为正数或者全部为负数时，最大乘机为最大的三个数</li><li>数组中包含正数与负数，则最大乘积有可能是最大三个正数的乘积，也有可能是两个最小负数与最大正数的乘积</li></ul></div><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maximumProduct</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">   sort.Ints(nums)</span><br><span class="line">   l := <span class="built_in">len</span>(nums)</span><br><span class="line">   <span class="keyword">return</span> max(nums[<span class="number">0</span>]*nums[<span class="number">1</span>]*nums[l<span class="number">-1</span>], nums[l<span class="number">-1</span>]*nums[l<span class="number">-2</span>]*nums[l<span class="number">-3</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a,b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">   <span class="keyword">if</span> a&gt;b &#123;</span><br><span class="line">      <span class="keyword">return</span> a</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="628-2"><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><div class="note info no-icon simple"><p>由方法一得知，我们所需的只是最大的3个数以及最小的两个数而已，直接循环一次找出这5个数即可，不用排序。</p></div><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maximumProduct2</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">   min1, min2 := math.MaxInt64, math.MinInt64</span><br><span class="line">   max1, max2, max3 := math.MinInt64, math.MinInt64, math.MinInt64</span><br><span class="line">   <span class="keyword">for</span> _, v := <span class="keyword">range</span> nums &#123;</span><br><span class="line">      <span class="keyword">if</span> v &lt; min1 &#123;</span><br><span class="line">         min1, min2 = v, min1</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> v &lt; min2 &#123;</span><br><span class="line">         min2 = v</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> v &gt; max1 &#123;</span><br><span class="line">         max1, max2, max3 = v, max1, max2</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> v &gt; max2 &#123;</span><br><span class="line">         max2, max3 = v, max2</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> v &gt; max3 &#123;</span><br><span class="line">         max3 = v</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> max(min1*min2*max1, max1*max2*max3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="643-子数组最大平均数I"><a href="#643-子数组最大平均数I" class="headerlink" title="643. 子数组最大平均数I"></a>643. 子数组最大平均数I</h3><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-20210123181732046.png" alt="643"></p><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><div class="note info no-icon simple"><p>使用窗口滑动的方式：先求出<code>0-k</code>的和<code>sum</code>，再往后依次遍历，求出最大的后除以K即可</p></div><h4 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findMaxAverage</span><span class="params">(nums []<span class="keyword">int</span>, k <span class="keyword">int</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> maxSum, sum <span class="keyword">int</span></span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; k; i++ &#123;</span><br><span class="line">      sum += nums[i]</span><br><span class="line">   &#125;</span><br><span class="line">   maxSum = sum</span><br><span class="line">   <span class="keyword">for</span> i := k; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">      sum += nums[i] - nums[i-k]</span><br><span class="line">      <span class="keyword">if</span> sum &gt; maxSum &#123;</span><br><span class="line">         maxSum = sum</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">float64</span>(maxSum) / <span class="keyword">float64</span>(k)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="661-图片平滑器"><a href="#661-图片平滑器" class="headerlink" title="661. 图片平滑器"></a>661. 图片平滑器</h3><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-20210123211333512.png" alt="image-20210123211333512"></p><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><div class="note info no-icon simple"><p>循环遍历找到每个格子，找所有 9 个包括它自身在内的紧邻的格子，去除无用的格子，将他们的和存在当前位置中，同时记录邻居个数，最后用和除以个数即可。</p></div><h4 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">imageSmoother</span><span class="params">(M [][]<span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> x, y = <span class="built_in">len</span>(M), <span class="built_in">len</span>(M[<span class="number">0</span>])</span><br><span class="line">   newM := <span class="built_in">make</span>([][]<span class="keyword">int</span>, x)</span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; x; i++ &#123;</span><br><span class="line">      newM[i] = <span class="built_in">make</span>([]<span class="keyword">int</span>, y)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; x; i++ &#123;</span><br><span class="line">      <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; y; j++ &#123;</span><br><span class="line">         <span class="keyword">var</span> count <span class="keyword">int</span></span><br><span class="line">         <span class="comment">// 寻找邻居格子</span></span><br><span class="line">         <span class="keyword">for</span> ii := i<span class="number">-1</span>; ii &lt;= i+<span class="number">1</span>; ii++ &#123;</span><br><span class="line">            <span class="keyword">for</span> jj := j<span class="number">-1</span>; jj &lt;= j+<span class="number">1</span>; jj++ &#123;</span><br><span class="line">               <span class="keyword">if</span> ii &gt;=<span class="number">0</span> &amp;&amp; ii &lt; x &amp;&amp; jj &gt;=<span class="number">0</span> &amp;&amp; jj &lt; y &#123; <span class="comment">// 去除超出原数组范围的数据</span></span><br><span class="line">                  newM[i][j] += M[ii][jj]</span><br><span class="line">                  count ++</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         newM[i][j] /= count</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> newM</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="665-非递减数列"><a href="#665-非递减数列" class="headerlink" title="665. 非递减数列"></a>665. 非递减数列</h3><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-20210124001206690.png" alt="665. 非递减数列"></p><h4 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h4><div class="note info no-icon simple"><p>这道题给了我们一个数组，说我们最多有1次修改某个数字的机会，<br>问能不能将数组变为非递减数组。题目中给的例子太少，不能覆盖所有情况，我们再来看下面三个例子：<br>    4，2，3<br>    -1，4，2，3<br>    2，3，3，2，4<br>我们通过分析上面三个例子可以发现，当我们发现后面的数字小于前面的数字产生冲突后，<br>[1]有时候需要修改前面较大的数字(比如前两个例子需要修改4)，<br>[2]有时候却要修改后面较小的那个数字(比如前第三个例子需要修改2)，<br>那么有什么内在规律吗？是有的，判断当前数字(<code>nums[i]</code>)跟再前面一个数(<code>nums[i-2]</code>)的大小有关系，<br>首先如果再前面的数(<code>nums[i-2]</code>)不存在，比如例子1，4前面没有数字了，我们直接修改前面的数字(<code>nums[i-1]</code>)为当前的数字(<code>nums[i]</code>)2即可。<br>而当再前面的数字(<code>nums[i-2]</code>)存在，并且小于当前数(<code>nums[i]</code>)时，比如例子2，-1小于2，我们还是需要修改前面的数字(<code>nums[i-2]</code>)4为当前数字(<code>nums[i]</code>)2；<br>如果再前面的数(<code>nums[i-2]</code>)大于当前数(<code>nums[i]</code>)，比如例子3，3大于2，我们需要修改当前数(<code>nums[i]</code>)2为前面的数3(<code>nums[i-1]</code>)。</p><p>参考：<a href="https://leetcode-cn.com/problems/non-decreasing-array/comments/59727">https://leetcode-cn.com/problems/non-decreasing-array/comments/59727</a></p></div><h4 id="示例代码-3"><a href="#示例代码-3" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkPossibility</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">   <span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">0</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">var</span> count <span class="keyword">int</span></span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(nums) &amp;&amp; count &lt; <span class="number">2</span>; i++ &#123;</span><br><span class="line">      <span class="keyword">if</span> nums[i<span class="number">-1</span>] &lt;= nums[i] &#123;</span><br><span class="line">         <span class="keyword">continue</span></span><br><span class="line">      &#125;</span><br><span class="line">      count++</span><br><span class="line">      <span class="keyword">if</span> i &gt;= <span class="number">2</span> &amp;&amp; nums[i<span class="number">-2</span>] &gt; nums[i] &#123;</span><br><span class="line">         nums[i] = nums[i<span class="number">-1</span>]</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         nums[i<span class="number">-1</span>] = nums[i]</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> count &lt;= <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Golang </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB GO Driver 实现模糊查询</title>
      <link href="skill/back-end/61018.html"/>
      <url>skill/back-end/61018.html</url>
      
        <content type="html"><![CDATA[<h1 id="MongoDB的模糊查询"><a href="#MongoDB的模糊查询" class="headerlink" title="MongoDB的模糊查询"></a>MongoDB的模糊查询</h1><p>&emsp;&emsp;模糊查询时数据库应用中不可缺少的一步，<strong>MySQL</strong>中使用<code>like</code>和或者<code>regexp</code>来实现实现模糊查询，而<strong>MongoDB</strong>则使用<code>$regex</code>操作符或直接使用正则表达式对象来实现。</p><table><thead><tr><th align="left">MySQL</th><th align="left">MongoDB</th></tr></thead><tbody><tr><td align="left">select * from users where name like ’%InkDP%’</td><td align="left">db.users.find({name: {$regex: /InkDP/}})</td></tr><tr><td align="left">select * from users where name regexp ’InkDP’</td><td align="left">db.users.find({name: /InkDP/})</td></tr></tbody></table><p>更多相关的语法可查看官方文档：<a href="https://docs.mongodb.com/manual/reference/operator/query/regex/">$regex</a>，就不再做多讨论。</p><h1 id="使用MongoDB-GO-Driver进行查询"><a href="#使用MongoDB-GO-Driver进行查询" class="headerlink" title="使用MongoDB GO Driver进行查询"></a>使用MongoDB GO Driver进行查询</h1><p>先来看看我们的数据源：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> db.users.find(&#123;&#125;)</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;600704fffc9b483f284d0bc3&quot;), &quot;name&quot; : &quot;1InkDP&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;600704fffc9b483f284d0bc4&quot;), &quot;name&quot; : &quot;InkDPPP&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;600704fffc9b483f284d0bc5&quot;), &quot;name&quot; : &quot;InkDP&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;600704fffc9b483f284d0bc6&quot;), &quot;name&quot; : &quot;inkdp123&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;600704fffc9b483f284d0bc7&quot;), &quot;name&quot; : &quot;abcdef&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60070500fc9b483f284d0bc8&quot;), &quot;name&quot; : &quot;test&quot; &#125;</span><br></pre></td></tr></table></figure><p>然后执行模糊查询：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.users.find(&#123;name:&#123;$regex: /InkDP/,$options: &quot;i&quot;&#125;&#125;)</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;600704fffc9b483f284d0bc3&quot;), &quot;name&quot; : &quot;1InkDP&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;600704fffc9b483f284d0bc4&quot;), &quot;name&quot; : &quot;InkDPPP&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;600704fffc9b483f284d0bc5&quot;), &quot;name&quot; : &quot;InkDP&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;600704fffc9b483f284d0bc6&quot;), &quot;name&quot; : &quot;inkdp123&quot; &#125;</span><br></pre></td></tr></table></figure><h2 id="错误尝试"><a href="#错误尝试" class="headerlink" title="错误尝试"></a>错误尝试</h2><p>上述方式是MongoDB的命令行的执行方式，如果我们直接在Go里面直接这样写是行不通的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">filter := bson.M&#123;</span><br><span class="line">   <span class="string">&quot;name&quot;</span>: bson.M&#123;</span><br><span class="line">      <span class="string">&quot;$regex&quot;</span>:   <span class="string">&quot;/InkDP/&quot;</span>,</span><br><span class="line">      <span class="string">&quot;$options&quot;</span>: <span class="string">&quot;i&quot;</span>,</span><br><span class="line">   &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当你兴高采烈地拿着上面的查询条件去查询时，你会发现它会返回一个空数组给你</p><h2 id="正确的使用方式"><a href="#正确的使用方式" class="headerlink" title="正确的使用方式"></a>正确的使用方式</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">filter := bson.M&#123;</span><br><span class="line"><span class="string">&quot;name&quot;</span>: primitive.Regex&#123;</span><br><span class="line">Pattern:<span class="string">&quot;/InkDP/&quot;</span>,</span><br><span class="line">Options: <span class="string">&quot;i&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行后发现还是没有，一番查找后才发现<code>Pattern</code>不再额外需要两个<code>/</code>，直接填写正则内容即可，所以我们改为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">filter := bson.M&#123;</span><br><span class="line">   <span class="string">&quot;name&quot;</span>: primitive.Regex&#123;</span><br><span class="line">      Pattern:<span class="string">&quot;InkDP&quot;</span>,</span><br><span class="line">      Options: <span class="string">&quot;i&quot;</span>,</span><br><span class="line">   &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;ID:ObjectID(&quot;600704fffc9b483f284d0bc3&quot;) Name:1InkDP&#125;</span><br><span class="line">&#123;ID:ObjectID(&quot;600704fffc9b483f284d0bc4&quot;) Name:InkDPPP&#125;</span><br><span class="line">&#123;ID:ObjectID(&quot;600704fffc9b483f284d0bc5&quot;) Name:InkDP&#125;</span><br><span class="line">&#123;ID:ObjectID(&quot;600704fffc9b483f284d0bc6&quot;) Name:inkdp123&#125;</span><br></pre></td></tr></table></figure><p>与命令行查找的一致，说明没有问题</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Golang </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用GitHub Action自动部署Hexo</title>
      <link href="skill/front-end/3295.html"/>
      <url>skill/front-end/3295.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&emsp;&emsp;<code>Hexo</code>+<code>Github Page</code>让很多没用服务器的人也拥有了自己的博客，添加好配置文件后可以通过<code>hexo d</code>直接部署到服务器上，这种方式部署到<code>Github Page</code>是挺方便，但是如果要部署到自己的服务器就比较麻烦，得编译后再上传到自己的服务器。</p><p>&emsp;&emsp;Github Actions 可以很方便实现 CI/CD 工作流，通过它可以实现抓取代码、运行测试、登录远程服务器，发布到第三方服务等等，我们使用它来自动部署博客到想部署的位置。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>&emsp;&emsp;建立<code>yourname.github.io</code>库，本地写好文章后推送到<code>hexo</code>分支，自动编译后部署到<code>master</code>分支，然后在上传到我自己的服务器，这样就实现了<a href="https://inkdp.github.io/">inkdp.github.io</a>和<a href="https://inkdp.cn/">inkdp.cn</a>的同时部署。</p><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="创建所需仓库"><a href="#创建所需仓库" class="headerlink" title="创建所需仓库"></a>创建所需仓库</h2><p>创建<code>yourname.github.io</code>库，并创建<code>hexo</code>分支，<code>hexo</code>分支用户存储博客源码，默认的<code>master</code>分支用于存放编译好的GitHub源码。</p><h2 id="配置部署密钥"><a href="#配置部署密钥" class="headerlink" title="配置部署密钥"></a>配置部署密钥</h2><p>使用以下命令生成部署密钥(一路回车到底即可)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;$(git config user.email)&quot; -f gh-pages -N &quot;&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> You will get 2 files:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   gh-pages.pub (public key)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   gh-pages     (private key)</span></span><br></pre></td></tr></table></figure><p><font color="#dd0000">切记将生成的密钥文件添加到<code>.gitignore</code>中！！！</font></p><p>接下来,去仓库设置</p><ul><li><p> 复制<code>gh-pages.pub</code>的内容，仓库的 <code>Settings -&gt; Deploy keys -&gt; Add deploy key</code> 页面粘贴你的内容，<code>Title</code>可随意填写，<font color="#dd0000">并勾选<code>Allow write access</code>，实测可不配置</font></p></li><li><p>复制<code>gh-pages</code>的内容，去仓库的<code>Settings -&gt; Secrets -&gt; Add a new secret</code> 页面上粘贴你的内容，<code>Name</code>字段填写为<code>ACTION_DEPLOY_KEY(可更改)</code></p><table><thead><tr><th>添加你的公钥</th><th>成功</th></tr></thead><tbody><tr><td><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-20210117235120550.png" alt="image-20210117235120550"></td><td><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-20210117235147362.png" alt="image-20210117235147362"></td></tr></tbody></table><table><thead><tr><th>添加你的私钥</th><th>成功</th></tr></thead><tbody><tr><td><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-20210117235828106.png" alt="image-20210117235828106"></td><td><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-20210117235912296.png" alt="image-20210117235912296"></td></tr></tbody></table><p><code>GitHub Secret</code>可以用来存储一些私密内容，类似一些私钥，Key之类的，在CI中通过<code>$&#123;&#123; Secret Name&#125;&#125;</code>取出对应的值</p></li></ul><h2 id="编写-Github-Actions"><a href="#编写-Github-Actions" class="headerlink" title="编写 Github Actions"></a>编写 Github Actions</h2><p>在<code>yourname.github.io</code>创建仓库根目录下创建 <code>.github/workflows/HexoCI.yml</code> 文件，目录结构如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">├── .github</span><br><span class="line">│   └── workflows</span><br><span class="line">│       └── HexoCI.yml</span><br></pre></td></tr></table></figure><p>编写<code>HexoCI.yml</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">name: CI</span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">      - hexo</span><br><span class="line">jobs:</span><br><span class="line">  build:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">      - name: 切换分支</span><br><span class="line">        uses: actions/checkout@v2</span><br><span class="line"></span><br><span class="line">      - name: 安装依赖</span><br><span class="line">        if: steps.cache.outputs.cache-hit != &#x27;true&#x27;</span><br><span class="line">        run: npm ci</span><br><span class="line"></span><br><span class="line">      - name: 清除Hexo</span><br><span class="line">        uses: heowc/action-hexo@main</span><br><span class="line">        with:</span><br><span class="line">          args: clean</span><br><span class="line"></span><br><span class="line">      - name: 生成Hexo</span><br><span class="line">        uses: heowc/action-hexo@main</span><br><span class="line">        with:</span><br><span class="line">          args: generate</span><br><span class="line"></span><br><span class="line">      - name: 部署到master分支</span><br><span class="line">        uses: peaceiris/actions-gh-pages@v3</span><br><span class="line">        with:</span><br><span class="line">          personal_token: $&#123;&#123; secrets.CI_TOKEN &#125;&#125;</span><br><span class="line">          external_repository: inkdp/inkdp.github.io</span><br><span class="line">          publish_branch: master</span><br><span class="line">          publish_dir: ./public</span><br></pre></td></tr></table></figure><h3 id="模版参数说明"><a href="#模版参数说明" class="headerlink" title="模版参数说明"></a>模版参数说明</h3><ul><li><p><em>name</em> 为此 Action 的名字</p></li><li><p><em>on</em> 触发条件，当满足条件时会触发此任务，这里的 <code>on.push.branches.$.hexo</code>是指当 <code>hexo</code> 分支收到 <code>push</code> 后执行任务</p></li><li><p><em>jobs</em> 为此 Action 下的任务列表</p><ul><li><em>jobs.{job}.name</em> 任务名称</li><li><em>jobs.{job}.runs-on</em> 任务所需容器，可选值：<code>ubuntu-latest</code>、<code>windows-latest</code>、<code>macos-latest</code>。</li></ul><ul><li>jobs.{job}.steps* 一个步骤数组，可以把所要干的事分步骤放到这里。<ul><li><em>jobs.{job}.steps.$.name</em> 步骤名，编译时会会以 LOG 形式输出。</li><li><em>jobs.{job}.steps.$.uses</em> 所要调用的 Action，可以到 <a href="https://github.com/actions">https://github.com/actions</a> 查看更多。</li><li><em>jobs.{job}.steps.$.with</em> 一个对象，调用 Action 传的参数，具体可以查看所使用 Action 的说明。</li></ul></li><li><em>env</em> 为环境变量对象，用于放置一些环节变量</li></ul></li></ul><h3 id="第三方-Actions"><a href="#第三方-Actions" class="headerlink" title="第三方 Actions"></a>第三方 Actions</h3><p>使用第三方 Actions 语法 <code>&#123;owner&#125;/&#123;repo&#125;@&#123;ref&#125;</code> 或者 <code>&#123;owner&#125;/&#123;repo&#125;/&#123;path&#125;@&#123;ref&#125;</code> 例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">steps:</span><br><span class="line">  - name: 切换分支</span><br><span class="line">    uses: actions/checkout@v2</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- name: 清除Hexo</span><br><span class="line">  uses: heowc/action-hexo@main</span><br><span class="line">  with:</span><br><span class="line">    args: clean</span><br></pre></td></tr></table></figure><p>我使用的大部分都是第三方的Actions，更多第三方Actions可查看<a href="https://github.com/marketplace?type=actions&query=checkout">官方 Actions 市场</a></p><p>可以根据自己的需求书写对应的配置文件，可以参考我的<a href="https://github.com/InkDP/inkdp.github.io/blob/hexo/.github/workflows/HexoCI.yml">HexoCI.yml</a></p><h3 id="额外配置"><a href="#额外配置" class="headerlink" title="额外配置"></a>额外配置</h3><p>因为上述配置文件使用了第三方<strong>Actions:<a href="https://github.com/peaceiris/actions-gh-pages">peaceiris/actions-gh-pages</a>**，所以需要额外配置</strong>个人访问令牌**，配置路径<code>你的头像 -&gt; Settings -&gt; Personal access tokens -&gt; Personal access tokens -&gt; Generate new token</code>，勾选<code> repo</code>即可，创建成功后复制生成的<code>token</code>，回到项目设置中，参考第二步中配置私钥的方式，将<code>token</code>填入<code>Value</code>，再配置一个<code>Name</code>即可，下例中的<code>CI_TOKEN</code>就是我配置的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- name: 部署到master分支</span><br><span class="line">   uses: peaceiris/actions-gh-pages@v3</span><br><span class="line">   with:</span><br><span class="line">     personal_token: $&#123;&#123; secrets.CI_TOKEN &#125;&#125;</span><br><span class="line">     external_repository: inkdp/inkdp.github.io</span><br><span class="line">     publish_branch: master</span><br><span class="line">     publish_dir: ./public</span><br></pre></td></tr></table></figure><table><thead><tr><th>配置个人访问令牌</th><th>成功</th></tr></thead><tbody><tr><td><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-20210118005047841.png" alt="image-20210118005047841"></td><td><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-20210118005143713.png" alt="image-20210118005143713"></td></tr></tbody></table><h3 id="部署到个人服务器-可选"><a href="#部署到个人服务器-可选" class="headerlink" title="部署到个人服务器(可选)"></a>部署到个人服务器(可选)</h3><p>通过配置私钥到<code>GitHub Secret</code>实现服务器的免密登录，再<code>scp</code>编译好的静态页面到你的服务器，参考如下配置，其中<code>ACTION_DEPLOY_KEY</code>为免密登录的私钥，<code>SERVER_DIR</code>为服务器地址及目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- name: 部署到个人服务器</span><br><span class="line">  env:</span><br><span class="line">    ACTION_DEPLOY_KEY: $&#123;&#123; secrets.ACTION_DEPLOY_KEY &#125;&#125;</span><br><span class="line">    SERVER_DIR: $&#123;&#123; secrets.SERVER_DIR &#125;&#125;</span><br><span class="line">  run: |</span><br><span class="line">    mkdir -p ~/.ssh/</span><br><span class="line">    echo &quot;$ACTION_DEPLOY_KEY&quot; &gt; ~/.ssh/id_rsa</span><br><span class="line">    chmod 600 ~/.ssh/id_rsa</span><br><span class="line">    mv ./public ./www</span><br><span class="line">    scp -o StrictHostKeyChecking=no -r ./www $SERVER_DIR</span><br></pre></td></tr></table></figure><h3 id="上传配置文件"><a href="#上传配置文件" class="headerlink" title="上传配置文件"></a>上传配置文件</h3><p><code>push</code>到<code>yourname.github.io</code>的<code>hexo</code>分支，到此仓库的<code>Actions</code> 页面查看当前 task</p><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-20210118014615951.png" alt="image-20210118014615951"></p><p>当任务完成后查看您的博客 <code>https://yourname.github.io</code>，如果不出意外的话已经可以看到自动部署的文章了，如有意外欢迎留言</p><h3 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h3><ul><li><p>问题1：</p><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/20210622202346.png" alt="image-20210622202346107"></p><p>出现该问题是node版本过低导致的，在<code>yaml</code>文件中指定node版本为<code>12+</code>，或者设置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何读一本书</title>
      <link href="reading/38859.html"/>
      <url>reading/38859.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/%E3%80%8A%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6%E3%80%8B.svg"></p>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年个人总结</title>
      <link href="/2020.html"/>
      <url>/2020.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li><a href="https://inkdp.cn/2019.html">2019年总结</a></li></ul><p>&emsp;&emsp;不知不觉间，一年又这么过去了，每到了这个时候总会去感慨一年过得是那么快，今年虽然因为疫情的原因，但是感觉自己过得还算很精彩，今年也依旧发生了很多故事，前半年比较平淡，疫情后就正常上班下班，下半年比较刺激，离开了广州，辗转反侧了几个城市，一边看路边的风景，一边找工作，历时三个月，最后回到了重庆，在曾经的大学附近找到了一份自己满意的工作并安定下来。</p><h3 id="时间轴"><a href="#时间轴" class="headerlink" title="时间轴"></a>时间轴</h3><ul><li>1月17日：下班后直奔姑姑家，准备第二天坐车回家</li><li>1月18日：启程回家</li><li>1月20日：回到阔别半年的家乡，倍感亲切</li><li>2月21日：疫情解封，返程广州</li><li>2月26日：返岗上班</li><li>6月23日：学校发放毕业证，终于毕业</li><li>6月25日：搬家去公司附近</li><li>8月7日：离职，准备回重庆</li><li>8月13日：结束单身，回到云阳</li><li>8月18日：去重庆，开始找工作</li><li>9月13日：前往成都</li><li>9月24日：回到重庆，回家过国庆</li><li>10月5日：再回广州</li><li>10月9日：飞往杭州，与女友分手</li><li>10月24日：再回重庆，结束流浪</li><li>11月1日：师父生日上，遇到她</li><li>11月3日：再次结束单身，与她在一起</li><li>11月13日：找到理想工作工作</li><li>11月15日：时隔三个月，再次开始上班</li></ul><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>&emsp;&emsp;1月15日参加了公司年会，基本宣布一年的结束，开始想着家里的种种，因为也已经确定了回家的时间，所以剩下的几天基本是煎熬。17日一下班就直接奔去我姑姑家，第二天和姑姑姑父一起自驾回家，过程十分煎熬，坐了快30个小时的私家车真的好累。</p><p>&emsp;&emsp;20日的中午才真正回了家，到家换了身衣服就直接走了，去了县城和朋友聚会，顺便找找曾经的回忆，可惜学校不让进去，比较可惜。晚饭后，想着学读书时一样去网吧通宵，第二天一早直接回家，可惜已不复当初，好像已经老了，在网吧困得要死。</p><p>&emsp;&emsp;随后就是席卷全国的疫情，回家早而且远在农村，对我的影响还是比较小，天天在家玩，还有工资拿。疫情不那么严重后，2月底左右就回了广州，在广州自己家里呆了一周后就开始复工了。</p><p>&emsp;&emsp;劳动节前后与前女友联系了两次(此时应该是前前女友了)，那一段四年多的青春也随着她离开了。</p><p>&emsp;&emsp;上半年比较开心的是，6月底左右经历了几次大起大落，最终黄天不负有心人，终于拿到了毕业证，虽然它迟来了一个月，但是还是拿到了。大学最好的死党，也从北京来到广州，不再是一个孤单的待在广州，平时出去玩也有人约，还是比较开心。</p><p>&emsp;&emsp;因为到广州也已经一年有余，所以在6月最后几天，搬去了公司附近，走路上班，再也不用挤地铁公交的日子非常舒服。置办了锅碗瓢盆，早中晚都自己做饭，把开支节省到最大，开始存钱。</p><p>&emsp;&emsp;8月初的时候，因为一些些乱七八糟的事情，最终决定回重庆。离职退租一气呵成，8月13日一早的飞机就从广州飞到了万州，中午吃上了奶奶做的午饭，好香。在离开广州之际，我结束了单身，决定做的有些冲动，但是还是想试试，事后证明确实不能太冲动。</p><p>&emsp;在家陪伴了一段时间爷爷奶奶，就上重庆，开始边玩边找工作，回来时对重庆的互联网环境有所预估，但是还是比我想的要难很多，半玩半找的状态持续了一个月左右，我把目光看向了隔壁成都。9月13日，帮兄弟搬完家后，晚上去了成都。</p><p>&emsp;&emsp;成都的机会相对于重庆来说，确实多太多了，也找到了算是不错的公司，但是细算下来，成都其实不那么理想，不是太高的工资，却有比肩一线城市的消费，思前考后后还是决定离开成都，再去外面看看，可能是再回广州，也可能是去北京上海看看，国庆将至，所幸回家过国庆去。</p><p>&emsp;&emsp;10月5日的时候再次回到广州，待了几天后发现自己也是特别想待在广州，因为国庆的时候遇到了杭州的同学，被杭州的互联网环境和一系列政策吸引，决定去看看。</p><p>&emsp;&emsp;10月9日一张机票将我带往杭州，因为之前脱单时考虑不周，在离开广州时我选择了与女友分手。找了个临时居住的小房间，专心找工作，后面就是投简历面试。因为之前工作的原因，所以小公司基本上是手到擒来，但是大一点的公司就全黄了，小公司我又不想去，折腾了两周，也拿到了不错的一些offer，薪资待遇也都比上一份工作好，但是都不是特别满意，最终还是决定回重庆。</p><p>&emsp;&emsp;10月24日，去西湖划了船，去爬了雷峰塔，晚上一列火车将我拉回了重庆，当时的想法是哪怕回去送外卖进厂也不出来了。回重庆后就开始投简历，准备面试，比较意外的是居然收到了腾讯的面试邀请(虽然后面黄了)。</p><p>&emsp;&emsp;11月1日，师父60岁生日，吃饭的时候遇到了一个大三的小学妹，她是那么活泼可爱，那肆无忌惮的笑声是多么迷人，短暂的接触就让我沦陷之深。慢慢接触后发现彼此都有意思，没有特别复杂的追求，两天的彻夜长谈后，11月3日，我们在一起了。</p><p>&emsp;&emsp;后面的日子就是一边找工作和抽空去学校陪她，也许是她带来的好运，后面的面试也变得顺利起来，最后在学校附近找到了满意的工作，随后的日子就是上班下班，抽空去学校陪女朋友。</p><h3 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h3><p>&emsp;&emsp;一年的时间过的好快，因为中途折腾了三个月没上班，所以今年还是没存到钱，但是比较幸运的是遇到了我现在的女友，明年会更好的。</p><h4 id="观影"><a href="#观影" class="headerlink" title="观影"></a>观影</h4><ul><li><p>《误杀》</p></li><li><p>《叶问4》</p></li><li><p>《无底破坏王》</p></li><li><p>《剑雨》</p></li><li><p>《陆垚知马俐》</p></li><li><p>《半个喜剧》</p></li><li><p>《一句顶一万句》</p></li><li><p>《我们永不言弃》</p></li><li><p>《风雨同路》</p></li><li><p>《极线杀手》</p></li><li><p>《我说的都是真的》</p></li><li><p>《安德的游戏》</p></li><li><p>《破风》</p></li><li><p>《意外》</p></li><li><p>《毒战》</p></li><li><p>《扑克王》</p></li><li><p>《邪不压正》</p></li><li><p>《神偷大师》</p></li><li><p>《肖申克的救赎》</p></li><li><p>《史密斯夫妇》</p></li><li><p>《超人总动员》</p></li><li><p>《超人总动员2》</p></li><li><p>《X特遣队》</p></li><li><p>《嗜血战士》</p></li><li><p>《姜子牙》</p><p>后面的都是和女朋友一起看的了，哈哈哈哈</p></li><li><p>《我和我的家乡》</p></li><li><p>《金刚川》</p></li><li><p>《风平浪静》</p></li><li><p>《如果声音不记得》</p></li><li><p>《神奇女侠1984》</p></li><li><p>《钢铁侠》</p></li><li><p>《惊奇队长》</p></li><li><p>《神奇女侠》</p></li></ul><h4 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h4><p>&emsp;&emsp;去年参加了社区的活动，有幸获奖，所以今年一次性读了4本实体书，后面因为乱七八糟的到处跑，所以今年反而没怎么看书，但是还是看了一些书。</p><ul><li>《你只是看起来很努力》</li><li>《喜宝》</li><li>《三体》</li><li>《三体II：黑暗森林》</li><li>《三体III：死神永生》</li><li>《边城》</li><li>《湘行散记》</li><li>《从文自传》</li><li>《长河》</li><li>《梦里花落知多少》</li><li>《我这一辈子：老舍自传》</li><li>《我不是潘金莲》</li><li>《玛格丽小镇》</li></ul><h4 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h4><p>&emsp;&emsp;今年一年没怎么买新的游戏，switch吃灰了好久，最近又捡起来开始玩，跟女友在一起后，居然神奇的一次LOL都没打过。</p><ul><li>LOL(基本上弃坑)</li><li>剑网三(已经A了)</li><li>塞尔达传说(还是没有通关，大师模式过段时间开开荒)</li><li>动物森友会(事实证明这个游戏不适合猛男)</li></ul><h4 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h4><p>&emsp;&emsp;前面三个月的找工作经历让我深刻地意识到了自己的不足，所以已经制定了相对完善的学习计划，正在稳步执行中。</p><h4 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h4><p>&emsp;&emsp;现在每天就上班下班，没事去学校陪陪女朋友，过得比较舒适，比较重要的事情就是减肥，因为啤酒肚已经被女友嫌弃了很多次了，希望可以减下来。</p><h3 id="Flag"><a href="#Flag" class="headerlink" title="Flag"></a>Flag</h3><h4 id="2020年完成情况"><a href="#2020年完成情况" class="headerlink" title="2020年完成情况"></a>2020年完成情况</h4><ul><li><input checked="" disabled="" type="checkbox"> 不再爱秀爱炫耀(明显改善)</li><li><input checked="" disabled="" type="checkbox"> 不再攀比(明显改善)</li><li><input checked="" disabled="" type="checkbox"> 不再傲慢、骄傲、急躁(明显改善)</li><li><input checked="" disabled="" type="checkbox"> 多一点耐心(感觉好了一些)</li><li><input disabled="" type="checkbox"> 存一笔钱(没做到，穷啊)</li><li><input disabled="" type="checkbox"> 独自完成一次旅游，国外最好(今年这情况，完成不了)</li><li><input checked="" disabled="" type="checkbox"> 英语过级，拿到毕业证</li><li><input disabled="" type="checkbox"> 每周做适量运动，想去跑马拉松，不行就买个健身环玩玩😉😉(上半年坚持了一段时间)</li></ul><h4 id="2021"><a href="#2021" class="headerlink" title="2021"></a>2021</h4><ul><li><input disabled="" type="checkbox"> 带着幺儿出去玩，至少一次</li><li><input disabled="" type="checkbox"> 更宠，更疼，更爱我的傻幺儿</li><li><input disabled="" type="checkbox"> 存一笔钱</li><li><input disabled="" type="checkbox"> 减肥，消灭啤酒肚，120斤</li><li><input disabled="" type="checkbox"> 完成自己制定的学习目标</li><li><input disabled="" type="checkbox"> 读20本书，其中5本左右实体</li><li><input disabled="" type="checkbox"> 更自律，做更好的自己</li></ul><h3 id="彩蛋环节"><a href="#彩蛋环节" class="headerlink" title="彩蛋环节"></a>彩蛋环节</h3><p>&emsp;&emsp;附上第一次和我家幺儿出去玩的自拍(女友觉得太丑了，就换了张)，希望大家新的一年都找到自己心中的那个她，升职加薪！！！<br><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-0b682626.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 关于我 </tag>
            
            <tag> 随笔 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode-数组系列1</title>
      <link href="/leetcode_array1.html"/>
      <url>/leetcode_array1.html</url>
      
        <content type="html"><![CDATA[<h3 id="返回总目录"><a href="#返回总目录" class="headerlink" title="返回总目录"></a>返回总目录</h3><p><a href="/leetcode.html">日刷leetcode–简单版</a></p><hr><h3 id="169-多数元素"><a href="#169-多数元素" class="headerlink" title="169.多数元素"></a>169.多数元素</h3><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-7f596c4b.png" alt="image.png"></p><h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h4><ol><li>利用哈希表存储每个字符出现的个数，出现次数大于<code>n/2</code>的即为多数元素</li><li>根据题意，多数元素的个数大于<code>n/2</code>，每次遇到多数元素就将个数+1，否则减一，值为负数时则证明当前选取的这个数不是多数元素，则更换多数元素继续循环(摩尔投票法)<br><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-022d2db7.png" alt="image.png"><br>上图来着，题169解解<a href="https://leetcode-cn.com/problems/majority-element/solution/3chong-fang-fa-by-gfu-2">摩尔投票法</a></li><li>排序，取下标为<code>len(nums)/2</code>的值</li></ol><h4 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// map解法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">majorityElement</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">mapArr := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> nums &#123;</span><br><span class="line"><span class="keyword">if</span> _, ok := mapArr[v]; !ok &#123;</span><br><span class="line">mapArr[v] = <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">mapArr[v]++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> mapArr &#123;</span><br><span class="line"><span class="keyword">if</span> v &gt; <span class="built_in">len</span>(nums)/<span class="number">2</span> &#123;</span><br><span class="line"><span class="keyword">return</span> k</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">majorityElement0</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">mapArr := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">for</span> _,v := <span class="keyword">range</span> nums&#123;</span><br><span class="line">mapArr[v] ++</span><br><span class="line"><span class="keyword">if</span> mapArr[v] &gt; <span class="built_in">len</span>(nums)/<span class="number">2</span>&#123;</span><br><span class="line"><span class="keyword">return</span> v</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 题目中保证了众数出现次数多余一半,所以遇到众数+1,非众数-1的最终结果始终大于1</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">majorityElement1</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">count, repeat := <span class="number">0</span>, nums[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> nums &#123;</span><br><span class="line"><span class="keyword">if</span> v == repeat &#123;</span><br><span class="line">count++</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">count--</span><br><span class="line"><span class="keyword">if</span> count == <span class="number">0</span> &amp;&amp; k&lt;<span class="built_in">len</span>(nums) &#123;</span><br><span class="line">repeat = nums[k+<span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> repeat</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先排序直接找 len/2的数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">majorityElement2</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span>&#123;</span><br><span class="line">sort.Ints(nums)</span><br><span class="line"><span class="keyword">return</span> nums[<span class="built_in">len</span>(nums)/<span class="number">2</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="217-多数元素"><a href="#217-多数元素" class="headerlink" title="217.多数元素"></a>217.多数元素</h3><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-3291f9c1.png" alt="image.png"></p><h4 id="解题思路：-1"><a href="#解题思路：-1" class="headerlink" title="解题思路："></a>解题思路：</h4><ol><li>哈希表</li></ol><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码:"></a>示例代码:</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">containsDuplicate</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">mapArr := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">bool</span>)</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> nums &#123;</span><br><span class="line"><span class="keyword">if</span> mapArr[v] &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">mapArr[v] = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="219-存在重复元素-II"><a href="#219-存在重复元素-II" class="headerlink" title="219. 存在重复元素 II"></a>219. 存在重复元素 II</h3><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-b7080722.png" alt="image.png"></p><h4 id="解题思路：-2"><a href="#解题思路：-2" class="headerlink" title="解题思路："></a>解题思路：</h4><ol><li>哈希表，不存在则存入，存在这判断两个下标之间的差值是否小于k</li></ol><h4 id="示例代码：-1"><a href="#示例代码：-1" class="headerlink" title="示例代码："></a>示例代码：</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">containsNearbyDuplicate</span><span class="params">(nums []<span class="keyword">int</span>, k <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">mapArr := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">for</span> key, val := <span class="keyword">range</span> nums &#123;</span><br><span class="line"><span class="keyword">if</span> v, ok := mapArr[val]; ok &#123;</span><br><span class="line"><span class="keyword">if</span> key-v &lt;= k &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">mapArr[val] = key</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="228-汇总区间"><a href="#228-汇总区间" class="headerlink" title="228. 汇总区间"></a>228. 汇总区间</h3><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-071d61e0.png" alt="image.png"></p><h4 id="解题思路：-3"><a href="#解题思路：-3" class="headerlink" title="解题思路："></a>解题思路：</h4><ol><li>判断相邻元素差值是否为1，不分1则处于下一个区间，注意处理最后一个元素</li></ol><h4 id="示例代码：-2"><a href="#示例代码：-2" class="headerlink" title="示例代码："></a>示例代码：</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">summaryRanges</span><span class="params">(nums []<span class="keyword">int</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> rStr []<span class="keyword">string</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> rStr</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> head, tail <span class="keyword">int</span></span><br><span class="line">head, tail = nums[<span class="number">0</span>], nums[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line"><span class="keyword">if</span> nums[i] != tail+<span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">if</span> head == tail &#123;</span><br><span class="line">rStr = <span class="built_in">append</span>(rStr, strconv.Itoa(head))</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">rStr = <span class="built_in">append</span>(rStr, strconv.Itoa(head)+<span class="string">&quot;-&gt;&quot;</span>+strconv.Itoa(tail))</span><br><span class="line">&#125;</span><br><span class="line">head = nums[i]</span><br><span class="line">tail = nums[i]</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">tail = nums[i]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> head == tail &#123;</span><br><span class="line">rStr = <span class="built_in">append</span>(rStr, strconv.Itoa(head))</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">rStr = <span class="built_in">append</span>(rStr, strconv.Itoa(head)+<span class="string">&quot;-&gt;&quot;</span>+strconv.Itoa(tail))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> rStr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">summaryRanges1</span><span class="params">(nums []<span class="keyword">int</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> rStr []<span class="keyword">string</span></span><br><span class="line"><span class="keyword">for</span> i,j :=<span class="number">0</span>,<span class="number">0</span>; j&lt;<span class="built_in">len</span>(nums);&#123;</span><br><span class="line"><span class="keyword">if</span> j+<span class="number">1</span> &lt; <span class="built_in">len</span>(nums) &amp;&amp; nums[j+<span class="number">1</span>] == nums[j]+<span class="number">1</span>&#123;</span><br><span class="line">j++</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> i==j &#123;</span><br><span class="line">rStr = <span class="built_in">append</span>(rStr, strconv.Itoa(nums[i]))</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">rStr = <span class="built_in">append</span>(rStr, strconv.Itoa(nums[i]) + <span class="string">&quot;-&gt;&quot;</span> + strconv.Itoa(nums[j]))</span><br><span class="line">&#125;</span><br><span class="line">i = j+<span class="number">1</span></span><br><span class="line">j++</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> rStr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="268-丢失的数字"><a href="#268-丢失的数字" class="headerlink" title="268. 丢失的数字"></a>268. 丢失的数字</h3><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-89a5554f.png" alt="image.png"></p><h4 id="解题思路：-4"><a href="#解题思路：-4" class="headerlink" title="解题思路："></a>解题思路：</h4><ol><li>哈希表，循环一次将数组元素存下来，在循环<code>0-len(nums)</code>，不存在的就是丢失的</li><li>排序后遍历，下标和数组不相等这标识此下标树缺失</li><li>数学方式，通过高斯求和<code>n*(n+1)/2</code>算出所有的和，再减去所有的数组元素，剩下的就是丢失的树</li><li>异或运算</li></ol><h4 id="示例代码：-3"><a href="#示例代码：-3" class="headerlink" title="示例代码："></a>示例代码：</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 哈希</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">missingNumber1</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">mapArr := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">bool</span>)</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> nums &#123;</span><br><span class="line">mapArr[v] = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line"><span class="keyword">if</span> _, ok := mapArr[i]; !ok &#123;</span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">missingNumber2</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">sort.Ints(nums)</span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> nums &#123;</span><br><span class="line"><span class="keyword">if</span> k != v &#123;</span><br><span class="line"><span class="keyword">return</span> k</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span>(nums)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数学</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">missingNumber3</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">sum := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> nums &#123;</span><br><span class="line">sum += v</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span>(nums)*(<span class="built_in">len</span>(nums)+<span class="number">1</span>)/<span class="number">2</span> - sum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异或位运算</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">missingNumber4</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">miss := <span class="built_in">len</span>(nums)</span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> nums &#123;</span><br><span class="line">miss ^= k ^ v</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> miss</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="283-移动零"><a href="#283-移动零" class="headerlink" title="283. 移动零"></a>283. 移动零</h3><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-be9c99ed.png" alt="image.png"></p><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><ol><li>双指针，A一直向右移动，遇到非0的与B交换即可<br><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/36d1ac5d689101cbf9947465e94753c626eab7fcb736ae2175f5d87ebc85fdf0-283_2.gif" alt="283_2.gif"></li></ol><h4 id="示例代码：-4"><a href="#示例代码：-4" class="headerlink" title="示例代码："></a>示例代码：</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">moveZeroes</span><span class="params">(nums []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i, j := <span class="number">0</span>, <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line"><span class="keyword">if</span> nums[i] != <span class="number">0</span> &#123;</span><br><span class="line">nums[i], nums[j] = nums[j], nums[i]</span><br><span class="line">j++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(nums)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Golang </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL分页查询优化</title>
      <link href="/articles/2020/10/21/1603213579436.html"/>
      <url>/articles/2020/10/21/1603213579436.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Mysql慢查询优化，一直是开发中不可避免的问题，当然面试的时候也是。</p><p>今天的面试中，面试的最后一道题：“如何提供分页查询”，我自信的写下 <code>LIMIT</code>，认为此题十拿九稳，面试官此后的问题为当 <code>offset</code>到一定数量的时候怎么优化，因为之前没有遇到过类似的问题，而且也没有量特别大的分页，所以这个问题只能作罢。</p><h3 id="复盘"><a href="#复盘" class="headerlink" title="复盘"></a>复盘</h3><p>回家后弄了个大概有快20W数据的表，实测一下，查询速度是否会因为 <code>limit</code>边大而边长。<br><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-f1d086a6.png" alt="image.png"></p><p>如上图所示，同样的查询条件下，因为 <code>limit</code>增大查询速度确实变慢了很多。</p><h4 id="why"><a href="#why" class="headerlink" title="why?"></a>why?</h4><p>对于limit子句 <code>LIMIT [offset,] row_count</code>，官网说明如下</p><ul><li>The<code>offset</code> specifies the offset of the first row to return. The<code>offset</code> of the first row is 0, not 1.</li><li>The<code>row_count</code> specifies the maximum number of rows to return.</li><li>翻译一下就是：</li><li><code>offset</code>参数指定要返回的第一行的偏移量。第一行的偏移量为<code>0</code>，而不是<code>1</code>。</li><li><code>count</code>指定要返回的最大行数。</li><li></li></ul><p>因为要偏移到 <code>offset</code>处，所以就要先扫描前 <code>offset</code>行，所以随着 <code>limit</code>边大，也就越来越慢。</p><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>随意Google一下，就找到了两种解决办法，分别贴出对于SQL以作参考<br><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-dbe47374.png" alt="image.png"></p><p>因为数据量小，然后数据没有特意去设计，所以整体来说效果一般，但是还是有所提升</p><h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h4><p>针对limit的优化，更多的应该是让limit去尽量少的偏移数据，具体步骤如下：</p><ul><li>使用索引列或者主键作为<code>order by</code>操作列</li><li>记录上次查询的主键，作为下次查询时主键的筛选条件<br><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-bef7270a.png" alt="image.png"></li></ul><p>参考：<a href="https://segmentfault.com/a/1190000017059239?utm_source=sf-related">性能优化之分页查询</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 后端 </category>
          
          <category> 踩坑日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go爬虫初体验</title>
      <link href="/articles/2020/07/09/1594287406684.html"/>
      <url>/articles/2020/07/09/1594287406684.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  闲来无事的时候，偶尔也会看看漫画，但是鹅厂的操作大家都懂，想看最新的你就得给钱，本着白嫖精神，我找到了<a href="http://www.pufei8.com/">扑飞漫画</a>，但是这网页的阅读体验一言难尽，他家的APP也是，动不动就加载失败，一等一半天。思来想去，还是弄个爬虫把图片都爬下来，然后想法弄到kindle里面岂不美哉。因为不会Python，所以只好用GO来写了，虽然没写过，但是可以现学嘛。</p><h2 id="初识爬虫"><a href="#初识爬虫" class="headerlink" title="初识爬虫"></a>初识爬虫</h2><p>  网上找了下资料，go的写爬虫也太简单了吧，几行代码就搞定了，比如下面这样，几行代码就把整个页面拿到了。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">resp, err := http.Get(<span class="string">&quot;https://www.baidu.html&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;http get error&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line">body, err := ioutil.ReadAll(resp.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;read error&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(body))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  得知爬虫这么简单的我笑出了声，剩下的工作也就是获取网址源码，然后正则解析出我想要的东西，循环以上步骤拿到图片地址下载即可，整体可分为三步。</p><ol><li>爬取漫画首页，获取目录标题极其链接</li><li>通过目录拿到的链接去访问图片所在页面，然后解析出图片地址</li><li>下载图片，并存储在指定页面</li></ol><p>  有了如上结论的我开始奋笔疾书，然后当我进行到第二步获取图片地址的时候，发现爬下来的页面与网页实际的不一样。</p><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-5aa0dbd7.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-1b67caf2.png" alt="image.png"></p><p>  我获取到网页内容是一个loading页面，而不是这个页面最终的状态。起初的想法是因为网页一开始打开时这样，加载完后就正常了，所以我隔几秒在读取网页内容，事实证明这样不行。</p><h2 id="意外之喜"><a href="#意外之喜" class="headerlink" title="意外之喜"></a>意外之喜</h2><p>  因为不知道啥原因导致的，所以也没找到解决办法，期间尝试了一下爬虫框架也依旧无果。但是也没有彻底放弃，没事就看看这页面的源码，希望能找出解决办法。</p><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-4b9ea23b.png" alt="image.png"></p><p>  乍一看是某种解密的东西，尝试运行下发现可以得到这一页的图片地址，还剩下几个变量又都是干嘛的呢，好奇之下运行了一下。</p><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-82545a4e.png" alt="image.png"></p><p>  如此一来，整个章节所有图片的地址也就都有了。问题也就是怎么在go里运行js，然后就找到了一个叫<a href="https://github.com/robertkrimen/otto">otto</a>的包，完美。</p><h2 id="开始书写"><a href="#开始书写" class="headerlink" title="开始书写"></a>开始书写</h2><p>  因为在寻找解决办法的过程中接触了一些爬虫框架，整体感觉比源码撸方便一点，主要是不用自己写正则，可以像js操作DOM节点那样找到自己想要的内容，所以就换了框架<a href="github.com/gocolly/colly">colly</a>来完成整改爬虫。</p><p>  定义一个全局变量，用于存放章节与之对应的链接以及该章节下的所有图片</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Catalog <span class="keyword">struct</span> &#123;</span><br><span class="line">   Title  <span class="keyword">string</span></span><br><span class="line">   Url    <span class="keyword">string</span></span><br><span class="line">   ImgArr []<span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> catalog []*Catalog</span><br></pre></td></tr></table></figure><h3 id="1-漫画首页"><a href="#1-漫画首页" class="headerlink" title="1. 漫画首页"></a>1. 漫画首页</h3><p>  第一步是爬取漫画的首页，通过获取目录内容去获取到章节的标题以及该章节的地址。比如<a href="http://www.pufei8.com/manhua/419/">一人之下</a>，目录存放在 <code>id=&quot;play_0&quot;</code>下的无序列表中，获取对应 <code>li</code>标签内 <code>a</code>标签内容即可。</p><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-bad891eb.png" alt="image.png"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">c := colly.NewCollector()</span><br><span class="line">c.OnHTML(<span class="string">&quot;#play_0&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(e *colly.HTMLElement)</span></span> &#123;</span><br><span class="line">   e.ForEach(<span class="string">&quot;ul li a&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>, element *colly.HTMLElement)</span></span> &#123;</span><br><span class="line">      href := element.Attr(<span class="string">&quot;href&quot;</span>)</span><br><span class="line">      title := element.Text</span><br><span class="line">      title = coverGBKToUTF8(title) <span class="comment">// 页面编码转为UTF8</span></span><br><span class="line">      catalog = <span class="built_in">append</span>(catalog, &amp;Catalog&#123;Url: PF + href, Title: title&#125;)</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">c.OnRequest(<span class="function"><span class="keyword">func</span><span class="params">(r *colly.Request)</span></span> &#123;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">c.Visit(MANHUA + strconv.Itoa(Mid))</span><br></pre></td></tr></table></figure><p>  扑飞漫画整站的编码是 <code>gb2312</code>，因为go只认 <code>utf-8</code>，所以对于爬取的内容需要处理下。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/axgle/mahonia&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">coverGBKToUTF8</span><span class="params">(src <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">   <span class="keyword">return</span> mahonia.NewDecoder(<span class="string">&quot;gbk&quot;</span>).ConvertString(src)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-获取图片地址"><a href="#2-获取图片地址" class="headerlink" title="2. 获取图片地址"></a>2. 获取图片地址</h3><p>  通过上面的代码，我们已经获取了所有目录对应地址，接下来需要做的只是去到对应页面，获取JS代码并执行，获得该章节下所有的图片地址</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取该章节所有图片地址</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetImgArr</span><span class="params">(catalog *Catalog)</span></span> &#123;</span><br><span class="line">   c := colly.NewCollector()</span><br><span class="line">   c.OnHTML(<span class="string">&quot;head script&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(e *colly.HTMLElement)</span></span> &#123;</span><br><span class="line">      <span class="keyword">if</span> e.Text != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">         JavaScript := coverGBKToUTF8(e.Text)</span><br><span class="line">         JavaScript += <span class="string">&quot; function f() &#123;return photosr;&#125; f();&quot;</span></span><br><span class="line">         vm := otto.New()</span><br><span class="line">         value, err := vm.Run(JavaScript)</span><br><span class="line">         <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            log.Println(<span class="string">&quot;解析图片地址失败:&quot;</span>, err)</span><br><span class="line">         &#125;</span><br><span class="line">         imgStr, err := value.ToString()</span><br><span class="line">         <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            log.Println(<span class="string">&quot;图片地址解析出错:&quot;</span>, err)</span><br><span class="line">         &#125;</span><br><span class="line">         imgArr := strings.Split(imgStr, <span class="string">&quot;,&quot;</span>)</span><br><span class="line">         catalog.ImgArr = imgArr[<span class="number">1</span>:]</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">   c.OnRequest(<span class="function"><span class="keyword">func</span><span class="params">(r *colly.Request)</span></span> &#123;</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">   c.Visit(catalog.Url)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-下载图片"><a href="#3-下载图片" class="headerlink" title="3. 下载图片"></a>3. 下载图片</h3><p>  这个网上一搜图片一大堆，所以直接copy一份就可以了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建文件夹并存储图片</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CreateFileGetImg</span><span class="params">(catalog *Catalog, index <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">   <span class="keyword">if</span> catalog.Title == <span class="string">&quot;通知&quot;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   dir := DIR + strconv.Itoa(index) + <span class="string">&quot;--&quot;</span> + catalog.Title</span><br><span class="line">   err := os.MkdirAll(dir, os.ModePerm)</span><br><span class="line">   <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">      log.Println(<span class="string">&quot;创建文件夹失败&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> k, v := <span class="keyword">range</span> catalog.ImgArr &#123;</span><br><span class="line">         resp, err := http.Get(ImgHeader + v)</span><br><span class="line">         <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            log.Println(err)</span><br><span class="line">         &#125;</span><br><span class="line">         body, _ := ioutil.ReadAll(resp.Body)</span><br><span class="line">         out, _ := os.Create(dir + <span class="string">&quot;/&quot;</span> + strconv.Itoa(k+<span class="number">1</span>) + <span class="string">&quot;.jpg&quot;</span>)</span><br><span class="line">         io.Copy(out, bytes.NewReader(body))</span><br><span class="line">         resp.Body.Close()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-细节处理"><a href="#4-细节处理" class="headerlink" title="4. 细节处理"></a>4. 细节处理</h3><p>  在获取图片地址并下载图片的时候，可能会出现类似 <code>Get http://res.img.fffmanhua.com/2017/08/22/20/28acd5236d.jpg: EOF</code>的错误，我处理的方式是再获取一次，知道它不报错为止。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GetImage:</span><br><span class="line">resp, err := http.Get(ImgHeader + v)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(err)</span><br><span class="line"><span class="keyword">goto</span> GetImage <span class="comment">// 获取图片出错重新获取</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-并发"><a href="#5-并发" class="headerlink" title="5. 并发"></a>5. 并发</h3><p>  上述代码已经可以完成我的程序需求了，但是面对漫画量很大的情况下，执行的时间还是很吃力的，所以需要加上并发。一开始的考虑是在获取章节的时候直接并发，顺道把图片也下载了。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> catalog &#123;</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(v *Catalog, k <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">//获取图片地址</span></span><br><span class="line">GetImgArr(v)</span><br><span class="line"><span class="keyword">if</span> runtime.NumGoroutine() &gt; MaxNum &#123;</span><br><span class="line">MaxNum = runtime.NumGoroutine()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建文件夹并获取图片</span></span><br><span class="line">CreateFileGetImg(v, <span class="built_in">len</span>(catalog)-k)</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;(v, k)</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait()</span><br></pre></td></tr></table></figure><p>  我在编辑器Goland里面运行的时候是没有问题的，但是当我编译后拿去Windows和Mac里运行就会出一大堆的问题，最后只能限制一下并发量的问题，最终的解决办法是并发获取图片目录信息，然后做一个队列去下载图片，同时最多下载10张，这样一来，性能也能够吃得消，虽然慢一点，但是它稳。</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/InkDP/PF">https://github.com/InkDP/PF</a></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>  吐槽一下，苹果有时候真的很坑，我在通过队列下载的时候，出现了 <code>catalog</code>数组中的 <code>imgArr</code>长度为为空的情况，调试了很久都没用，扔给别人在Windows上就乱跑。</p><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-cad22904.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-573937e9.png" alt="image.png"></p><p>&emsp;&emsp;最后的最后附上一张成功的截图<br><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-1a984f24.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-c06579cf.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-fdd3f60d.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>广州一年记</title>
      <link href="/articles/2020/06/22/1592755563685.html"/>
      <url>/articles/2020/06/22/1592755563685.html</url>
      
        <content type="html"><![CDATA[<p>  随着房租和押金的缴纳，我定下了未来一年居住的房子，回头一看，来广州已经差不读一年有余。</p><p>  一年的光阴辗转而逝，我从成都到了广州，从初入社会的应届生变成了一个初级社畜，从一无所有到有了那么一丢丢存款，我变了好多好多，又似乎啥也没变。</p><p>  初到广州，城中村与高楼大厦组成的城市，让我感到无比陌生。在这个完全没有伙伴的城市，我感到孤独。开始了工作日两点一线，周末死宅在家的固定生活，就这样一年过去了。</p><p>  在这一年里，我依稀记得我就出过一次门，那时元旦跨年夜，我决定出去走走，一个人看了电影，一个人吃了烧烤，一个人喝了小酒，那时我已习惯孤独，我开始学会享受孤独。在这样的环境下我开始自律，我开始习惯看书、写日记、记账、规划自己的道路…</p><p>  我还是会整体每天没心没肺的嘻嘻哈哈，但是好像没有人再会和我一起欢笑，我的标志性的笑仿佛成了缓解尴尬的一种方式，我其实并不开心，但这又有什么关系，在这个常住人口一千万多人的城市，又有几个人关心或是在意你呢，收起自己的情绪，努力前进才是你该做的。</p><p>  在这样环境下，我积压着大量的情绪无处发泄，太多太多的话无处倾述，身为话痨的我，也变得无话可说。偶尔与老友聊天时，我总是有说不完的话，他们的出现让我封闭内心打开一个缺口，疯狂的往外窜。</p><p>  看似平静的生活却并不平淡，大学无法正常毕业、实习转正被拒、山盟海誓化为泡影、努力经营的家庭关系分崩离析，好在一切都过去了，一切都在变好。对于离开成都前往广州这个决定，我不后悔。虽在一线城市，但是我并没有感觉到很大的生活压力，我也安装我的计划开始存钱，为了自己车子房子而去努力。</p><p>  在延迟了一年后，我终于可以拿到属于我的毕业证。老友的到来，让我有了出去玩约的对象，虽然需要顶着吃狗粮的风险，但也还不错，我虽然宅，但是不希望一直宅下去。某人的出现，我也有了日常倾诉的对象，不再把所有情绪都憋在心里。原来枯燥无味的生活，在开始变得越来越有趣，一切的一切都在向着更好的方向发展。</p><p>PS:昨晚去广州塔时的拍的照片，让我发现自己似乎胖了不少，看来在广州的小日子过得不错，附一张老友相机中的我。<br><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/1592755437986-47c3807c.jpg" alt="1592755437986.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go小技巧——不定时更新</title>
      <link href="/articles/2020/06/19/1592560522403.html"/>
      <url>/articles/2020/06/19/1592560522403.html</url>
      
        <content type="html"><![CDATA[<h1 id="函数返回值定义"><a href="#函数返回值定义" class="headerlink" title="函数返回值定义"></a>函数返回值定义</h1><p>一般的函数定义都是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func Test(a,b int) (int, int)&#123;&#125;</span><br></pre></td></tr></table></figure><p>然而go却可以这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func Test(a, b int) (c,d int) &#123;&#125;</span><br></pre></td></tr></table></figure><p>你可能觉得没什么，但是对于我这种懒人来说，这东西可太方便了，因为go没有 <code>try...catch</code>，所以所有的错误都需要自己手动抛出，一个函数里你可能有N个↓</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际中，你绝对不会只返回一个 <code>err</code>，可能还夹杂着各种乱七八糟的东西，写一次还好，写多了你真的不会烦吗？然而有了第二种定义方式，不过你又多少个返回值，只需要一个 <code>return</code>即可搞定。<br><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/991592559676.pic-f90f3138.jpg" alt="991592559676.pic.jpg"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b buriedPoint)</span> <span class="title">Retention</span><span class="params">()</span> <span class="params">(channel, projectId, startTime, endTime <span class="keyword">string</span>, list []dbmodel.BuriedPointKey, data []<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>, err error)</span></span> &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="comment">//return channel, projectId, startTime, endTime, list, data, err</span></span><br><span class="line"><span class="keyword">return</span> <span class="comment">//选哪个不是一目了然吗，当然实际中不会让你返回这么多，这里有些夸张</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然上述的方法虽爽，但是也还是会有问题的，让我们再<img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/991592559676.pic-f90f3138.jpg" alt="991592559676.pic.jpg"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StringToInt</span><span class="params">(str <span class="keyword">string</span>)</span> <span class="params">(v <span class="keyword">int</span>, err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="literal">true</span> &#123;</span><br><span class="line"><span class="keyword">int</span>, err := strconv.Atoi(str)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">v = <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>乍一看没啥毛病，但是你运行下看看报不报错就完事了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./main.go:17:4: err is shadowed during return</span><br></pre></td></tr></table></figure><p>出现问题就要去解决，提供两种方法↓</p><p>方法1：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StringToInt</span><span class="params">(str <span class="keyword">string</span>)</span> <span class="params">(v <span class="keyword">int</span>, err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="literal">true</span> &#123;</span><br><span class="line"><span class="keyword">int</span>, rErr := strconv.Atoi(str)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">err = rErr</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">v = <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法2：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StringToInt</span><span class="params">(str <span class="keyword">string</span>)</span> <span class="params">(v <span class="keyword">int</span>, err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="literal">true</span> &#123;</span><br><span class="line"><span class="keyword">int</span>, err := strconv.Atoi(str)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> v, err</span><br><span class="line">&#125;</span><br><span class="line">v = <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这个时候，它是不是就不这么香了，是否预定义需要根据实际场景决定。</p><h1 id="JSON数组返回NULL"><a href="#JSON数组返回NULL" class="headerlink" title="JSON数组返回NULL"></a>JSON数组返回NULL</h1><p>当你的接口返回一个数组，而且数组正好为空时↓</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;code&quot;</span>:<span class="number">200</span>,</span><br><span class="line">    <span class="attr">&quot;msg&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>:<span class="literal">null</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可能会返回这样的东西，那么你的前端看了可能会打人(我帮你们问过了)，去翻了下go官方的json包，发现了以下内容：</p><blockquote><p>Array and slice values encode as JSON arrays, except that []byte encodes as a base64-encoded string, and a nil slice encodes as the null JSON value.</p></blockquote><p>借助翻译软件：</p><blockquote><p>数组和切片值编码为JSON数组，但[] byte编码为base64编码的字符串，而nil slice编码为Null JSON值</p></blockquote><p>日常定义数组时，我们一般采用如下两种方式初始化：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> t []<span class="keyword">int</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t := []<span class="keyword">int</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>函数返回值定义中定义的与上述两周并无差异，所以也就会返回一样的</p><p>定时数组时使用 <code>make</code>就可以完全避免这种情况</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> t = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>demo：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">data := Str&#123;&#125;</span><br><span class="line">data2 := Str&#123;Array: []<span class="keyword">string</span>&#123;&#125;&#125;</span><br><span class="line"><span class="keyword">var</span> arr = []<span class="keyword">string</span>&#123;&#125;</span><br><span class="line">data.Array = arr</span><br><span class="line">buf, err := json.Marshal(&amp;data)</span><br><span class="line">log.Println(<span class="keyword">string</span>(buf), err)</span><br><span class="line">buf2, err2 := json.Marshal(&amp;data2)</span><br><span class="line">log.Println(<span class="keyword">string</span>(buf2), err2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="append-函数常见操作"><a href="#append-函数常见操作" class="headerlink" title="append 函数常见操作"></a>append 函数常见操作</h1><ol><li><p>将切片 b 的元素追加到切片 a 之后：<code>a = append(a, b...)</code></p></li><li><p>复制切片 a 的元素到新的切片 b 上：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b = <span class="built_in">make</span>([]T, <span class="built_in">len</span>(a))</span><br><span class="line"><span class="built_in">copy</span>(b, a)</span><br></pre></td></tr></table></figure></li><li><p>删除位于索引 i 的元素：<code>a = append(a[:i], a[i+1:]...)</code></p></li><li><p>切除切片 a 中从索引 i 至 j 位置的元素：<code>a = append(a[:i], a[j:]...)</code></p></li><li><p>为切片 a 扩展 j 个元素长度：<code>a = append(a, make([]T, j)...)</code></p></li><li><p>在索引 i 的位置插入元素 x：<code>a = append(a[:i], append([]T&#123;x&#125;, a[i:]...)...)</code></p></li><li><p>在索引 i 的位置插入长度为 j 的新切片：<code>a = append(a[:i], append(make([]T, j), a[i:]...)...)</code></p></li><li><p>在索引 i 的位置插入切片 b 的所有元素：<code>a = append(a[:i], append(b, a[i:]...)...)</code></p></li><li><p>取出位于切片 a 最末尾的元素 x：<code>x, a = a[len(a)-1], a[:len(a)-1]</code></p></li><li><p>将元素 x 追加到切片 a：<code>a = append(a, x)</code></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高性能消息队列NSQ---GO--demo</title>
      <link href="/articles/2020/05/21/1590046687574.html"/>
      <url>/articles/2020/05/21/1590046687574.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&emsp;&emsp;关于NSQ是什么，NSQ是做什么的，怎么启动，网上的资料太多太多，详情请移步<a href="https://zhuanlan.zhihu.com/p/37081073">分布式实时消息平台NSQ</a>，里面讲的很详细，还附带demo。</p><h3 id="客户端-生产者-producer"><a href="#客户端-生产者-producer" class="headerlink" title="客户端/生产者(producer)"></a>客户端/生产者(producer)</h3><p>&emsp;&emsp;NSQ发送消息非常简单，分两步完成：</p><ul><li>创建Producer实例</li><li>调用<code>Publish</code>发送一个新的消息到指定的<code>topic</code>中<br>具体实现如下所示<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cfg := nsq.NewConfig()</span><br><span class="line">nsqd := <span class="string">&quot;127.0.0.1:4150&quot;</span></span><br><span class="line">producer, err := nsq.NewProducer(nsqd, cfg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := producer.Publish(<span class="string">&quot;test&quot;</span>, []<span class="keyword">byte</span>(<span class="string">&quot;Hello NSQ&quot;</span>)); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;publish error:&quot;</span> + err.Error())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="服务端-消费者-consumer"><a href="#服务端-消费者-consumer" class="headerlink" title="服务端/消费者(consumer)"></a>服务端/消费者(consumer)</h3>&emsp;&emsp;消费者用于接收指定<code>topic</code>中的消息，实现需分为3步：</li><li>调用<code>NewConsumer</code>为指定的主题/渠道创建消费者的新实例</li><li>调用<code>AddHandler</code>为此使用者接收的消息设置处理程序</li><li>调用<code>ConnectToNSQD</code>使用nsqd地址直接连接，有多个地址时使用<code>ConnectToNSQDs</code>，这里官方文档推荐使用<code>ConnectToNSQLookupd</code><br>具体实现如下：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cfg := nsq.NewConfig()</span><br><span class="line">c, err := nsq.NewConsumer(topic, channel, cfg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">c.AddHandler(&amp;ConsumerT&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := c.ConnectToNSQD(address); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*ConsumerT)</span> <span class="title">HandleMessage</span><span class="params">(msg *nsq.Message)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;receive&quot;</span>, msg.NSQDAddress, <span class="string">&quot;message:&quot;</span>, <span class="keyword">string</span>(msg.Body))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消费者生产者搭配使用"><a href="#消费者生产者搭配使用" class="headerlink" title="消费者生产者搭配使用"></a>消费者生产者搭配使用</h3>&emsp;&emsp;我上面所写的demo虽实现了最基本的NSQ的功能，但是对于一个demo来说，整体不够直观。理想中的状态应该是：服务端一直处于执行状态，客户端发送消息时，服务端接受并处理。<br>&emsp;&emsp;改造后服务端：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/nsqio/go-nsq&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ConsumerT <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">InitConsumer(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;ch1&quot;</span>, <span class="string">&quot;127.0.0.1:4150&quot;</span>)</span><br><span class="line"><span class="keyword">select</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*ConsumerT)</span> <span class="title">HandleMessage</span><span class="params">(msg *nsq.Message)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;receive&quot;</span>, msg.NSQDAddress, <span class="string">&quot;message:&quot;</span>, <span class="keyword">string</span>(msg.Body))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitConsumer</span><span class="params">(topic <span class="keyword">string</span>, channel <span class="keyword">string</span>, address <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">cfg := nsq.NewConfig()</span><br><span class="line">c, err := nsq.NewConsumer(topic, channel, cfg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">c.AddHandler(&amp;ConsumerT&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := c.ConnectToNSQD(address); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>&emsp;&emsp;客户端这边呢，倒是没什么具体要更改的，可是每次都需要重复去运行才能发送消息也确实麻烦，所以做了点小更改，让客户端也一直处于运行状态，通过命令行的输入来发送消息，具体如下：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/nsqio/go-nsq&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">cfg := nsq.NewConfig()</span><br><span class="line">nsqd := <span class="string">&quot;127.0.0.1:4150&quot;</span></span><br><span class="line">producer, err := nsq.NewProducer(nsqd, cfg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">reader := bufio.NewReader(os.Stdin)</span><br><span class="line">fmt.Println(<span class="string">&quot;Simple Shell&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;---------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Print(<span class="string">&quot;-&gt; topic: &quot;</span>)</span><br><span class="line">topic, _ := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">topic = strings.Replace(topic, <span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="number">-1</span>)</span><br><span class="line">fmt.Print(<span class="string">&quot;-&gt; message: &quot;</span>)</span><br><span class="line">message, _ := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">message = strings.Replace(message, <span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="number">-1</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;消息发送中\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := producer.Publish(topic, []<span class="keyword">byte</span>(message)); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;publish error:&quot;</span> + err.Error())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>源码请访问本人GitHub下载：<a href="https://github.com/InkDP/nsq-demo">https://github.com/InkDP/nsq-demo</a><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3>&emsp;&emsp;发送文章那一刻，发现上次发文章已经是5个月前，最近太懒都没学新的东西，希望早日回到高产似母猪的状态。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019年个人总结</title>
      <link href="/2019.html"/>
      <url>/2019.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&emsp;&emsp;时间如梭，转眼已到12月月底，农历也悄然走到腊月，2020年即将来到。2019年对我来说算是意义非凡的一年，无论从时间，地点上划分，19年可大致分为两个部分，上半部分波澜不惊，下半部分波涛汹涌。趁着这个无所事事外加老大在一边玩游戏的下午对我的2019做个总结。</p><p>&emsp;&emsp;我从一个学生变成了一个社会人；从重庆跑去了成都，再由成都来到了广州；从PHP成功转到GO；从两个人变成了一个人。。。这一年发生在我身上的事太多太多，我也因此改变了太多太多。</p><p>&emsp;&emsp;无论从时间，地点上划分，19年可大致分为两个部分，上半部分波澜不惊，下半部分波涛汹涌</p><h3 id="时间轴"><a href="#时间轴" class="headerlink" title="时间轴"></a>时间轴</h3><ul><li><p>2018年12月25日：因为种种原因，从实习公司离职，决定回家深入学习go</p></li><li><p>2019年01月24日：前往成都，入职一家以go主要语言的公司</p></li><li><p>2019年01月30日：在新公司上班三天后，我决定请假提前回家过年（已决定年后重新找工作）</p></li><li><p>2019年02月11日-02月13日：从家里辗转到重庆然后到成都</p></li><li><p>2019年03月：入职成都一家企业服务公司的IT部门，成为技术负责人</p></li><li><p>2019年05月01日-05月13日：回学校参加毕业答辩，期间与女友闹了一次分手，影响下半年的决定在这期间产生</p></li><li><p>2019年06月中旬：从成都公司离职，回校参加英语A级考试</p></li><li><p>2019年06月下旬：由重庆前往广州，开始广漂生涯</p></li><li><p>2019年07月03日：入职一家电商公司，开发语言GO</p></li><li><p>2019年09月21日：和女友分手</p></li><li><p>2019年09月30日：没能得到转正资格，从电商公司离职</p></li><li><p>2019年10月16日：入职现在的公司，一家游戏外包公司，开始转型做游戏</p></li></ul><h3 id="概叙"><a href="#概叙" class="headerlink" title="概叙"></a>概叙</h3><p>&emsp;&emsp;去年年末的时候从实习的公司离职，其中缘由不再追溯，时间刚好6个月，当时距离过年还有一个多月，兜里有点小钱，遂决定离职在家深入学习go，年后找一家go的公司。事实证明我太年轻，游戏诱惑太大，在家玩了一个月左右的修仙模拟器（害人啊），这期间在网上投了几波简历，电面通过成都一家公司的面试，但是要求年前一周入职，算是认一认同事之类的。1月24日带着女友前往成都，租了房子，1月28日入职。这家公司是做ERP的，公司不错，上来就配一台MacBook，具体配置忘了(依稀记得是Air)，但是用着是真的难受，各种不适应（现在抱着我的MBP写总结，表示真香），一个月没敲代码的我几乎忘完了Go，但是还是逼着自己适应。入职第三天的下午我询问后端老大，我后面需要做些什么，他把我叫来会议室，跟我讲了公司的种种业务，谈话过程中有聊到前端使用Vue，我插了句嘴，表示我用过Vue，他叫来了前端负责人让我和他聊，聊了很久，我当时也很迷茫，可我不是傻逼，看的出来前后端似乎都不想要我。他们对我的问题进行了大概半个小时的讨论，把我调去了前端组(这种被人嫌弃的感觉真的很不好)，因为第二天女友要回家过年，我爷爷也在医院住院，当晚决定从公司请假和女友一起回家，已经大概率决定年后重新找工作，因为听说年后要996，我怂了。</p><p>&emsp;&emsp;过年很开心，女友在我家过得年，虽不算正式，但也算是见过我爸了。因为过年前后把手机屏幕摔坏，不能正常买票，所以不能再年后的工作时间入职，随即辞职，打算重新工作，期间租的房子也退了，暂住在女友哥哥家。重新回到成都后，我开始了漫长的找工作时间，都说金三银四，可是我找工作的经历却不是那么顺利，因为太久没敲代码，所以一问三不知，经过一个月的努力找到了一家非互联网公司的工作。</p><p>&emsp;&emsp;因为是非互联网公司，所以整个IT部门也没几个人，我成了技术负责人，项目进度由我制定，所以比较闲，在这期间发现了开源项目<a href="https://github.com/88250/solo">solo</a>，并搭建了自己的个人博客<a href="https://www.inkdp.cn/">墨殇的技术博客</a>。</p><p>&emsp;&emsp;5月初趁着国庆回校答辩，女友也回自己学校答辩，回重庆的当晚与女友闹出矛盾，由于处理不及时，第二天便分手，答辩期间复合后又因种种原因分开。答辩一切顺利，结束后回到成都继续上班。整个答辩期间，因为和女友的种种不得不考虑下以后的打算，但是因为和女友分手心灰意冷，打算离开成都去广州。女友从学校回成都后复合，但是此时对于未来的规划的已发生天差地别，女友想去参加西部计划，考公务员，她决定去新疆，让我去广州。我内心是拒绝的，当时想着既然已经复合，那就继续呆在成都，因为我不想再异地了，大学三年异地真的很累了，但最终还是尊重了她的选择。</p><p>&emsp;&emsp;6月中旬的时候，从公司离职，回重庆考试顺便回老家，下一站广州。当我提着行李箱从我们成都小家走出那一刻，我知道我与她的此生的缘分，基本尽了，我所能做的只是小心维护，让这个日期可以往后移，无限往后移，或许我们能再一次熬过异地。</p><p>&emsp;&emsp;6月底，我离开生我养我的家乡南下广州。之所以选择来广州，是因为父母在这边，当时兜里没钱，想着依靠下父母可以压力小很多，计划中花一个月找工作，找一份自己满意的，我以为的终究是我以为，老爸老妈轮番催着我快点找到工作，然后我就在一周内找到了工作，虽然不太满意，但是也还是一家以GO为开发语言的公司，还行，讲究上把，7月3日入职。</p><p>&emsp;&emsp;刚入职第一个月还好，事情不多不少，对刚毕业的我来说提升很大，憧憬这在这家公司后面的种种，然后慢慢的公司大佬全部跑路了，我就知道要凉，我处于了一个很尴尬的境地，想做事没事可做，我知道这样迟早被淘汰，果然9月底，总公司项目负责人告诉我，我无法转正，我9月30日正式离职。</p><p>&emsp;&emsp;9月于我来说意义非凡，首先是从公司离职，其次是与女友分手。9月21日的下午，我照例睡到中午起床，由于昨晚与女友聊天时没有Get到她的委屈，我最怕出现的情况还是出现了，在坐在老妈家等外婆做饭的时间点，女友提出了分手，当时的我没有过多犹豫，选择了同意，我其实一直都明白，我们在一起真的是在互相折磨，与其继续缠着她，不如放过她，也放过我，依稀记得外婆那天中午下了面，面里有咸菜，很好吃。从19-23，她青春中最美好的5年陪着我，我真的很感谢她，但最终我还是伤了你，没能与你走到最后，希望你一切都好，你有没有照顾好自己，新疆很冷，抵抗力很差的你有没有感冒，感冒了有没有按时吃药，可惜这些我都无法得知了。已经预知到会从公司离职的我，在发工资的时候选择了通过京东金条借一部分钱，外加上工作入手一台MBP，对于一向理智的我来说，这无疑是一个疯狂的决定。到9月底离职时，我算是处在了人生最低谷，失业，欠债，被分手。</p><p>&emsp;&emsp;国庆后的我开始找工作，一周内我便找到了理想的工作，游戏开发，虽然是外包，但是收入颇丰，我选择了现在这家公司，时间证明我是对的，公司的工作方式与氛围于我来说是最舒服的，不出意外，我会在这家公司待到离开广州为止。</p><p>&emsp;&emsp;本月中旬得知爷爷病重，当时很担心，老爸前段时间回了家，所幸虚惊一场。</p><p>&emsp;&emsp;现在的我一切都好，只是有些丧。希望后面越来越好</p><h3 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h3><p>&emsp;&emsp;虽然19年我的生活发生的变化较多，但是现在一切都已恢复正常，有满意的工作，有不错的业余生活。</p><h4 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h4><p>&emsp;&emsp;一个人的生活可以过得很精致，也可以过得很简单，我属于后者，每天可以早老妈家吃早晚餐，晚上回家后可以看部电影打打游戏，周末亦是如此，总的来说过得很惬意，没有啥特别大的生活压力。日记一写就是4个多月，这算是今年养成的最好的一个习惯了吧，自己的性格开始变得沉稳，低调，一切似乎都在变好。</p><h4 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h4><p>&emsp;&emsp;5月的时候买了kindle，想着丰富自己的业余生活，做一个书虫，后面退货，6月份重新购入，目前通勤时间我大多数时间都用来看书，虽然阅读时间零零碎碎，但也还是收获颇丰。</p><ul><li><p>《解忧杂货店》</p></li><li><p>《肖生克的救赎》</p></li><li><p>《围城》</p></li><li><p>《一只特立独行的猪》</p></li><li><p>《许三观卖血记》</p></li><li><p>《我们三》</p></li><li><p>《我这一辈子：老舍自传》</p></li><li><p>《我的前半生》</p></li><li><p>《天才在左，疯子在右》</p></li><li><p>《追风筝的人》</p></li></ul><h4 id="观影"><a href="#观影" class="headerlink" title="观影"></a>观影</h4><p>&emsp;&emsp;得益于大学的时候死党经常请我看电影，我成了一位漫威迷，也有了去电影院看电影的爱好。上半年去电影院看了两部漫威的片子，下半年也有很多想看的，可能因为是一个人，最后都没有去成，后面虽然通过别的渠道看了但还是成了一个小小的遗憾。要学会享受孤独，计划元旦那天去看上一部，暂时没想好看啥，《星战9》，《误杀》，《叶问》似乎都不错。</p><ul><li><p>《惊奇队长》</p></li><li><p>《复联四》</p></li></ul><hr><ul><li><p>《蜘蛛侠：英雄远征》</p></li><li><p>《惊天魔盗团》</p></li><li><p>《惊天魔盗团2》</p></li><li><p>《使徒行者》</p></li><li><p>《风语咒》</p></li><li><p>《银河补习班》</p></li><li><p>《阿飞正装》</p></li><li><p>《攀登者》</p></li><li><p>《流浪地球》</p></li><li><p>《百鸟朝凤》</p></li><li><p>《遇见你真好》</p></li><li><p>《犯罪现场》</p></li><li><p>《碟中谍6》</p></li><li><p>《中国机长》</p></li><li><p>《驯龙高手》</p></li><li><p>《哪吒》</p></li><li><p>还有一些似乎想不去来了</p></li></ul><h4 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h4><p>&emsp;&emsp;11月因为手里有闲钱，然后又没人管着自己就放纵了一波，买了台switch，双十二的时候趁着打折，又入手了一款xbox one 手柄，周末在家的时候在家玩玩。</p><ul><li>《宝可梦剑盾·剑》(已通关)</li><li>《塞尔达传说：荒野之息》(未通关，感觉自己能玩一年)</li><li>《GTA5》(已购买，尚未入手)</li><li>《文明6》(同上）</li><li>《LOL》(肝玩这波活动后，可能会弃坑或者转区)</li><li>《古剑奇谭三》(弃坑)</li></ul><h4 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h4><p>&emsp;&emsp;技术上，公司安排系统学习websocket与protobuf，但是最近自己似乎学习效率很低，有点学不进去的感觉，可能由于我喜欢在项目中学习的原因，希望后面能够做下调整。</p><p>&emsp;&emsp;其他方面，我12月的考试没有回去参加，因为预感到自己会考不过，我还有两次机会，希望明年自己能提高英语水平。</p><h4 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h4><p>&emsp;&emsp;目前工作还算稳定，生活比较惬意，但是自己明显感觉自己积极性变低，可能是与最近发的事情有关，也可能是因为其他，总之后面调整好即可。希望明年的技术能独挡一面，成为自己及公司希望我成为的人。</p><h4 id="感情"><a href="#感情" class="headerlink" title="感情"></a>感情</h4><p>&emsp;&emsp;现在的想法是先立业，再成家，感情于我已不是必需品，虽会时不时想她，但我不会去打扰她，一切随缘，努力提高自己即可。我试着问过自己一个问题，如果自己是个女的，愿意与现在的自己谈恋爱吗，我得到的是否定答案，所以当这个答案变为肯定再去考虑感情的事情吧。而且在经历了父母离婚，外加上老爸的第二次离婚后，我对结婚感到害怕。最后说一句，单身的快乐你想象不到😌😌。</p><h4 id="遗憾"><a href="#遗憾" class="headerlink" title="遗憾"></a>遗憾</h4><p>&emsp;&emsp;总的来说，今年的我，我还是比较满意，如果说有遗憾的话，那就是对她吧。年初所说今年存上一笔钱，因为自己辗转各地，计划落空，此事留到明年。</p><h3 id="2020年规划"><a href="#2020年规划" class="headerlink" title="2020年规划"></a>2020年规划</h3><p>&emsp;&emsp;目前的我工作稳定，收入尚可，所以2020年在这方面没有需求，当然能进一步更好，所以希望自己能在性格上做出改变。</p><ul><li><input disabled="" type="checkbox"> 不再爱秀爱炫耀</li><li><input disabled="" type="checkbox"> 不再攀比</li><li><input disabled="" type="checkbox"> 不再傲慢、骄傲、急躁</li><li><input disabled="" type="checkbox"> 多一点耐心</li><li><input disabled="" type="checkbox"> 存一笔钱</li><li><input disabled="" type="checkbox"> 独自完成一次旅游(国外最好)</li><li><input disabled="" type="checkbox"> 英语过级，拿到毕业证</li><li><input disabled="" type="checkbox"> 每周做适量运动，想去跑马拉松(不行就买个健身环玩玩😉😉)</li><li><input disabled="" type="checkbox"> 不能再多了，在写就做不完了</li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 关于我 </tag>
            
            <tag> 随笔 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>散文集《我在人间凑数的日子》</title>
      <link href="/articles/2019/12/17/1576553542302.html"/>
      <url>/articles/2019/12/17/1576553542302.html</url>
      
        <content type="html"><![CDATA[<h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><ul><li>以下内容皆节选自散文集–《我在人间凑数的日子》</li><li>作者：全体皮皮虾APP网友</li><li>如有侵权，联系删除</li></ul><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><ul><li>关于你，时间会证明我曾经的付出，是多么可笑</li><li>小时候真傻，老是，盼着长大</li><li>我对世间唯一不满的是，它总是让更懂事的人，承受更多</li><li>溢出来的爱，就像水一样廉价</li><li>花言巧语是猎物，支支吾吾是喜欢</li><li>算命先生说，我是一只苍鹰，前途无量，后来才发现我听错了，算命先生说的是苍蝇</li><li>我善良一生，从未做过任何坏事，可人间疾苦一样没有放过我</li><li>世人慌慌张张，不过是图碎银几两</li><li>我遗憾的是，从未拥有过一个女孩的青春</li><li>寂寞如你我，一阵哆嗦后还是路人</li><li>咸鱼翻身还是咸鱼，蚂蚁再强，也只是蚂蚁</li><li>光阴惨淡淡，人无再少年</li><li>你和她约定共度年华，可偏偏你却一人白了头发</li><li>所有能够言语之苦，终究可以缓缓消除</li><li>读书时偷的懒， 要用一辈子来还</li><li>等你音信全无，我再去爱这世间万物</li><li>身上的伤是勋章，心上的伤是成长</li><li>鱼和熊掌不可兼得，唯独穷和单身可以</li><li>爷爷没有数个战火，父亲没有输给贫穷，我却输给了和平年代的生活与爱情，以及太过自由</li><li>我不记得小时候的梦想了，但绝对不是买一套房子</li><li>感觉什么都不缺，却又好像什么都没有</li><li>自己卫视的深情，一厢情愿的热情</li><li>老说找不到理想的另一半，问问自己，成为理想中的自己了吗</li><li>世界很美好，能让两个毫无关系的人走到一起，世界也很残酷，硬生生让两个相爱额人再没有未来</li><li>活着，就是一个接着一个的妥协</li><li>嫉妒使我面目全非，暗恋让我卑微入骨</li><li>自幼以为会有一番作为，衣锦还乡，现在想想，只希望父母在家安好</li><li>有些事只适合烂在心里，无声无息的忘记</li><li>我到底经历了什么，才能收起暴躁的脾气和骄傲</li><li>逢人不必言深，孤独本是常态</li><li>我不求名不求利，只希望在这个物欲横流的世界，太阳能晒黑我母亲的头发</li><li>磨灭你性格的不是现实，让你妥协的也不是生活，归根结底是，懒</li><li>如果快乐太难，那就，祝你一生平安</li><li>街头的狗，午时最凶，我有幸跟他们抢过食</li><li>如果没有这段话，你都不会知道，这人间我来过</li><li>小时候觉得世间的东西都很美好，后来长大了，发现很多东西都归财神爷掌管</li><li>我知道， 我一生终究会有人爱我的，但我好像失去了爱一个人的能力</li><li>她说民谣太穷了，一听就是一根烟，一听就是一瓶酒</li><li>那天风很大，她的笑很美，我想我一辈子都不会忘怀吧</li><li>多年以后才发现，这么些年，一直在帮助别人养媳妇儿</li><li>到底是过了一年，还是过了365个一天？</li><li>故事不长，也不难讲，相识一场，爱而不得</li><li>你说我不求上进，可你，没看到我低三下四的样子</li><li>上天还是善良的，他也是善良的，只是要了我半条命</li><li>我每天都在笑，你猜我过得好不好</li><li>你所在的城市下雨了，很想问你，有没有带伞</li><li>到了小时候羡慕的年纪，却没有成为小时候，羡慕的人</li><li>比起失去你，我更害怕别人拥有你</li><li>他们都想把我推向深渊，只是他们不知道，我就来自那里</li><li>无需找什么理由，一无所有，就是拼的理由</li><li>错过了她，遇见谁都没有感觉</li><li>外面好冷，我想回家</li><li>明明是你先招惹的我，为什么最后放不下的，却是我</li><li>和好容易，如初难</li><li>我对你，始于脸红，终于眼红</li><li>失而复得，就是重蹈覆辙</li><li>骨气不等于尊严，不能为了尊严，连你都不要了</li><li>心若没有栖息的地方，到哪里都是流浪</li><li>他们说海最干净透明，我想那是他们没见过你的眼睛</li><li>最怕一生碌碌无为，却还说着，平凡可贵</li><li>生活不止眼前的苟且，还有前任的喜帖</li><li>来到你喜欢的花店，花店的还在开，我，还在继续爱</li><li>就在刚刚，我对我的影子说了声，辛苦了，对不起</li><li>后来我们都走出了这段感情，你靠的是新欢，我靠的是时间</li><li>终于长到能与父亲碰杯的年纪，却没能成为他的骄傲</li><li>后来才发现，那并不是属于我的花，我只是途径她的绽放</li><li>曾经以为贫穷是指饥饿，衣不附体，现在才懂得，它是孤独与无人问津</li><li>散伙是人间常态，我们又不是什么例外</li><li>一直想做一个特别的人，现在我做到了，我特别的无助，特别的难过</li><li>有时候也挺佩服自己，能咽下一肚子的话语心酸</li><li>条条大路通罗马，可有的人就出生在罗马</li><li>曾经有一个女孩追我，被我拒绝了，我没房没车，她不懂事，但我得懂</li><li>所谓眉间的故事，不是喜欢就是辜负</li><li>后来我发现这世界真的很大，没有刻意见面，这辈子可能就再也见不到了</li><li>成熟，就是看以前的自己像个笨蛋</li><li>自你走后，好像不开心了很多年，原来不开心也可以成为习惯</li><li>回了趟故乡，故乡的气候一直没变，只是我却像个旅人</li><li>请不要用那微不足道的成绩，来对我指指点点，因为我不配</li><li>生活真的挺好的，每天都有不同的难过</li><li>可惜我相貌平平、一事无成，惊艳不了谁的岁月，温暖不了谁的人生</li><li>一个人就已经伤痕累累了，就别再来一人痛不欲生了</li><li>最后你会慢慢懂得，你只是她感情空虚时的替代品，偶尔会表现的特别爱你</li><li>我曾想一世荣华，最后却四海为家</li><li>那夜我喝醉了，突然发现，你比花生还下酒</li><li>做人不要低声下气，因为你父亲，曾把你高高举起</li><li>我寻思着理想这东西没啥用，所以一个月两千就卖给了生活</li><li>这个世界是公平的，就像我，虽然挣得少， 但是我干的多啊</li><li>早知道现在的生活是这个样子，20年前那场游泳比赛，就不该拿第一</li><li>时常有人羡慕我这样的自由，我笑着笑着便哭了</li><li>我们来一次世上不容易，所以她说，她想过的好一点</li><li>我也有诗和远方，可是我的诗很烂，远方很暗</li><li>生活，就是生下来，活下去</li><li>我有喜欢的人了，可是无人作证，又无人知晓</li><li>年轻不懂得爱情与友情，长大后才懂得爱情是那么不容易，尤其是那么的脆弱</li><li>生活从来都是这样，不把我放在眼里</li><li>你羡慕的生活背后，都是你熬不起的苦</li><li>自己都是满身灰暗，还总是想给别人一些光</li><li>不要假装努力，因为结果不会陪你演戏，行动在于自己，未来依旧可期</li><li>微笑并不代表快乐，那只是一种表情</li><li> 你试图以离开引起别人的注意，却不知道你是真的离开了，并没有任何人记住你</li><li>小时候总觉得要做什么样的人，绝不能像某些人一样，长大后，却成了当初最讨厌的人</li><li>大事办不了，小事不爱办</li><li>很多道理我都懂，结果我能想到也只能接受，但是，我就是难受</li><li>好看的皮囊你玩不起，有趣的灵魂看不上你</li><li>遗憾的是，到最后我们连一张合影都没有</li><li>我讨厌无边的猜忌与怀疑，觉得人与人之间要多一点信任，直到有一天，我把它们当成了兴趣</li><li>她向你倾诉着寂寞，你却以为那是爱情</li><li>未完待续</li></ul>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019年11月6日晨记</title>
      <link href="/articles/2019/11/06/1572999448123.html"/>
      <url>/articles/2019/11/06/1572999448123.html</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;不知怎的，最近空闲时间总会无意识的想起与她的种种，我笑称这是大脑提示我删除这些内容，其实这不过是自己骗自己罢了，至少在今早之前，我把自己骗住了，不知不觉分手已经悄然过去了一个多月，我一直认为自己是洒脱的，自己是对于这种种早已看开，然而事实好像并非如此，我只是把她封印在心中那最深最深的地方，我一直不敢去触碰而已。</p><p>&emsp;&emsp;可能我最近的一系列操作刺激了封印中的内容，让其开始挣扎着蹦出封印，对我的大脑进行狂轰乱炸，让毫无准备的我始料未及。如白唯所说，后知后觉才是真的痛，我大概真的是后知后觉吧。这一切都源于那个梦，那个不能遗忘的梦。</p><p>&emsp;&emsp;清晨睡眠效果最好的一个阶段，我的梦中突然浮现出一部手机，手机上展示着QQ空间的界面，具体内容是她的一条说说，如是说道：我与他嬉戏，他逗我，我亦逗他，最后我们一起。。。由于是梦，所以内容记得不是很清楚，但是字里行间无处不透露着她的欣喜，说说下面是各种祝福的声音。多么美好的一段画面啊，多么刺眼，我反复的看了一次又一次，直到内容越来越模糊，直到我扛不住醒了过来。梦的内容记得虚虚实实，但是梦中所感受到的心痛确是让我久久不能忘怀，回忆起来依旧那么痛。</p><p>&emsp;&emsp;无数人劝我，过段时间就好了，我何尝不懂，直到此刻我才明白，有些人，有些事是永远不能忘怀的，你所谓的忘记不过是自己骗自己而已，自己给自己找一个不去回忆的接口，不管你是否去回忆，它都在那里，在那里成为你青春的遗憾。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> 情感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 关于我 </tag>
            
            <tag> 随笔 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《许三观卖血记》阅读笔记</title>
      <link href="/articles/2019/10/31/1572508975114.html"/>
      <url>/articles/2019/10/31/1572508975114.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&emsp;&emsp;浮躁的9月与10月读了很多书，但是大多读一半就弃掉了，或是一些具有时代背景且富有深意的书，心浮气躁下的我无法解读其中之深意，只得草草收场。倒是最近读的这篇《许三观卖血记》指的一记。</p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>&emsp;&emsp;许三观通过卖血，将自己支离破碎的家庭一次又一次的拉回正轨，作者为我们塑造了一个平凡而不平庸的人。许三观可以说是很惨的，幼年时父亲离世，母亲跟着别人跑了，所以一直与爷爷和四叔生活在一起，到后来成家后不得不通过一次又一次的卖血去迈过生活的坎。在好奇与引导下进行了第一次卖血，然后通过卖血的钱成了家；第二次因为自己的儿子一乐打伤了方铁匠的儿子而无力偿还医药费时去卖了血；而后出于对自己出轨对象林芬芳的愧疚有了第三次卖血；因为自然灾害，想让全家人去胜利饭店去吃面而进行了第四次卖血；儿子一乐下乡插队因病回家；为了儿子补身体和提供一些日常开销的钱进行了第五次卖血；为了款待二乐下乡插队的生产队长进行了第六次卖血；第七次也是最漫长，最艰辛的一次，甚至差点死在路上，一乐查出肝炎，为了给儿子治病，不得不一路上卖血前往上海；最后一次卖血发生在许三观老年，因为自己想吃炒猪肝和喝黄酒而却医院卖血，但最终医院没有收他的血。</p><p>&emsp;&emsp;许三观不过是一个小人物，是那个年代一个最典型的普通人物，但是这并不影响他的伟大。在那个时代背景下欣然接受不是自己亲生儿子一乐，原谅出轨的妻子。许三观也是很聪明的一个人，几句话和一天的时间就将心系何小勇的许玉兰娶回家中，文化大革命时期给妻子送饭，对于妻子的保护，无一不显示出他的聪明。文中在得知了一乐不是自己的儿子后对于一乐的区别对待也属于人之常情，可以随着时间的发展，许三观却对这个不是自己亲生的儿子的却是最好的，文中对于一乐的描写也是最多的。文中的许三观是一个有责任心有担当的人！一个有情有义的人！一个合格的丈夫！一个优秀的父亲！</p><p>&emsp;&emsp;文章的最后，三个儿子都有了自己的生活，自己也到了颐养天年的年纪，许三观却在想吃一盘炒猪肝，喝二两黄酒的情况下想去再去卖血，可是最后血头却不在收他的血，这个时候他崩溃了，毕竟他这一生所有的坎都是靠自己卖血度过的，在得知自己的血不在能卖钱后，他惶恐，害怕家里在遇到灾难时自己该如何度过，不能卖血的他不能再为这个家遮风避雨，所以他崩溃了，也是文中他第一次崩溃，哪怕之前遇到的情况在糟糕，他也没有这样崩溃过，这也从侧面描写出，此时他的生活已经变得很好了，不会再遇到之前的那一道又一道的坎。</p>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日刷leetcode--简单版（六）</title>
      <link href="/leetcode6.html"/>
      <url>/leetcode6.html</url>
      
        <content type="html"><![CDATA[<h3 id="返回总目录"><a href="#返回总目录" class="headerlink" title="返回总目录"></a>返回总目录</h3><p><a href="https://inkdp.cn/leetcode.html">日刷leetcode–简单版</a></p><hr><h3 id="167-两数之和-II-输入有序数组"><a href="#167-两数之和-II-输入有序数组" class="headerlink" title="167. 两数之和 II - 输入有序数组"></a>167. 两数之和 II - 输入有序数组</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-56cb3cb1.png" alt="image.png"></p><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>定义双指针，分别在头部与尾部</li><li>判断两个的和是否与<code>targent</code>相等，相等级返回，比sum大则尾指针前移，反之头指针后移<h5 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(numbers []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">l, r := <span class="number">0</span>, <span class="built_in">len</span>(numbers)<span class="number">-1</span></span><br><span class="line"><span class="keyword">for</span> l &lt; r &#123;</span><br><span class="line">sum := numbers[l] + numbers[r]</span><br><span class="line"><span class="keyword">if</span> sum == target &#123;</span><br><span class="line"><span class="keyword">return</span> []<span class="keyword">int</span>&#123;l + <span class="number">1</span>, r + <span class="number">1</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> sum &lt; target &#123;</span><br><span class="line">l++</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">r--</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> []<span class="keyword">int</span>&#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h5><blockquote><p>执行用时 :4 ms, 在所有 Golang 提交中击败了97.30%的用户<br>内存消耗 :3 MB, 在所有 Golang 提交中击败了68.38%的用户</p></blockquote></li></ul><h3 id="168-Excel表列名称"><a href="#168-Excel表列名称" class="headerlink" title="168. Excel表列名称"></a>168. Excel表列名称</h3><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-6f5a1e22.png" alt="image.png"></p><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li><p>可以看做一个10进制转26进制问题，进制转换原理可查看-&gt; <a href="https://zhuanlan.zhihu.com/p/75006709">理解进制转换的原理</a></p><h5 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h5></li><li><p>时间复杂度：O(1)</p></li><li><p>空间复杂度：O(1)</p><h5 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">func convertToTitle(n int) string&#123;</span><br><span class="line">var str string</span><br><span class="line">for n &gt; 0 &#123;</span><br><span class="line">n -- &#x2F;&#x2F; 减去一个,因为A是对应的是1,而不是0</span><br><span class="line">str &#x3D; string(&#39;A&#39; + int32(n%26)) + str</span><br><span class="line">n&#x2F;&#x3D;26</span><br><span class="line">&#125;</span><br><span class="line">return str</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Navicat Premium for Mac 破解教程</title>
      <link href="/articles/2019/10/24/1571890488789.html"/>
      <url>/articles/2019/10/24/1571890488789.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本教程破解的版本为Navicat Premium 12.1.27，理论上支持12.0.24~最新版，所以在你开始破解时请确认你的版本</p><h2 id="下载并安装"><a href="#下载并安装" class="headerlink" title="下载并安装"></a>下载并安装</h2><p>进入<a href="https://www.navicat.com.cn/download/navicat-premium">Navicat Premium</a>，选中对应软件进行下载，安装就不多说了，整安装就可以了</p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><h3 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1. 安装依赖"></a>1. 安装依赖</h3><p>首先你的确认你安装了brew，没有的话就先去装一个吧，然后安装下列库  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">brew install openssl  </span><br><span class="line">brew install capstone  </span><br><span class="line">brew install keystone  </span><br><span class="line">brew install rapidjson  </span><br><span class="line">brew install libplist  </span><br></pre></td></tr></table></figure><h3 id="2-克隆项目"><a href="#2-克隆项目" class="headerlink" title="2. 克隆项目"></a>2. 克隆项目</h3><p>克隆Mac分支，并编译keygen和patcher</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone -b mac --single-branch https:&#x2F;&#x2F;github.com&#x2F;DoubleLabyrinth&#x2F;navicat-keygen.git</span><br><span class="line">cd navicat-keygen</span><br><span class="line">make all</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-605b5c43.png" alt="image.png"></p><p>编译成功后当前目录下的bin文件下回出现两个可执行文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls bin&#x2F;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-6e4f4f06.png" alt="image.png"></p><h3 id="3-备份"><a href="#3-备份" class="headerlink" title="3. 备份"></a>3. 备份</h3><ul><li>备份好<code>Navicat Premium.app/Contents/MacOS/Navicat Premium </code>，防止翻车(不怕翻车可跳过)</li><li>备份好Navicat中所有已保存的数据库连接(包括密码)，我没备份(可跳过）</li><li>移除所有Navicat在钥匙链中保持的密码，可通过搜索<code>navacat</code>来找到他们<br> <img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-b4f15694.png" alt="image.png"></li></ul><h3 id="4-使用navicat-patcher替换公钥："><a href="#4-使用navicat-patcher替换公钥：" class="headerlink" title="4. 使用navicat-patcher替换公钥："></a>4. 使用navicat-patcher替换公钥：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Usage:</span><br><span class="line"> navicat-patcher &lt;Navicat installation path&gt; [RSA-2048 Private Key File]</span><br><span class="line"></span><br><span class="line">     &lt;Navicat installation path&gt;    Path to &#96;Navicat Premium.app&#96;.</span><br><span class="line">                                    Example:</span><br><span class="line">                                        &#x2F;Applications&#x2F;Navicat\ Premium.app&#x2F;</span><br><span class="line">                                    This parameter must be specified.</span><br><span class="line"></span><br><span class="line">     [RSA-2048 Private Key File]    Path to a PEM-format RSA-2048 private key file.</span><br><span class="line">                                    This parameter is optional.</span><br></pre></td></tr></table></figure><ul><li><code>Navicat installation path</code> ：<code>Navicat Premium.app</code>的路径，必填</li><li><code>RSA-2048 Private Key File</code>：PEM格式的RSA-2048的私钥路径，可选，不填会在当前目录下生成一个新的RSA-2047密钥文件<code>RegPrivateKey.pem</code></li></ul><p>默认如下：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;navicat-patcher &#x2F;Applications&#x2F;Navicat\ Premium.app&#x2F;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-27449b40.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-5c6f876b.png" alt="image.png"></p><h3 id="5-生成一份自动签名-的代码签名证书"><a href="#5-生成一份自动签名-的代码签名证书" class="headerlink" title="5. 生成一份自动签名 的代码签名证书"></a>5. 生成一份自动签名 的代码签名证书</h3><ul><li><p>打开钥匙串访问</p></li><li><p>选择创建证书</p></li><li><p>输入名称”Navicat”，身份类型，证书类型</p></li><li><p>点击创建</p><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-99b4f449.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-8b2aa128.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-ea68d143.png" alt="image.png"></p></li></ul><h3 id="6-签名"><a href="#6-签名" class="headerlink" title="6. 签名"></a>6. 签名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">codesign -f -s &quot;Navicat&quot; &#x2F;Applications&#x2F;Navicat\ Premium.app&#x2F;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-c224bb16.png" alt="image.png"></p><h2 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h2><h3 id="1-使用navicat-keygen生成序列号和激活码"><a href="#1-使用navicat-keygen生成序列号和激活码" class="headerlink" title="1. 使用navicat-keygen生成序列号和激活码"></a>1. 使用<code>navicat-keygen</code>生成序列号和激活码</h3><pre><code>Usage:   navicat-keygen &lt;RSA-2048 Private Key File&gt;   &lt;RSA-2048 Private Key File&gt;    Path to a PEM-format RSA-2048 private key file.   This parameter must be specified.  </code></pre><ul><li><code>RSA-2048 Private Key File</code>，PEM格式的RSA-2048密钥文件路径，既上文中提到的<code>RegPrivateKey.pem</code>  </li></ul><p>默认如下：  </p><pre><code>./navicat-keygen ./RegPrivateKey.pem  </code></pre><p>输入语言以及主版本号后会得到一个序列号<br><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-acf9356f.png" alt="image.png"><br>使用这个序列号来激活Navicat<br>接下来会要求你输入用户名以及组织名，随意填写即可<br>之后你会被要求填入请求码<br><strong>请不要关闭注册机！</strong><br><strong>请不要关闭注册机！</strong><br><strong>请不要关闭注册机！</strong></p><h3 id="2-断网并启动Navicat-premium完成激活"><a href="#2-断网并启动Navicat-premium完成激活" class="headerlink" title="2. 断网并启动Navicat premium完成激活"></a>2. 断网并启动Navicat premium完成激活</h3><ul><li>启动时点击注册</li><li>在注册页面输入注册机给你的序列号，点击激活</li></ul><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-0aa226c9.png" alt="image.png"></p><ul><li>一般都会激活失败，这时点击手动激活即可</li></ul><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-81692bde.png" alt="image.png"></p><ul><li>手动激活的窗口会给到你一个请求码，复制并粘贴到注册机里面，<strong>两次回车结束输入</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-eaa0ba85.png" alt="image.png"></p><ul><li>不出意外的话，你会得到一个激活码，复制它并粘贴到navicat的手动激活窗口<br><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-0b68abdb.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-e8dfb932.png" alt="image.png"></li><li>最后点击激活，没出问题的话就激活成功了<br><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-d3b2e298.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-50a37e9d.png" alt="image.png"></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/DoubleLabyrinth/navicat-keygen/blob/mac/README.zh-CN.md">Navicat Keygen</a></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>由于删除了钥匙串的密码，所以原有连接里的密码可能需要重新输入</p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 破解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迟来的9月总结</title>
      <link href="/articles/2019/10/13/1570960015377.html"/>
      <url>/articles/2019/10/13/1570960015377.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇文章本来预计在国庆是完成的，因为自己拖延症导致等一系列问题导致现在才完成。</p><h2 id="悲催9月"><a href="#悲催9月" class="headerlink" title="悲催9月"></a>悲催9月</h2><p>9月本该是一个美好的月份，夏走秋至，秋高气爽(虽然这些我都感觉不到，广州依旧很热)，但是我的9月似乎不是那么美好。似乎我好运到头，一瞬间跌入谷底，9月的我相继失去了爱情和事业，还因为虚荣心作祟，让自己负债累累，说9月后的我一无所有一点也不为过，我算是体验了一把跌入谷底的感觉。依稀记得《一人之下》中有这样一句话：“当你最倒霉的时候啊，一定要抗住了，别丧气，因为啊 那正是你运气该上升的时候了”，我虽是一个很悲观的人，但是我不是一个绝望的人，一切的一切都还充满着希望，我还可以利用国庆小长假去放松一下。</p><h2 id="国庆长假"><a href="#国庆长假" class="headerlink" title="国庆长假"></a>国庆长假</h2><p>原本计划的国庆出游因为自己的不理性消费导致取消，但也还是在外面玩了3天，大佬(姑姑)家玩了两天，老爸哪儿玩了一天，国庆的最后几天就窝在家里与游戏为伍，极其颓废，感觉自己似废物一般，但也还是接着丧着，就这样迷迷糊糊过玩过国庆，我也算是从9月的阴影中走了出来。</p><h2 id="思于后"><a href="#思于后" class="headerlink" title="思于后"></a>思于后</h2><p>刚刚分手与失业失感触其实还蛮多的，可到了现在似乎一切都淡忘了，我就是这样一个健忘的人，我奶奶教育我“多回忆开心的事，少琢磨让你难受的事”，这点我做到了。国庆假日结束后，我开始了重新找工作的步伐，10月算是一个不太好找工作的日期，外加上应届生的身份，以及上一份工作未能转正的种种原因，我已经预料到自己这找工作之路的艰难。第一周过去，我不记得我投了多少份简历，但是最终能去现场面试的仅仅只有三家，万幸的是3家全部拿到了offer。</p><h3 id="爱情"><a href="#爱情" class="headerlink" title="爱情"></a>爱情</h3><p><a href="https://www.jinjianh.com/articles/2019/09/21/1569077915744.html">一边两宽，各生欢喜</a></p><p>如今这件事一过去大半个月，还是会不时的想起，回忆这段感情快乐与悲伤。我想我下次见到她，对她说得第一句话大概是谢谢，很感谢她出现在我最叛逆的年龄，她的出现真的教会了我很多东西，让我成长了很多很多，但是不合适就是不合适，强行把两个人捆在一起真的只会让大家都生活的痛苦，还不如放过彼此。</p><p>回忆这段感情中我的所作所为，我应该算是一个非常不合格的男友了吧，这段感情她付出的明显比我要多得多，对她的关心总是少了那么一点，每件事发展到最后都变成了对她的伤害，而起先我的原意并不是那样的，我总是在事后为自己找这样那样的借口，似乎所有一切都变得理应当。</p><h3 id="事业"><a href="#事业" class="headerlink" title="事业"></a>事业</h3><p>无法转正这个结果，其实我心底是有准备的，特别是在张转正后，我猜想到自己可能会有80%的可能无法转正，所以在被通知无法转正时我也没用惊慌失措的感觉，因为一切都在预料之中。回忆三个月的工作经历，感觉只有第一个月的我对得起老板发的工资，再感受一下自己的工作状态，我似乎成了一个混吃等死的老白兔，我有些想念那个在激情满满的我，似乎从大二那场实习后，我就一直处于这样一个状态，我希望自己能够找回到处的状态。</p><p>说回上家公司，实习三个月，我似乎有大概3个星期以上是没有在工作的，这三个星期再加上一些零零碎碎的大概就有一个月了吧，也就是说实习的3个月我有1/3不是在为公司产生利益，这么一想不给我转正似乎也是无可厚非的。这些余下来的时间虽不是我故意去逃避工作，但是我也还是有我没有作对的地方，我没有将这些时间由于提升自己，去熟悉公司的业务，划了一些非技术的水。是我自己的不争取让自己再公司变成了一个可有可无的人，下一份工作在闲时，希望自己能够去主动争取更多的事情来做，早日成为公司中不可替代的一份子。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>明天就要到新公司入职了，公司虽是创业公司，但是通过去面试时的感受发现整个氛围要比上一家公司好，希望十月的我是幸运的。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GO实现一个单链表</title>
      <link href="/articles/2019/09/26/1569488898577.html"/>
      <url>/articles/2019/09/26/1569488898577.html</url>
      
        <content type="html"><![CDATA[<h1 id="不多BB，直接上代码，有关链表定义，请自行百度"><a href="#不多BB，直接上代码，有关链表定义，请自行百度" class="headerlink" title="不多BB，直接上代码，有关链表定义，请自行百度"></a>不多BB，直接上代码，有关链表定义，请自行百度</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ListNode <span class="keyword">struct</span> &#123;</span><br><span class="line">Val  <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">Next *ListNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">()</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;ListNode&#123;<span class="literal">nil</span>, <span class="literal">nil</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历输出</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(head *ListNode)</span> <span class="title">Traverse</span><span class="params">()</span></span> &#123;</span><br><span class="line">point := head</span><br><span class="line">fmt.Println(<span class="string">&quot;--------start----------&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> <span class="literal">nil</span> != point &#123;</span><br><span class="line">fmt.Println(point.Val)</span><br><span class="line">point = point.Next</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;--------end----------&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(head *ListNode)</span> <span class="title">Insert</span><span class="params">(val <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">p := head</span><br><span class="line"><span class="keyword">for</span> p.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">p = p.Next <span class="comment">// 位移至尾节点</span></span><br><span class="line">&#125;</span><br><span class="line">s := &amp;ListNode&#123;Val: val&#125;</span><br><span class="line">p.Next = s</span><br><span class="line"><span class="keyword">if</span> p.Val == <span class="literal">nil</span> &#123; <span class="comment">// 插入时发现首节点为空时前移</span></span><br><span class="line">p.Val = p.Next.Val</span><br><span class="line">p.Next = p.Next.Next</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">linkedList := New()</span><br><span class="line">linkedList.Insert(<span class="number">1</span>)</span><br><span class="line">linkedList.Insert(<span class="number">2</span>)</span><br><span class="line">linkedList.Traverse()</span><br><span class="line"><span class="comment">// --------start----------</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// --------end----------</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go面试总结</title>
      <link href="/articles/2019/09/25/1569402355322.html"/>
      <url>/articles/2019/09/25/1569402355322.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>俗话说得好，打铁还需自身硬，面对面试官的各种套路，刁钻复杂的各种问题，只有自身实力足够强硬，才能从容不迫的对答如流。<br>此贴意在总结自身面试中遇到的各种问题，让自己面试前能够得到复习，可以抱抱佛脚。</p><h2 id="Go-基础"><a href="#Go-基础" class="headerlink" title="Go 基础"></a>Go 基础</h2><p>基础部分有部分为包的一下基础东西，自行查阅文档或谷歌</p><ol><li><p>sync<br>参考<a href="https://deepzz.com/post/Golang-sync-package-usage.html">浅谈 Golang sync 包的相关使用方法</a></p></li><li><p>channel</p></li><li><p>goroutine</p></li><li><p>reflect<br>答：当时答不上来，依稀记得公司大佬说过，反射性能不好，随口答曰，影响性能很少用它?</p></li><li><p>并发通道安全</p></li><li><p>go支持类的重载吗？<br>答：不支持<br>6.1. 如果我需要的话可以实现吗？<br>答：可以用接口实现（具体实现方式百度）</p></li><li><p>interface</p></li><li><p>包名/目录名之间的关系<br>答：姑且总结为一下几点：</p><ul><li>import导入的是路径而不是包名</li><li>一个文件夹下只能有一个package</li><li>尽量让目录名与包名一致(非强制）</li><li>代码中使用包时，引用的是包名称而非目录</li><li>一个包所有的文件，必须位于同一个目录下</li></ul></li><li><p>字符串拼接的方式（延升问题，性能比较）<br>答：使用运算符、fmt.Sprintf()、strings.Join()、buffer.WriteString()。执行效率如下图（理论上最后一个应该是最快的，不知道是不是我测试用例的原因）<br><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-b6c8f4f0.png" alt="image.png"></p></li><li><p>GC，何时回收，如何手动回收等</p></li><li><p>并非时如何防止公共变量污染问题</p><p>答：锁或者通道</p></li></ol><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><ol><li><p>MySQL 事务隔离级别<br>了解隔离级别前先了解脏读、不可重复读、幻读这三个概念</p><ul><li>脏读：一个事物读取到了另外一个事物未提交更新的数据，事物 A 更新了数据，但未提交，事物 B 读取到了这个更新数据，由于某些原因事物 A 回滚了，而此时事物 B 读取到的是事物 A 未提交的更新数据，此为脏读</li><li>不可重复读：在一个事务中多次查询统一数据的到的结果不一致，事物 A 中多次读取数据’a’,在此过程中事物 B 更新并提交数据’a’,导致事物 A 多次读取的数据’a’不一致，此为不可重复读。可重复读与之相反，即多次读取到的都是同意数据，事物 B 更新并提交后的数据’a’读取不到。</li><li>幻读：在一个事物中使用同样的查询语句查询出来的结果不一致(这里的结果不一致体现在结果集个数，而非数据内容不同，数据内容不同为不可重复读)，事物 A 中多次使用同一查询条件查询数据，在此过程中，事物 B 插入了若干条符合事物 A 中查询条件的数据，事物 A 后续查询突然多出若干条数据，此为幻读</li><li>小结：不可重复读的和幻读很容易混淆，不可重复读侧<strong>重于修改</strong>，幻读侧重于<strong>新增或删除</strong></li></ul><table><thead><tr><th align="left">隔离级别</th><th align="center">脏读</th><th align="center">不可重复读</th><th align="center">幻读</th></tr></thead><tbody><tr><td align="left">读未提交(read-uncommitted)</td><td align="center">✓</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="left">不可重复读(read-committed)</td><td align="center">×</td><td align="center">✓</td><td align="center">✓</td></tr><tr><td align="left">可重复读(repeatable-read)</td><td align="center">×</td><td align="center">×</td><td align="center">✓</td></tr><tr><td align="left">串行化(serializable)</td><td align="center">×</td><td align="center">×</td><td align="center">×</td></tr></tbody></table></li><li><p>索引失效场景</p><ul><li>列类型是字符串，查询条件未加引号</li><li>未使用索引列作为查询条件</li><li>使用了比较操作符 LIKE 和 REGEXP，搜索模板的第一个字符是通配符</li><li>在查询条件中使用 OR，如果想要 OR 时索引生效，需要将所有 OR 中每个列都加上索引</li><li>对索引列进行运算</li><li>查询条件里有不等于号</li><li>查询条件里使用了函数</li><li>在 JOIN 操作中（需要从多个数据表提取数据时），MySQL 只有在主键和外键的数据类型相同时才能使用索引，否则即使建立了索引也不会使用</li><li>在 ORDER BY 操作中，MySQL 只有在排序条件不是一个查询条件表达式的情况下才使用索引。尽管如此，在涉及多个数据表的查询里，即使有索引可用，那些索引在加快 ORDER BY 操作方面也没什么作用</li><li>如果 MySQL 估计使用全表扫描要比使用索引快</li><li>…</li></ul></li><li><p>MySQL存储引擎的区别与比较</p><ul><li>MyISAM：有较高的插入、查询速度，但<strong>不支持事务</strong></li><li>InnoDB：事务型数据库的首选引擎，支持事务安全表（ACID），支持<strong>行锁定</strong>和<strong>外键，InnoDB是默认的MySQL引擎</strong></li></ul></li><li><p>Delete，drop与trunkcate的区别</p><ul><li>delete和truncate操作只删除表中数据，而不删除表结构；delete删除时对于自增类型的字段，值不会从1开始，truncate可以实现删除数据后，自增类型字段从1开始。drop语句将删除表的结构被依赖的约束(constraint)，触发器(trigger)，索引(index)；依赖于该报的存储过程/函数将会保留，但是会变成invalid状态。</li><li>属于不同类型的操作，delete属于DML，这个操作会发放到rollback segement中，事务提交后才能生效；如果有相应的trigger，执行的时候将被触发。drop与truncate属于DDL，操作立即生效，原数据不会放到rollback segement中，不能回滚，操作是不触发trigger。</li><li>delete语句不影响表所占用的extent，高水线(high watermark)保持原位置不动。显然drop语句将所占用的空间全部释放，truncate语句缺省情况下把空间释放到minextents个extent，除非使用reuse storage；truncate会将高水位线复位(回到最开始)</li><li>执行速度，drop &gt; truncate &gt; delete</li><li>安全性：小心使用drop和truncate，尤其是没有备份的时候</li><li>完全删除表[drop]，想保留表而删除所有数据且与事务无关[truncate]，如果和事务有关，或者想触发trigger[delete]</li></ul></li></ol><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><ol><li><pre><code class="go">func reverseList(head *ListNode) *ListNode &#123; if head == nil || head.Next == nil &#123;     return head &#125; var prev *ListNode p := head for p != nil &#123;     p.Next, prev, p = prev, p, p.Next &#125; return prev&#125;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">2. time，string，regexp，goroutine</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;go</span><br><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;regexp&quot;</span><br><span class="line">&quot;strings&quot;</span><br><span class="line">&quot;time&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">&#x2F;&#x2F; 第一题</span><br><span class="line">from, _ :&#x3D; time.ParseInLocation(&quot;2006-01-02 15:04:05&quot;, &quot;2019-09-27 00:00:00&quot;, time.Local)</span><br><span class="line">fmt.Println(sumDiffTime(time.Now(), from))</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 第二题</span><br><span class="line">vars :&#x3D; make(map[string]string)</span><br><span class="line">vars[&quot;name&quot;] &#x3D; &quot;小狮子&quot;</span><br><span class="line">vars[&quot;age&quot;] &#x3D; &quot;18&quot;</span><br><span class="line">fmt.Println(printTemplate(vars))</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 第三题：并发答应1-10，要求顺序输出</span><br><span class="line">gogogo()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type TimeDiff struct &#123;</span><br><span class="line">Days    int64</span><br><span class="line">Hours   int64</span><br><span class="line">Minutes int64</span><br><span class="line">Ms      int64</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; sumDiffTime 需要实现以下方法：传入两个不同的时间，计算出两个时间的间隔时间</span><br><span class="line"></span><br><span class="line">func sumDiffTime(from time.Time, to time.Time) TimeDiff &#123;</span><br><span class="line">diff :&#x3D; from.Unix() - to.Unix()</span><br><span class="line">Days :&#x3D; diff &#x2F; 60 &#x2F; 60 &#x2F; 24</span><br><span class="line">diff &#x3D; diff - 60*60*24*Days</span><br><span class="line"></span><br><span class="line">Hours :&#x3D; diff &#x2F; 60 &#x2F; 60</span><br><span class="line">diff &#x3D; diff - 60*60*Hours</span><br><span class="line">Minutes :&#x3D; diff &#x2F; 60</span><br><span class="line">diff &#x3D; diff - 60*Minutes</span><br><span class="line">return TimeDiff&#123;</span><br><span class="line">Days:    Days,</span><br><span class="line">Hours:   Hours,</span><br><span class="line">Minutes: Minutes,</span><br><span class="line">Ms:      diff,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 需要将str转换为指定字符串:⼩狮⼦今年18岁了,不要⽤字符串拼接</span><br><span class="line">func printTemplate(vars map[string]string) string &#123;</span><br><span class="line">tp :&#x3D; &quot;&#123;name&#125;今年&#123;age&#125;岁了&quot;</span><br><span class="line">str :&#x3D; &quot;&quot;</span><br><span class="line"></span><br><span class="line">reg :&#x3D; regexp.MustCompile(&#96;&#123;([a-z]+)&#125;&#96;)     &#x2F;&#x2F; 创建匹配&#123;name&#125;&#x2F;&#123;age&#125;的正则</span><br><span class="line">params :&#x3D; reg.FindAllStringSubmatch(tp, -1) &#x2F;&#x2F; [[&#123;name&#125; name] [&#123;age&#125; age]]</span><br><span class="line">&#x2F;&#x2F; 替换</span><br><span class="line">str &#x3D; strings.Replace(tp, params[0][0], vars[params[0][1]], 1)</span><br><span class="line">str &#x3D; strings.Replace(str, params[1][0], vars[params[1][1]], 1)</span><br><span class="line"></span><br><span class="line">return str</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 并发打印1-10，并按顺序打印</span><br><span class="line">func gogogo() &#123;</span><br><span class="line">for i :&#x3D; 0; i &lt; 10; i++ &#123;</span><br><span class="line">ch :&#x3D; make(chan int)</span><br><span class="line">go func(ch chan int) &#123;</span><br><span class="line">fmt.Println(&lt;-ch)</span><br><span class="line">&#125;(ch)</span><br><span class="line">ch &lt;- i</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(2 * time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>时间复杂度计算方式</p></li></ol><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><ol><li>Docker swarm<br><a href="https://yeasy.gitbooks.io/docker_practice/swarm_mode/overview.html">https://yeasy.gitbooks.io/docker_practice/swarm_mode/overview.html</a></li><li>Docker machine<br><a href="https://www.cnblogs.com/sparkdev/p/7044950.html">https://www.cnblogs.com/sparkdev/p/7044950.html</a></li></ol><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><ol><li>进程管理</li><li>netstat的使用</li></ol><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><ol><li>讲讲你对Redis的理解</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> docker </tag>
            
            <tag> Golang </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一别两宽，各生欢喜</title>
      <link href="/articles/2019/09/21/1569077915744.html"/>
      <url>/articles/2019/09/21/1569077915744.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/100-20210107000806574.jpeg" alt="一别两宽，各生欢喜"></p><p>&emsp;&emsp;我们的感情有一次定格住了，忘记了这是第几次了，对于这件事我已然麻木</p><p>&emsp;&emsp;不知道该以什么样的心情写下这篇文章，满满的负能量，从成都离开后我就知道会有这一刻，我不知道我是在等待这一刻发生还是说在恐惧这一刻，不管是什么心情，这一刻终究还是来了，如我预料的那般，我们再一次分手了，原因不想细谈，无论对错，对于她我只有亏欠。</p><p>&emsp;&emsp;四年零八个月的日子，我们总是聚少离多，四年的大学，我们异地了三年，本以为熬过大学一切就会好起来，但是并没有朝着我希望的那样发展。大学毕业你去了新疆，我来到了广州，我们间的距离几乎横跨整个中国，四年里我们遇到了种种，也跨过了种种，但最后还是惨淡收尾。这一次的我显得从容不迫，没有往次她提出分手时的慌乱与难受，可能是习惯了吧，习惯了与她分手。这四年多感谢有你，因为你我变得更加优秀。</p><p>&emsp;&emsp;虽然这四年我们经历了无数次的分分合合，但是这一次似乎不一样，这次的我们似乎真的走到了尽头。</p><p>&emsp;&emsp;生活还得继续，不会因为谁的离去而停下脚步，那些没能配你到终点的，终究是过客，祝你我都好。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> 情感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 总结 </tag>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闲言碎语</title>
      <link href="/articles/2019/09/19/1568902818001.html"/>
      <url>/articles/2019/09/19/1568902818001.html</url>
      
        <content type="html"><![CDATA[<p>依稀记得某位长辈说我没有生气死气沉沉的，年纪轻轻就驼着背，整体唉声叹气的。后来我反思了一下，驼背大概是习惯养成，似乎能够慢慢改过来，现在时不时的也会下意识的直起腰杆；唉声叹气不知道是什么时候养成的习惯，记得因为这个被奶奶说过很多次，好像这个习惯已经有了七八年了，似乎很难改正，遇到困境下意识的就开始唉声叹气，也许那一声声叹气能够缓解我心中之烦闷；死气沉沉的我实在是想不通，因为身边的朋友大多说我比较开朗，没心没肺，我是那种自己躺床上就会莫名其妙笑起来的人，所以我很是不理解为何我会看起来死气沉沉，难道是因为我驼着背，唉声叹气，至今无解。</p><p>我不算一个优秀的人，但是也相对独立，似乎从十岁开始，我的一切事情都由我自己做主，可能因为我比较犟，所以我说往东，基本没人能让我往西，这也让我吃了不少亏，后来慢慢的做一些决定开始顾东顾西，渐渐优容寡断。虽说如此，但我还是靠着自己做的一个又一个决定在慢慢向前。</p><p>有那么一段时间，整个世界是灰暗无光的，因为从小的希望在那一年破灭，那时的我还没意识到破灭，因为那时的我真的没心没肺，爷爷奶奶无微不至的关心也让我对于那些基本无暇顾及。灰暗的源头是两三年后的暑假，那个暑假改变了我，我的一切的一切发生了翻天覆地的变化，不变得还是爷爷奶奶，这个世界上最好的人就是他们了吧。我不愿意去相信当时的一切，所以我把希望寄托在另外一边，可是当时我听到从电话里传来的一声声哭泣，当我情绪爆炸希望能将心中一切苦楚托盘而出时换来的确是，你这么大个人了该如何如何了，我开始明白我在那年开始就已经是一个人，其实我早就是一个人了，依稀记得那晚网吧空调温度正好适宜，那晚我状态爆棚，连续carry队友。</p><p>灰暗的日子随着那个女孩的到来，我的生活开始多姿多彩，我开始有一个极度叛逆的孩子变得开始懂事，还记得那个寒假奶奶总是笑嘻嘻的，说我懂事了，知道心疼她了。是她教会了我孝顺，教会了很多很多，她弥补了我心中那份空缺。然而好景不长，从小的溺爱让我觉得一切都是理所应当，让我不知道反哺，分居两地的矛盾种种让我们开始一次又一次的争吵，但是我们却一直坚持着，哪怕我们都伤害着对方。</p><p>一个晴朗的下午，昨晚熬夜看剧的我睡到中午才起，赖床一番后去到老妈加吃饭已经是下午的1点过后，坐在凳子上等待外婆做饭的空隙，我们有了这样的对话：“我们分手吧”，“好”，我不再是死缠烂打，怨天尤人，我想我选择了最对，最好的决定。午饭是外婆煮的面条，不知是太久没吃面条还是怎的，面条吃起来很香。安装以往的经验，我会找一个耍的好的朋友，坑他一顿烧烤，再喝上不多不少的酒，借着酒劲给她打电话，开始胡搅蛮缠，死缠烂打，然后第二天去找她。可惜我身在广州，无法完成上述一系列事情，既然决定放手那就算了吧，也是时候面对这些问题了。可是我还是想找个人倾诉一下，做事从来不问我爸妈的我这次想着主动与他们沟通下一，寻求一下父母的关怀。但是出于种种原因，我最终没有选择这样做，或许是不想给他们添麻烦，易或许是习惯了没有他们。</p><p>工作上由于老大跑路，导致一系列东西直接爆炸，这家在一开始看起来前程似锦的公司突然变得有些日暮途穷的感觉，但是生活还得继续，就先坐着吧，跳槽频繁已经开始成为一大障碍，所以就算再难我也要试着在这里扎上一段时间。工作的不顺心，感情的失败，赚取之路的断裂，对家乡的思念让我甚至想回外郎放牛，逃离这一切的一切，可是我不是傻逼，我知道这样不行，所以一切需要慢慢的努力，我无数次跌倒过，这次的我一定可以再次站起来。</p><p>我们总喜欢回忆过去，后悔做过的一些事<br>要是当时这样就好了，要是当时那样就好了<br>然而过去之所以是过去，就是因为回不去了<br>回不了的是过去，到不了的是未来<br>而我们拥有的就只有现在<br>过去就让他在回忆中慢慢变成完美吧~</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 关于我 </tag>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日刷leetcode--简单版（五）</title>
      <link href="/leetcode5.html"/>
      <url>/leetcode5.html</url>
      
        <content type="html"><![CDATA[<h3 id="返回总目录"><a href="#返回总目录" class="headerlink" title="返回总目录"></a>返回总目录</h3><p><a href="https://inkdp.cn/leetcode.html">日刷leetcode–简单版</a></p><hr><h3 id="119-杨辉三角-II"><a href="#119-杨辉三角-II" class="headerlink" title="119. 杨辉三角 II"></a>119. 杨辉三角 II</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-991e2526.png" alt="image.png"></p><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>此题与118类似，直接冲118中返回最后一个数组即可，但是要优化到O(k)就显得不是那么容易了</li><li>公式:<img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-570d44cb.png" alt="image.png"></li><li>简单的来说就是前面的数乘以一个分数,这个分数从左到右分别为n/1, (n-1)/2, …, 2/(n-1), 1/n，比如第3行就是分别乘以3/1，2/2，1/3</li><li>这里要注意的是[1]是第0行，而非第一行</li></ul><h5 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getRow</span><span class="params">(rowIndex <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    arr := <span class="built_in">make</span>([]<span class="keyword">int</span>,rowIndex+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> rowIndex == <span class="number">0</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    &#125;</span><br><span class="line">    arr[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i:= <span class="number">1</span>; i &lt;= rowIndex; i++ &#123;</span><br><span class="line">        arr[i] = arr[i<span class="number">-1</span>] * (rowIndex-i+<span class="number">1</span>)/i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h5><blockquote><p>执行用时 :0 ms, 在所有 Go 提交中击败了100.00%的用户<br>内存消耗 :2 MB, 在所有 Go 提交中击败了90.24%的用户</p></blockquote><h3 id="121-买卖股票的最佳时机"><a href="#121-买卖股票的最佳时机" class="headerlink" title="121. 买卖股票的最佳时机"></a>121. 买卖股票的最佳时机</h3><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-4ef0e447.png" alt="image.png"></p><h4 id="解题思路1"><a href="#解题思路1" class="headerlink" title="解题思路1"></a>解题思路1</h4><ul><li>双循环，对于每组 i 和 j（其中 j &gt; i）我们需要找出 max(prices[j] - prices[i])</li></ul><h5 id="示例代码（无）"><a href="#示例代码（无）" class="headerlink" title="示例代码（无）"></a>示例代码（无）</h5><h4 id="解题思路二"><a href="#解题思路二" class="headerlink" title="解题思路二"></a>解题思路二</h4><ul><li>循环一次，分别记录最小买入与最大利润即可</li></ul><h5 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxProfit</span><span class="params">(prices []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    maxPrices, min := <span class="number">0</span>, math.MaxUint32</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(prices); i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> prices[i] &lt; min &#123;</span><br><span class="line">            min = prices[i] <span class="comment">// 最小买入</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> prices[i] - min &gt; maxPrices &#123;</span><br><span class="line">            maxPrices = prices[i] - min  <span class="comment">// 最大利润</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxPrices</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h5><blockquote><p>执行用时 :4 ms, 在所有 Go 提交中击败了98.17%的用户<br>内存消耗 :3.1 MB, 在所有 Go 提交中击败了80.77%的用户</p></blockquote><h3 id="122-买卖股票的最佳时机-II"><a href="#122-买卖股票的最佳时机-II" class="headerlink" title="122. 买卖股票的最佳时机 II"></a>122. 买卖股票的最佳时机 II</h3><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-936d9087.png" alt="image.png"></p><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>此题与121不同，121只需求出一段最高与最低即可，而此题需要求出多段</li><li>所谓利润，就是卖出比买入高，这就是利润，在此题中所映射出来的就是 <code>prices[i+1] &gt; prices[i]</code>，这里我们假设今日卖出后，可在今日购买，这样一有利润我们就记录，这样就可以求出最高利润</li><li>举个栗子，比如数组是[1,2,5]，那么第一次判断发现 <code>2&gt;1</code>，所以我们立即卖出得到利润 <code>2-1=1</code>，第二天判断 <code>5&gt;2</code>，得到利润 <code>5-2=3</code>，所以总利润为 <code>1+3=4</code>;再举一个栗子[1,2,5,4,7]，这里我们可以得到 <code>2&gt;1,5&gt;2,7&gt;4</code>,分别相减后相加得到总利润为 <code>7</code></li></ul><h5 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxProfit1</span><span class="params">(prices []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    max := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(prices) - <span class="number">1</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> prices[i] &lt; prices[i+<span class="number">1</span>] &#123;</span><br><span class="line">            max += prices[i+<span class="number">1</span>] - prices[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果"></a>运行结果</h5><blockquote><p>执行用时 :0 ms, 在所有 Go 提交中击败了100.00%的用户<br>内存消耗 :3.1 MB, 在所有 Go 提交中击败了66.38%的用户</p></blockquote><h3 id="125-验证回文串"><a href="#125-验证回文串" class="headerlink" title="125. 验证回文串"></a>125. 验证回文串</h3><h4 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-e7e16206.png" alt="image.png"></p><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>一次循环，分别指定头指针与为指针，遇到非字母与数字则跳过</li><li>可在判断是否相同时进行大小写转换，也可在一开始就统一大小写</li></ul><h5 id="示例代码-3"><a href="#示例代码-3" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPalindrome</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i, j := <span class="number">0</span>, <span class="built_in">len</span>(s)<span class="number">-1</span>; i &lt; j; &#123;</span><br><span class="line">        <span class="keyword">for</span> (s[i] &lt; <span class="number">48</span> ||  (s[i] &gt; <span class="number">57</span> &amp;&amp; s[i]&lt; <span class="number">65</span>)  || (s[i] &lt; <span class="number">97</span> &amp;&amp; s[i] &gt; <span class="number">90</span>) || s[i] &gt; <span class="number">122</span>) &amp;&amp; i&lt;j &#123;</span><br><span class="line">            i++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (s[j] &lt; <span class="number">48</span> ||  (s[j] &gt; <span class="number">57</span> &amp;&amp; s[j]&lt; <span class="number">65</span>)  || (s[j] &lt; <span class="number">97</span> &amp;&amp; s[j] &gt; <span class="number">90</span>) || s[j] &gt; <span class="number">122</span>)  &amp;&amp; i&lt;j &#123;</span><br><span class="line">            j--</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ToUpper(s[i]) != ToUpper(s[j]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        i++</span><br><span class="line">        j--</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ToUpper</span><span class="params">(ascii <span class="keyword">uint8</span>)</span> <span class="title">uint8</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ascii &gt;<span class="number">96</span> &amp;&amp; ascii &lt;= <span class="number">122</span> &#123;</span><br><span class="line">        ascii-=<span class="number">32</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ascii</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行结果-3"><a href="#运行结果-3" class="headerlink" title="运行结果"></a>运行结果</h5><blockquote><p>执行用时 :0 ms, 在所有 Go 提交中击败了100.00%的用户<br>内存消耗 :2.7 MB, 在所有 Go 提交中击败了93.51%的用户</p></blockquote><h3 id="136-只出现一次的数字"><a href="#136-只出现一次的数字" class="headerlink" title="136. 只出现一次的数字"></a>136. 只出现一次的数字</h3><h4 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-ddc62dfc.png" alt="image.png"></p><h4 id="解题思路1-1"><a href="#解题思路1-1" class="headerlink" title="解题思路1"></a>解题思路1</h4><ul><li>哈希表遍历，取出只出现一次的即可</li></ul><h5 id="示例代码-4"><a href="#示例代码-4" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">singleNumber</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    list := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>, <span class="built_in">len</span>(nums))</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line">        list[nums[i]] ++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> k,v := <span class="keyword">range</span> list &#123;</span><br><span class="line">        <span class="keyword">if</span> v == <span class="number">1</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> k</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行结果-4"><a href="#运行结果-4" class="headerlink" title="运行结果"></a>运行结果</h5><blockquote><p>执行用时 :12 ms, 在所有 Go 提交中击败了93.55%的用户<br>内存消耗 :5.9 MB, 在所有 Go 提交中击败了14.34%的用户</p></blockquote><h4 id="解题思路2"><a href="#解题思路2" class="headerlink" title="解题思路2"></a>解题思路2</h4><ul><li>^作二元运算符就是异或，相同为0，不相同为1</li><li>解释一下异或，<code>1^1=0</code>,<code>0^2=2</code></li></ul><h5 id="示例代码-5"><a href="#示例代码-5" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">singleNumbers</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    a := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _,v :=<span class="keyword">range</span> nums &#123;</span><br><span class="line">        a ^= v</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行结果-5"><a href="#运行结果-5" class="headerlink" title="运行结果"></a>运行结果</h5><blockquote><p>执行用时 :4 ms, 在所有 Go 提交中击败了100.00%的用户<br>内存消耗 :4.8 MB, 在所有 Go 提交中击败了90.31%的用户</p></blockquote><h3 id="141-环形链表"><a href="#141-环形链表" class="headerlink" title="141. 环形链表"></a>141. 环形链表</h3><h4 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-2fe4d07f.png" alt="image.png"></p><h4 id="生成环链表"><a href="#生成环链表" class="headerlink" title="生成环链表"></a>生成环链表</h4><p>根据<a href="https://www.jinjianh.com/articles/2019/09/26/1569488898577.html">GO实现一个单链表</a>，添加如下代码即可实现环列表</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(head *ListNode)</span> <span class="title">CreateCycle</span><span class="params">(pos <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    p := head</span><br><span class="line">    i := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> head.Next != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> i == pos &#123;</span><br><span class="line">            p = head</span><br><span class="line">        &#125;</span><br><span class="line">        head = head.Next</span><br><span class="line">        i++</span><br><span class="line">    &#125;</span><br><span class="line">    head.Next = p</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解题思路–哈希"><a href="#解题思路–哈希" class="headerlink" title="解题思路–哈希"></a>解题思路–哈希</h4><ul><li>题目本身并不难，但是把这个题目看懂颇费心思</li><li>如示例1所示，遍历其生成的链表为 <code>3 -&gt; 2 -&gt; 0 -&gt; -4 -&gt; 2 -&gt; 0 -&gt; ....</code></li><li>遍历单链表，如果当前节点为尾结点，这表示此链表不是环列表。如果当前节点存在哈希表中，这返回true,不存在则添加至哈希表中</li><li>时间复杂度O(n)，空间复杂度O(n)</li></ul><h5 id="示例代码-6"><a href="#示例代码-6" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hasCycle</span><span class="params">(head *ListNode)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    nodes := <span class="built_in">make</span>(<span class="keyword">map</span>[*ListNode]<span class="keyword">int</span>)</span><br><span class="line">    <span class="keyword">for</span> head != <span class="literal">nil</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> _,ok := nodes[head]; ok&#123;</span><br><span class="line">            <span class="keyword">return</span>  <span class="literal">true</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            nodes[head] = head.Val</span><br><span class="line">        &#125;</span><br><span class="line">        head = head.Next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行结果-6"><a href="#运行结果-6" class="headerlink" title="运行结果"></a>运行结果</h5><blockquote><p>执行用时 :8 ms, 在所有 Go 提交中击败了93.39%的用户<br>内存消耗 :6.1 MB, 在所有 Go 提交中击败了5.40%的用户</p></blockquote><h4 id="解题思路–双指针"><a href="#解题思路–双指针" class="headerlink" title="解题思路–双指针"></a>解题思路–双指针</h4><ul><li>快慢指针同时遍历，当快指针指向链表尾部表示为非环链表</li><li>当快指针追上慢指针则表示当前为环链表</li><li>如同两个运动员赛跑，跑的快的运动员超过慢的运动员一圈的时候就可以判断他们跑的是环形跑道，如果跑的快的直接冲线了，那么他就不是环形跑道。</li><li>时间复杂度O(n)，空间复杂度O(n)</li></ul><h5 id="示例代码-7"><a href="#示例代码-7" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hasCycle</span><span class="params">(head *ListNode)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> head == <span class="literal">nil</span> || head.Next == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    slow := head</span><br><span class="line">    fast := head.Next</span><br><span class="line">    <span class="keyword">for</span> slow != fast &#123;</span><br><span class="line">        <span class="keyword">if</span> fast == <span class="literal">nil</span> || fast.Next == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        slow = slow.Next</span><br><span class="line">        fast = fast.Next.Next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行结果-7"><a href="#运行结果-7" class="headerlink" title="运行结果"></a>运行结果</h5><blockquote><p>执行用时 :8 ms, 在所有 Go 提交中击败了93.39%的用户<br>内存消耗 :3.8 MB, 在所有 Go 提交中击败了91.11%的用户</p></blockquote><h3 id="160-相交联表"><a href="#160-相交联表" class="headerlink" title="160. 相交联表"></a>160. 相交联表</h3><h4 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-4c11d1e2.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-9370deab.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-9faf6e7e.png" alt="image.png"></p><h4 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>思路有三种，暴力，哈希，和双指针，暴力和哈希比较简单，我采用了双指针的方式</li><li>指针 pA 指向 A 链表，指针 pB 指向 B 链表，依次往后遍历</li><li>如果 pA 到了末尾，则 pA = headB 继续遍历</li><li>如果 pB 到了末尾，则 pB = headA 继续遍历</li><li>因为指针A是先跑完headA然后跑headB，指针B与之相反，所以他们最后一段路一定是携手共进，这时判断他们是否相等就可以了</li><li>图解如下<br><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/e86e947c8b87ac723b9c858cd3834f9a93bcc6c5e884e41117ab803d205ef662-%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8.png" alt="相交链表.png"></li></ul><h5 id="示例代码-8"><a href="#示例代码-8" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">func getIntersectionNode(headA, headB *ListNode) *ListNode &#123;</span><br><span class="line">if headA &#x3D;&#x3D; nil || headB &#x3D;&#x3D; nil &#123;</span><br><span class="line">return nil</span><br><span class="line">&#125;</span><br><span class="line">Pa, Pb :&#x3D; headA,headB</span><br><span class="line">for Pa !&#x3D; Pb &#123;</span><br><span class="line">if Pa &#x3D;&#x3D; nil &#123;</span><br><span class="line">Pa &#x3D; headB</span><br><span class="line">continue</span><br><span class="line">&#125;</span><br><span class="line">if Pb &#x3D;&#x3D; nil &#123;</span><br><span class="line">Pb &#x3D; headA</span><br><span class="line">&#125;</span><br><span class="line">Pa &#x3D; Pa.Next</span><br><span class="line">Pb &#x3D; Pb.Next</span><br><span class="line">&#125;</span><br><span class="line">return Pa</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行结果-8"><a href="#运行结果-8" class="headerlink" title="运行结果"></a>运行结果</h5><blockquote><p>执行用时 :44 ms, 在所有 Golang 提交中击败了99.33%的用户<br>内存消耗 :7.9 MB, 在所有 Golang 提交中击败了5.53%的用户</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日刷leetcode--简单版（四）</title>
      <link href="/leetcode4.html"/>
      <url>/leetcode4.html</url>
      
        <content type="html"><![CDATA[<h3 id="返回总目录"><a href="#返回总目录" class="headerlink" title="返回总目录"></a>返回总目录</h3><p><a href="https://inkdp.cn/leetcode.html">日刷leetcode–简单版</a></p><hr><h3 id="88-合并两个有序数组"><a href="#88-合并两个有序数组" class="headerlink" title="88. 合并两个有序数组"></a>88. 合并两个有序数组</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-85be80cb.png" alt="image.png"></p><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>采用双指针，从前往后，如果nums2中当前值小于nums1中的值，这插入并后移</li></ul><h5 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">merge</span><span class="params">(nums1 []<span class="keyword">int</span>, m <span class="keyword">int</span>, nums2 []<span class="keyword">int</span>, n <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> nums1</span><br><span class="line">&#125;</span><br><span class="line">i, j := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> ; i &lt; <span class="built_in">len</span>(nums1) &amp;&amp; j &lt; n; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> nums1[i] &gt; nums2[j] &#123;</span><br><span class="line">reverses(nums1[i:])</span><br><span class="line">nums1[i] = nums2[j]</span><br><span class="line">j++</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> j &lt; n &#123;</span><br><span class="line">nums1[m+j] = nums2[j]</span><br><span class="line">j++</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> nums1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverses</span><span class="params">(nums []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="built_in">len</span>(nums) - <span class="number">1</span>; i &gt; <span class="number">0</span>; i-- &#123;</span><br><span class="line">nums[i] = nums[i<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h5><blockquote><p>执行用时 :4 ms, 在所有 Go 提交中击败了73.14%的用户<br>内存消耗 :3.6 MB, 在所有 Go 提交中击败了84.42%的用户</p></blockquote><h3 id="100-相同的树"><a href="#100-相同的树" class="headerlink" title="100. 相同的树"></a>100. 相同的树</h3><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-00f58922.png" alt="image.png"></p><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>有两中情况下可直接返回<ol><li>p与q同时为空时为<code>True</code></li><li>p或q只有一个为空时<code>False</code></li></ol></li><li>p与q同时不为空是，判断其Val，同时递归判断两个的Left与Right</li></ul><h5 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isSameTree</span><span class="params">(p *TreeNode, q *TreeNode)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> p == <span class="literal">nil</span> &amp;&amp; q == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> p != <span class="literal">nil</span> &amp;&amp; q != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> p.Val != q.Val &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> isSameTree(p.Left, q.Left) &amp;&amp; isSameTree(p.Right, q.Right)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h5><blockquote><p>执行用时 :0 ms, 在所有 Go 提交中击败了100.00%的用户<br>内存消耗 :2.1 MB, 在所有 Go 提交中击败了87.07%的用户</p></blockquote><h3 id="101-对称二叉树"><a href="#101-对称二叉树" class="headerlink" title="101. 对称二叉树"></a>101. 对称二叉树</h3><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-3af0001a.png" alt="image.png"></p><h4 id="解题思路–递归"><a href="#解题思路–递归" class="headerlink" title="解题思路–递归"></a>解题思路–递归</h4><ul><li>这道题与上一题很像，上一题是要求树完全相等，此题是要求对称</li><li>两树相等时为<code>Left == Left</code>,<code>Right == Right</code>，而对称则是<code>Left == Right</code>，<code>Right == Left</code></li></ul><h5 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isSymmetric</span><span class="params">(root *TreeNode)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> isLeftRight(root.Left, root.Right)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isLeftRight</span><span class="params">(L *TreeNode, R *TreeNode)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> L == <span class="literal">nil</span> &amp;&amp; R == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> L == <span class="literal">nil</span> || R == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> L.Val != R.Val&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> isLeftRight(L.Left, R.Right) &amp;&amp; isLeftRight(L.Right, R.Left)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果"></a>运行结果</h5><blockquote><p>执行用时 :0 ms, 在所有 Go 提交中击败了100.00%的用户<br>内存消耗 :3 MB, 在所有 Go 提交中击败了60.14%的用户</p></blockquote><h4 id="解题思路–迭代"><a href="#解题思路–迭代" class="headerlink" title="解题思路–迭代"></a>解题思路–迭代</h4><ul><li>迭代我也不是很懂，就摘抄了一个，配合注释看一看</li></ul><h5 id="示例代码-3"><a href="#示例代码-3" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isSymmetric</span><span class="params">(root *TreeNode)</span> <span class="title">bool</span></span> &#123; <span class="comment">// 迭代方法，bfs</span></span><br><span class="line">L := []*TreeNode&#123;&#125;       <span class="comment">// 从左向右遍历顺序的队列</span></span><br><span class="line">R := []*TreeNode&#123;&#125;       <span class="comment">// 从右向左遍历顺序的队列</span></span><br><span class="line">L = <span class="built_in">append</span>(L, root)     <span class="comment">// 加入初始节点</span></span><br><span class="line">R = <span class="built_in">append</span>(R, root)</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">len</span>(L)!=<span class="number">0</span> &amp;&amp; <span class="built_in">len</span>(R)!=<span class="number">0</span> &#123;   <span class="comment">// bfs</span></span><br><span class="line">Lv,rv := L[<span class="number">0</span>], R[<span class="number">0</span>]    <span class="comment">// 不同遍历顺序的队列，队首出队</span></span><br><span class="line">L, R = L[<span class="number">1</span>:], R[<span class="number">1</span>:]      <span class="comment">// 删除队首元素</span></span><br><span class="line"><span class="keyword">if</span> Lv==<span class="literal">nil</span> &amp;&amp; rv==<span class="literal">nil</span> &#123;  <span class="comment">// 空节点，不添加节点</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> Lv!=<span class="literal">nil</span> &amp;&amp; rv!=<span class="literal">nil</span> &amp;&amp; Lv.Val == rv.Val &#123;    <span class="comment">// 比较两种遍历顺序的出队节点，如果相同，继续搜索</span></span><br><span class="line">L = <span class="built_in">append</span>(L, Lv.Left, Lv.Right)</span><br><span class="line">R = <span class="built_in">append</span>(R, rv.Right, rv.Left)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;                     <span class="comment">// 如果不同，证明不是镜像二叉树</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(L)==<span class="number">0</span> &amp;&amp; <span class="built_in">len</span>(R)==<span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行结果-3"><a href="#运行结果-3" class="headerlink" title="运行结果"></a>运行结果</h5><blockquote><p>执行用时 :0 ms, 在所有 Go 提交中击败了100.00%的用户<br>内存消耗 :3.2 MB, 在所有 Go 提交中击败了5.80%的用户</p></blockquote><h3 id="104-二叉树的最大深度"><a href="#104-二叉树的最大深度" class="headerlink" title="104. 二叉树的最大深度"></a>104. 二叉树的最大深度</h3><h4 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-59a22901.png" alt="image.png"></p><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>使用递归查看当前值是否为空，为空则返回0，接受到递归返回的0就加1</li><li>毕竟树的左右，看那边更大，返回大的一边。<h5 id="示例代码-4"><a href="#示例代码-4" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxDepth</span><span class="params">(root *TreeNode)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    Ll := maxDepth(root.Left) + <span class="number">1</span></span><br><span class="line">    Lr := maxDepth(root.Right) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> Ll &gt; Lr &#123;</span><br><span class="line">        <span class="keyword">return</span> Ll</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Lr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行结果-4"><a href="#运行结果-4" class="headerlink" title="运行结果"></a>运行结果</h5><blockquote><p>执行用时 :8 ms, 在所有 Go 提交中击败了79.37%的用户<br>内存消耗 :4.4 MB, 在所有 Go 提交中击败了61.74%的用户</p></blockquote></li></ul><h3 id="107-二叉树的层次遍历-II"><a href="#107-二叉树的层次遍历-II" class="headerlink" title="107. 二叉树的层次遍历 II"></a>107. 二叉树的层次遍历 II</h3><h4 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-28e94e96.png" alt="image.png"></p><h4 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>看下面代码注释<h5 id="示例代码-5"><a href="#示例代码-5" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">levelOrderBottom</span><span class="params">(root *TreeNode)</span> <span class="params">(res [][]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> node []*TreeNode</span><br><span class="line">    node = <span class="built_in">append</span>(node, root)</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(node) &gt; <span class="number">0</span> &#123; <span class="comment">// node不为0就一直循环</span></span><br><span class="line">        <span class="built_in">len</span> := <span class="built_in">len</span>(node)</span><br><span class="line">        <span class="keyword">var</span> tmp []<span class="keyword">int</span></span><br><span class="line">        <span class="keyword">for</span> i:= <span class="number">0</span>; i &lt; <span class="built_in">len</span>; i++ &#123;</span><br><span class="line">    <span class="comment">// 循环次数等于每一层的节点数，每次都取第一个node，因为下面会将第一个node删除</span></span><br><span class="line">            indexNode := node[<span class="number">0</span>]</span><br><span class="line">            node = node[<span class="number">1</span>:]  <span class="comment">// 将第一个node删除</span></span><br><span class="line">            tmp = <span class="built_in">append</span>(tmp, indexNode.Val) <span class="comment">// 记录节点值</span></span><br><span class="line">            <span class="keyword">if</span> indexNode.Left != <span class="literal">nil</span> &#123; <span class="comment">// 如果左子树不为空，将左子树添加node</span></span><br><span class="line">                node = <span class="built_in">append</span>(node, indexNode.Left)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> indexNode.Right != <span class="literal">nil</span> &#123; <span class="comment">// 如果右边树不为空，将右子树添加node</span></span><br><span class="line">                node = <span class="built_in">append</span>(node, indexNode.Right)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res = <span class="built_in">append</span>(res, tmp)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> res1 [][]<span class="keyword">int</span></span><br><span class="line">    <span class="keyword">for</span> i:= <span class="built_in">len</span>(res)<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">        res1 = <span class="built_in">append</span>(res1, res[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行结果-5"><a href="#运行结果-5" class="headerlink" title="运行结果"></a>运行结果</h5><blockquote><p>执行用时 :4 ms, 在所有 Go 提交中击败了85.64%的用户<br>内存消耗 :6 MB, 在所有 Go 提交中击败了87.36%的用户</p></blockquote></li></ul><p><strong>对树不是很了解，树相关题目后面再做</strong></p><h3 id="118-杨辉三角"><a href="#118-杨辉三角" class="headerlink" title="118. 杨辉三角"></a>118. 杨辉三角</h3><h4 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-84d3bce3.png" alt="image.png"></p><h4 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/PascalTriangleAnimated2-9958c3e5.gif" alt="PascalTriangleAnimated2.gif"></li></ul><h5 id="示例代码-6"><a href="#示例代码-6" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">generate</span><span class="params">(numRows <span class="keyword">int</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> arr [][]<span class="keyword">int</span></span><br><span class="line"><span class="keyword">if</span> numRows == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">arr = <span class="built_in">append</span>(arr, []<span class="keyword">int</span>&#123;<span class="number">1</span>&#125;)</span><br><span class="line"><span class="keyword">if</span> numRows == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; numRows; i++ &#123;</span><br><span class="line"><span class="keyword">var</span> row []<span class="keyword">int</span></span><br><span class="line">row = <span class="built_in">append</span>(row, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">1</span>; j &lt; i; j++ &#123;</span><br><span class="line">tmp := arr[i<span class="number">-1</span>][j<span class="number">-1</span>] + arr[i<span class="number">-1</span>][j]</span><br><span class="line">fmt.Println(tmp)</span><br><span class="line">row = <span class="built_in">append</span>(row, tmp)</span><br><span class="line">&#125;</span><br><span class="line">row = <span class="built_in">append</span>(row, <span class="number">1</span>)</span><br><span class="line">arr = <span class="built_in">append</span>(arr, row)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="运行结果-6"><a href="#运行结果-6" class="headerlink" title="运行结果"></a>运行结果</h5><blockquote><p>执行用时 :0 ms, 在所有 Go 提交中击败了100.00%的用户<br>内存消耗 :2.3 MB, 在所有 Go 提交中击败了47.54%的用户</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《我的前半生》阅读笔记</title>
      <link href="/articles/2019/08/31/1567227232395.html"/>
      <url>/articles/2019/08/31/1567227232395.html</url>
      
        <content type="html"><![CDATA[<p>  可能受篇幅影响，这是用Kindle看书以来，看的最快的一本，大概也就一两天的时间。篇幅虽小，但却丝毫不影响该书的质量。</p><p>  老实说，文章的开头给我的感觉并不是特别好，似乎一部言情小说的样子，“女主上来就被抛弃，然后成为职业女强人，遇到白马王子”这类书太多太多了，看完后发现写的还真就是这么回事。看完后我不由得佩服起作者来，与都市言情几乎同样的剧情路线在作者手中展示出了不一样的魅力。虽说是与都市言情一样的线路，但是剧情还是大有不同，有幸读过一两篇相关题材的书，名字早已忘记，但依稀记得书中女主都是青春靓丽的，年龄不过24左右，在嫁人之前就是商业精英之类的，被抛弃后直接走上人生巅峰的那种。讲道理，这种书YY起来是真的爽，这也就是都市爽文的卖点之一了。</p><p>  似乎略有偏题，讲回本书，感觉该书很适合女性去看一看，不论你是否是书中女主前半生那样的人，都适合去看一看。初被抛弃时，女主是无助的，绝望的，即将一无所有是多么绝望，所幸，女主是坚强的，那句“人要脸，树要皮。一个女人失去她的丈夫，已经是一最大的难堪与狼狈，我不能再出洋相”让我感受到女主身体最深处的倔强。离开丈夫的女主没有让人失望，从天真阔太转变为一位成功的职业女性，气质的申华，远比外在好很多，甚至前夫都觉得她年轻漂亮了许多。“人际关系这一门科学永远没有学成毕业的一日，每天都似投身于砂石中，缓缓磨动，皮破血流之余所积得的宝贵经验便是一般人口中的圆滑”，慢慢学会如何处理人际关系后与其妹妹关系也转好。或许女主本就不是愚笨的，如书中所说“我跟你讲过，做太太也不好做，你总不相信，我们在老板面前，何尝不是随他搓圆搓扁，丈夫要我笨，我只好笨”。“# 这世界像一个大马戏团子，班主名叫‘生活”，拿着皮鞭站在咱们背后使劲地抽打，逼咱们跳火圈、上刀山，你敢不去吗？皮鞭子响了，狠着劲咬紧牙关，也就上了”描绘出生活的不易。</p><p>  文章的最后，女主再一次找到了真爱，在飞机上结束了自己的前半生。</p><p>  后记，无意中发现还有电视剧，演员阵容大多都是我喜欢的，但是看了些剧情简介，似乎与此书大相径庭啊，瞬间就失去了兴趣。</p><p>  文笔太差，想到什么就写什么，文章反倒显得杂乱无章。</p>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《诸神的传说：希腊神话故事》读中笔记</title>
      <link href="/articles/2019/08/29/1567093295295.html"/>
      <url>/articles/2019/08/29/1567093295295.html</url>
      
        <content type="html"><![CDATA[<p>  一开始开始看这本书是打算了解一下希腊神话中的神是什么样的，虽然之前也通过一些视频文字等了解过一些，指导诸如宙斯、雅典娜、阿波罗、波塞冬等，但是没有系统的去了解过，抱着好奇的态度翻开了这本书。<br>  <br>  这本书目前翻了几页，现在大概看了10%左右，不打算看下去了。可能由于文化差异的问题，我理解不了希腊神话中某些神的做法。该书号称将希腊神话进行收罗，整理后得出的版本，是很经典的书籍。可是给我的感觉是整个书杂乱无章（不排除存在翻译的原因），还没之前读的儿童读物讲的清楚，再就是篇幅过小，我还来不及记住该文主角是谁，这一章就讲完了。</p><p>  虽然槽点很多，但是我还是挺喜欢希腊神话中的一些很经典的故事，比如奥德赛、木马计、塞壬的歌声等，可能该书的开头不是特别好，也可能是我带着主观意识去阅读导致的。但是目前不打算看了，毕竟时间有限，以后再看的话会更新该文章。</p>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客更名</title>
      <link href="/InkDP.html"/>
      <url>/InkDP.html</url>
      
        <content type="html"><![CDATA[<h1 id="域名已由https-www-jinjianh-com迁移至https-www-inkdp-cn"><a href="#域名已由https-www-jinjianh-com迁移至https-www-inkdp-cn" class="headerlink" title="域名已由https://www.jinjianh.com迁移至https://www.inkdp.cn"></a>域名已由<a href="https://www.jinjianh.com迁移至https//www.inkdp.cn">https://www.jinjianh.com迁移至https://www.inkdp.cn</a></h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>由于一系列原因，最主要的是突然被百度恶心到了，虽然之前也一直恶心着(PS:<a href="https://www.baidu.com/s?ie=UTF-8&wd=%E9%87%91%E6%88%8B">百度搜索-金戋</a>就知道了) ，但是突然我就受不了，所以决定更换ID</p><p>金戋(jinjian/jianjianh)  =&gt; 墨殇(InkDP)，墨殇诞生于:<a href="https://hacpai.com/">黑客派社区</a> – <a href="https://hacpai.com/article/1566807043243">悬赏一个新 ID</a></p><blockquote><p>墨殇是一种鸟，生在洛水之滨，墨殇百年一生。他们一旦起飞就不能停了，直到累的吐血才休息一会，继续往前飞。</p></blockquote><p>很喜欢墨殇的的寓意，虽然这两个字听起来很悲</p><h3 id="站点更换"><a href="#站点更换" class="headerlink" title="站点更换"></a>站点更换</h3><ul><li><p>博客名称:<a href="https://www.jinjianh.com/">金戋博客</a> =&gt; <a href="https://www.inkdp.cn/">墨殇的技术博客</a></p></li><li><p>github:<a href="https://github.com/jinjianh">金戋</a> =&gt;<a href="https://github.com/InkDP">墨殇</a></p></li><li><p>黑客派:<a href="https://hacpai.com/member/jinjianh">金戋</a> =&gt; <a href="https://hacpai.com/member/InkDP">墨殇</a></p></li></ul><h3 id="新的图标"><a href="#新的图标" class="headerlink" title="新的图标"></a>新的图标</h3><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/%E5%9C%86%E5%BA%95-4f20ebb2.png" alt="ååº.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 关于我 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《天才在左，疯子在右》章节摘录</title>
      <link href="/articles/2019/08/23/1566551996115.html"/>
      <url>/articles/2019/08/23/1566551996115.html</url>
      
        <content type="html"><![CDATA[<h1 id="女人的星球"><a href="#女人的星球" class="headerlink" title="女人的星球"></a>女人的星球</h1><p>我推门进来的时候，吓了他一大跳，还没等我看清，他人就躲到桌子底下去了，说实话我也被吓了一跳。</p><p>关上门后我把资料本子、录音笔放在桌上，并没直接坐下，而是蹲下看着他。我怕他在桌子底下咬我——有过先例。</p><p>他被吓坏了，缩在桌子下拼命哆嗦着，惊恐不安地四下看。</p><p>我：“出来吧，门我锁好了，没有女人。”</p><p>他只是摇头不说话。</p><p>我：“真的没有，我确定，你可以出来看一下，就看一眼，好吗？”</p><p>跟这个患者接触大约2个月了。他有焦虑+严重的恐惧症，还失眠，而恐惧的对象是女人。</p><p>他小心地探头看了下四周，谨慎地后退爬了出去，然后蹲坐在椅子上，紧紧地抱着自己双膝，惊魂未定地看着我。</p><p>我：“你看，没有女人吧。”</p><p>他：“你真的是男的？你脱了裤子我看看？”</p><p>我：“……我是男的，这点我可以确认。你忘了我了？”</p><p>他：“你还有什么证据？”</p><p>我：“我今天特地没刮脸，你可以看到啊，这个胡子是真的，不是粘上去的。你见过女人长胡子吗？就算汗毛重也不会重成我这样吧？”</p><p>他狐疑地盯着我的脸看了好一阵。</p><p>他：“上次她们派了个大胡子女人来骗我。”</p><p>我：“没有的，上次那个大胡子是你的主治医师，他可是地道的男人。”</p><p>他努力在想着。我观察着他，琢磨今天到底有没有交流的可能。</p><p>他：“嗯，好像是，你们俩都是男的……但是第一次那个不是。”</p><p>我：“对，那是女人，你没错。”</p><p>他：“现在她们化妆得越来越像了。”</p><p>我：“哪儿有那么多化妆成男人的啊。这些日子觉得好点没？”</p><p>他：“嗯，安全多了。”</p><p>我：“最近吃药顺利吗？”他曾经拒绝吃药，说那是女人给他的毒药，或者安眠药，等他睡了她们好害他。”</p><p>他：“嗯，就是吃了比较困，不过没别的事。”</p><p>我：“就是嘛，没事的，这里很安全。”</p><p>他：“你整天在外面小心点儿，小心那些女人憋着对你下手！”</p><p>我想了下，没觉得自己有什么值得女人那么鸡飞狗跳寻死觅活惦记的，于是问他为什么。</p><p>他：“她们早晚会征服这个地球的！”</p><p>我：“地球是不可能被征服的。”</p><p>他：“哦，她们会统治世界的。”</p><p>我：“为什么？”</p><p>他又疑神疑鬼地看着我，我也在好奇地看着他，因为从没听他说过这些。</p><p>他：“你居然没发现？”</p><p>我：“你发现了？”</p><p>他严肃地点了点头。</p><p>我：“你怎么发现的？”</p><p>他：“女人，跟我们不是一种动物。”</p><p>我：“那她们是什么？”</p><p>他：“我不知道，很可能是外星来的，因为她们进化得比我们完善。”</p><p>他好像镇定了一些。</p><p>我：“我想听听，有能证明的吗？”</p><p>他神秘地压低声音：“你知道DNA吗？”</p><p>我：“脱氧核糖核酸？知道啊！你想说什么？染色体的问题？”</p><p>他：“她们的秘密就在这里！”</p><p>我：“呃……什么秘密？染色体秘密？”</p><p>他：“没错！”</p><p>我：“到底是怎么回事？”</p><p>他：“人的DNA有23对染色体对不对？”</p><p>我：“对，46条。”</p><p>他依旧狐疑地看着我：“你知道多少？”</p><p>我：“男女前44条染色体都是遗传信息什么的，最后那一对染色体是性染色体，男的是X/Y，女人是X/X。这个怎么了？”</p><p>他严肃地看着我：“你们都太笨！这么简单的事都看不明白！”</p><p>我：“呃……我知道这个，但是不知道怎么有问题了……”</p><p>他：“男女差别不仅仅是这么简单的！男人的X/Y当中，X包含了两三千个基因，是活动频繁的，Y才包含了几十个基因，活动很小！明白了？”</p><p>我：“呃……不明白……这个不是秘密吧？你从哪儿知道的？”</p><p>他一脸恨铁不成钢的表情：“我原来去听过好多这种讲座。你们真是笨得没话说了，难怪女人要灭绝咱们！”</p><p>我实在想不出这里面有什么玄机。</p><p>他叹了口气：“女人最后两个染色体是不是X/X？”</p><p>我：“对啊，我刚才说了啊……”</p><p>他：“女人的那两个X都包含好几千个基因！而且都是活动频繁的，Y对X，几十对好几千！就凭这些，差别大了！女人比男人多了那么多信息基因！就是说女人进化得比男人高级多了！”</p><p>我：“但是大体的都一样啊？就那么一点儿……”</p><p>他有点儿愤怒：“你这个科盲！人和猩猩的基因相似度在99%以上，就是那不到1%导致了一个是人，一个是猩猩。男人比女人少那么点？还少啊！”</p><p>看着他冷笑我一时也没想好说什么。</p><p>他：“对女人来说，男人就像猩猩一样幼稚可笑。小看那一点儿基因信息？太愚昧！低等动物是永远不能了解高等动物的！女人是外星人，远远超过男人的外星人！”</p><p>我：“有那么夸张吗？”</p><p>他不屑地看着我：“你懂女人吗？”</p><p>我：“呃……不算懂……”</p><p>他：“但是女人懂你！她们天生就优秀得多，基因就比男人丰富。就是那些活动基因导致了完全不一样的结果！男人谁敢说了解女人？谁说谁就是胡说八道。我问你，从基因上看，是你高级还是宠物高级？”</p><p>我：“呃……我……”</p><p>我：“就是这样。你养的宠物怎么可能了解你？你吃饭它明白，你睡觉它明白，你看电影它就不见得明白了吧？你上网它就不理解了吧？你跟别人聊天它还是不明白吧？你看书它明白？不明白吧。你看球赛高兴了或者不高兴了它明白？它也不明白！它只能看到你的表面现象：你高兴了或者生气了。但是为什么，它永远不明白。”</p><p>我：“嗯……你别激动，坐下慢慢说。”</p><p>他：“你能看到女人喜欢这件衣服，为什么？因为好看。哪儿好看了？你明白吗？”</p><p>我：“嗯，有时候是这样……”</p><p>他：“女人生气了，你能看到她生气了，你知道为什么吗？你不知道……”</p><p>我：“经常是一些小事儿吧……”</p><p>他再度冷笑：“小事儿？你不懂她们的。你养的宠物打碎了你喜欢的杯子，你会生气，在宠物看来这没什么啊，有什么可气的？对不对？对不对！”</p><p>看着他站在椅子上我有点儿不安。</p><p>我：“你说的没错，先坐下来好不好？小心站那么高女人发现你了。”</p><p>他果然快速地坐了下来。</p><p>他：“没男人能了解女人的，女人的心思比男人多多了，女人早晚会统治这个世界，到时候男人可能会被留下一些种男，剩下的都杀掉。等科学更发达了，种男都不需要了，直接造出精子。可悲的男人啊，现在还以为在主导世界，其实快灭亡了，这个星球早晚是女人的……”</p><p>我：“可怜的男人……感情呢？不需要吗？”</p><p>他：“感情？那是为了繁衍的附加品。”</p><p>我：“我觉得你悲观了点儿……就算是真的，对你也没威胁的。”</p><p>他：“我悲观？我不站出来说明，我不站出来警告，你们会灭亡得更早！可惜我这样的人太少了。”</p><p>我：“是啊……我知道的只有你。”</p><p>他：“弗洛伊德，你知道吗？他也是和我一样，很早就发现了。”</p><p>我：“哎？不是吧？”</p><p>他：“弗洛伊德的临终遗言已经警告男人了。”</p><p>我：“他还说过这个？怎么警告的？”</p><p>他：“他死前警告所有男人，女人想要全世界！”</p><p>我已经起身在收拾东西了：“嗯，我大体上了解怎么回事了，过段时间我还会来看你的。”</p><p>他：“你不能声张，悄悄地传递消息，否则你也会很危险的。”</p><p>我：“好的，我记住了。”</p><p>我轻轻地关上了门。</p><p>几天后我问一个对遗传学了解比较多的朋友，有这种事儿吗？他说除了来自外星、干掉男人、征服世界那部分，基本属实。</p><p>不过，我们都觉得弗洛伊德那句临终遗言很有意思，虽然那只是个传闻。</p><p>“女人啊，你究竟想要什么？”</p>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《天才在左，疯子在右》阅读笔记</title>
      <link href="/articles/2019/08/23/1566551837849.html"/>
      <url>/articles/2019/08/23/1566551837849.html</url>
      
        <content type="html"><![CDATA[<p>  断断续续于今日上班的路上将这本书看完，虽然因为盗版书的原因有大概十章没有看，但也总算是看完了。</p><p>  作者以一个特殊的角度让我了解到了精神病人是什么样子的，书中描写的案例有各式各样的人，他们都有着各式各样的问题。老实说，看完之后对于精神病医生这个职业油然起敬，治疗好一个病人得需要多大的耐心和多缜密的思维逻辑，感觉这也是一个高危职业，书中有提到有不少医生变成了病人，甚至有些人选择了自杀。</p><p>  曾听说过“精神病与天才只有一墙之隔”，书中有很多不知道是天才还是精神病的人，他们大多逻辑缜密，而且在某些相关知识的理解也很到位，但是我无法判断他到底是不是疯了，就如同文中某位病人所说的那样，你回到唐朝去对当时的人讲现在的种种，他们也会觉得你疯了。当然书中也有很多是真的疯了，让我最诡异的就是那位认为自己已经死亡的病人，我无法想象出最后身体长出金属(依稀记得是铝丝)，这个似乎超出了我的认知。</p><p>  读完这本书感觉最大的收获莫过于书中提到最多的物理知识，算是对自己的一个科普，也同时进一步的了解了精神病人的世界是怎么样的。</p><p>  推荐我最喜欢的一个章节：<a href="https://inkdp.cn/articles/2019/08/23/1566551996115.html">女人的星球</a>，没有别的意思，只是单纯的喜欢这章</p>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新皮肤 solo-nexmoe</title>
      <link href="/articles/2019/08/23/1566468138289.html"/>
      <url>/articles/2019/08/23/1566468138289.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>solo-nexmoe是移植Hexo的主题<a href="https://github.com/nexmoe/hexo-theme-nexmoe">Nexmoe</a>而得到的，皮肤效果基本与原作者一致</p><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/Programming-With-Love/solo-nexmoe">https://github.com/Programming-With-Love/solo-nexmoe</a></p><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-0f32e4c2.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-9386c650.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-4ff20186.png" alt="image.png"></p><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><ul><li><a href="https://www.inksp.cn/?skin=solo-nexmoe">墨殇的技术博客</a></li><li><a href="https://sszsj.cc:444/?skin=solo-nexmoe">鼠鼠在碎觉</a></li><li><a href="https://witheloov.com/?skin=solo-nexmoe">记录精彩的人生</a></li><li><a href="https://www.cjzshilong.cn/?skin=solo-nexmoe">邯城往事</a></li><li><a href="https://www.stackoverflow.wiki/blog/?skin=solo-nexmoe">贼拉正经的技术博客</a></li><li>…</li></ul><p>欢迎将你的博客加入这里</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul><li>本皮肤依赖于<a href="https://github.com/b3log/solo">b3log/solo</a>，安装solo可查看<a href="https://www.inkdp.cn/articles/2019/08/06/1565021931775.html">从零开始安装 Solo 博客</a></li><li>导航栏自定义图标为字体图标，可以前往<a href="https://www.inkdp.cn/articles/2019/08/23/1566548785550.html">solo-nexmoe 图标详解</a>查看图标对应名称，直接填入名称即可，目前包内所有图标都被应用了，填写是请删除前缀 <code>solo-</code>后填写</li><li>接上条，由于solo会自动拉取你的github项目，《我的开源》对应的图标会被覆盖，所以请升级到最新版本，关闭自动拉取设置，然后讲图标设置为 <code>github</code>即可</li><li>需要自定义新图标直接修改 <code>font-icon.scss</code>与 <code>font-icon.css</code>，如果你没有node环境，直接修改 <code>css</code>也是可以的，最后在导航管理处设置即可，你也可以提issue，我会定期收集一些图标更新</li><li>现用图标可前往github上查看或者<a href="https://img.hacpai.com/file/2019/08/download-9acf6646.zip">点击下载</a></li><li>侧边栏中的标签可替换为公告栏，操作方法 <code>后台管理</code>=&gt;<code>设置</code>=&gt;<code>偏好设置</code>=&gt;<code>参数设置</code>=&gt;<code>自定义模板变量</code>，更改 <code>key0=0</code>为 <code>key0=bulletin</code>即可，PS:(由于侧边栏很窄，所以公告栏外链网易云的，需要考虑一下页面美观度的问题)</li><li>友情链接提供两种显示方式，默认为原始版本的，操作方法如上，更改 <code>key1=0</code>为 <code>key1=list</code>即可(由于友链不能自定义图片，所以现在还很丑，等待D哥完成<a href="https://github.com/b3log/solo/issues/12861">友情链接添加图片属性</a>后，这个会很好看)</li></ul><h2 id="小功能"><a href="#小功能" class="headerlink" title="小功能"></a>小功能</h2><ul><li>快捷键 <code>T</code>可直接返回顶部</li><li>自定义背景：默认使用canvas作为背景，在后台管理 → 偏好设定 → 参数设置 → 自定义模板变量中新加参数 <code>bg=*</code>,<code>*</code>对应0-9的数字，数字为透明度，<code>bg=1</code>对应 <code>opacity: .1</code>。设置好后背景图片为<a href="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/57873300p0-3496bc81.jpg">默认图片</a>。如需更改默认图片可新增参数 <code>bgUrl=图片地址</code>，示例 <code>bgUrl=https://static-solo.b3log.org/skins/Bubble/images/header-bg.jpg</code></li><li>后续添加中…</li></ul><h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><ul><li>感谢皮肤原作者<a href="https://docs.nexmoe.com/">折影轻梦</a></li></ul><h2 id="论坛"><a href="#论坛" class="headerlink" title="论坛"></a>论坛</h2><p>欢迎加入我们的小众开源社区，详情请看<a href="https://hacpai.com/">这里</a></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>欢迎大家提issue，pr，以及点star</p><h2 id="更新通知"><a href="#更新通知" class="headerlink" title="更新通知"></a>更新通知</h2><p>希望使用本皮肤的各位能够关注本帖，皮肤有BUG修复或者功能更新后会在本帖说明，重要的事说三遍<br>希望使用本皮肤的各位能够关注本帖，皮肤有BUG修复或者功能更新后会在本帖说明，重要的事说三遍<br>希望使用本皮肤的各位能够关注本帖，皮肤有BUG修复或者功能更新后会在本帖说明，重要的事说三遍</p><ul><li>2019-09-05：调换 <code>mater</code>分支与 <code>temporary</code>内容，目前连分支唯一差别就是友情链接页面</li><li>2019-09-09：修复头图误删元素问题，完成<a href="https://github.com/InkDP/solo-nexmoe/issues/6">左侧可以添加公告栏</a>，将 <code>master</code>与 <code>tempoary</code>，详细操作查看说明。</li><li>2019-09-10：添加置顶标识，更换返回顶部图标</li><li>2019-09-10：修复<a href="https://github.com/InkDP/solo-nexmoe/issues/8">文章第一次评论时，无法直接更新只评论列表</a></li><li>2019-09-10：修复最新版solo出现代码不高亮问题，没有出现代码不高亮可以不更新</li><li>2019-09-12：侧边栏分类文章数量正确显示</li><li>2019-09-19：修复solo3.6.5出现的无法从首页登录后台问题</li><li>2019-09-25：修复表格无法换行问题</li><li>2019-09-26：添加用户自定义背景功能</li><li>2019-10-24：修复文章中:huaji:等表情过大问题，D 哥完成了<a href="https://hacpai.com/forward?goto=https://github.com/b3log/solo/issues/12861">友情链接添加图片属性</a>，所以友链可以以列表的方式显示，不过你先得在友链中添加图片属性，效果如下：<a href="https://www.inkdp.cn/links.html">友情链接-墨殇的技术博客</a></li><li>2019-12-26日：修复社区防盗链引发的皮肤图片403问题：<a href="https://hacpai.com/article/1577238746196%EF%BC%8C%E6%9B%B4%E6%96%B0%E5%B7%A6%E4%BE%A7%E5%A4%B4%E5%83%8F%E4%B8%BA%E8%87%AA%E5%B7%B1%E8%AE%BE%E7%BD%AE%E7%9A%84**Favicon**%EF%BC%8C%E8%80%8C%E9%9D%9E%E7%A4%BE%E5%8C%BA%E5%A4%B4%E5%83%8F">https://hacpai.com/article/1577238746196，更新左侧头像为自己设置的**Favicon**，而非社区头像</a></li><li>2020-03-27日：修复所有已知BUG，抱歉拖了这么久，给各位带来的不便深表歉意</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Solo </tag>
            
            <tag> 皮肤 </tag>
            
            <tag> Nexmoe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>solo-nexmoe 图标详解</title>
      <link href="/articles/2019/08/23/1566548785550.html"/>
      <url>/articles/2019/08/23/1566548785550.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本帖记录官方solo-nexmoe内所对应字体图标值</p><ul><li><p><code>solo-home</code> <i class="iconfont solo-home"></i></p></li><li><p><code>solo-list</code> <i class="iconfont solo-list"></i></p></li><li><p><code>solo-tags</code> <i class="iconfont solo-tags"></i></p></li><li><p><code>solo-tag</code> <i class="iconfont solo-tag"></i></p></li><li><p><code>solo-github</code> <i class="iconfont solo-github"></i></p></li><li><p><code>solo-about</code> <i class=" iconfont solo-about"></i></p></li><li><p><code>solo-search</code> <i class=" iconfont solo-search"></i></p></li><li><p><code>solo-rss</code> <i class=" iconfont solo-rss"></i></p></li><li><p><code>solo-calendarl</code> <i class=" iconfont solo-calendarl"></i></p></li><li><p><code>solo-category</code> <i class=" iconfont solo-category"></i></p></li><li><p><code>solo-left</code> <i class=" iconfont solo-left"></i></p></li><li><p><code>solo-right</code> <i class=" iconfont solo-right"></i></p></li><li><p><code>solo-browse</code> <i class=" iconfont solo-browse"></i></p></li><li><p><code>solo-heat</code> <i class=" iconfont solo-heat"></i></p></li><li><p><code>solo-about2</code> <i class=" iconfont solo-about2"></i></p></li><li><p><code>solo-top</code> <i class=" iconfont solo-top"></i></p></li><li><p><code>solo-login</code> <i class=" iconfont solo-login"></i></p></li><li><p><code>solo-logout</code> <i class=" iconfont solo-logout"></i></p></li><li><p><code>solo-spin</code> <i class=" iconfont solo-spin"></i></p></li><li><p><code>solo-comment</code> <i class=" iconfont solo-comment"></i></p></li><li><p><code>solo-gotop</code> <i class=" iconfont solo-gotop"></i></p></li><li><p><code>solo-</code> <i class=" iconfont solo-"></i>  自定义导航不设置图标时显示</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Solo </tag>
            
            <tag> solo-nexmoe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日刷leetcode--简单版（三）</title>
      <link href="/leetcode3.html"/>
      <url>/leetcode3.html</url>
      
        <content type="html"><![CDATA[<h3 id="返回总目录"><a href="#返回总目录" class="headerlink" title="返回总目录"></a>返回总目录</h3><p><a href="/leetcode.html">日刷leetcode–简单版</a></p><hr><h3 id="58-最后一个单词的长度"><a href="#58-最后一个单词的长度" class="headerlink" title="58. 最后一个单词的长度"></a>58. 最后一个单词的长度</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-45f2c7e9.png" alt="image.png"></p><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>定义一个变量统计，从前往后遍历，遇到空格归零就可以了，注意处理最后几个个字符全为空格的情况</li><li>定义一个变量统计，从后往前便利，虽然时间复杂度同为 O(n)，但是第二个明显快很多</li></ul><h5 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lengthOfLastWord</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> count <span class="keyword">int</span></span><br><span class="line">                <span class="keyword">for</span> i:= <span class="built_in">len</span>(s)<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">                        <span class="keyword">if</span> s[i] == <span class="number">32</span>&#123;</span><br><span class="line">                                <span class="keyword">if</span> count == <span class="number">0</span> &#123;</span><br><span class="line">                                        <span class="keyword">continue</span></span><br><span class="line">                                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                                        <span class="keyword">break</span></span><br><span class="line">                                &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        count ++</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h5><blockquote><p>执行用时 :0 ms, 在所有 Go 提交中击败了 100.00%的用户<br>内存消耗 :2.2 MB, 在所有 Go 提交中击败了 39.13%的用户</p></blockquote><h3 id="66-加一"><a href="#66-加一" class="headerlink" title="66.加一"></a>66.加一</h3><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-1081bedf.png" alt="image.png"></p><h5 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h5><ul><li>从后面往前面循环，最后以一位加 1 即可，处理好末尾<code>9</code>与<code>999</code></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">plusOne</span><span class="params">(digits []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">        c := <span class="number">1</span> <span class="comment">// 定义一个变量用来进位，进位归零则程序结束</span></span><br><span class="line">        <span class="keyword">for</span> i := <span class="built_in">len</span>(digits) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">                digits[i] += c</span><br><span class="line">                c--</span><br><span class="line">                <span class="keyword">if</span> digits[i] == <span class="number">10</span> &#123;</span><br><span class="line">                        digits[i] = <span class="number">0</span></span><br><span class="line">                        c = <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> c == <span class="number">0</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> digits</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> c != <span class="number">0</span> &#123; <span class="comment">// 循环完后依旧存在进位则表示遇到了999</span></span><br><span class="line">                digits = <span class="built_in">append</span>([]<span class="keyword">int</span>&#123;<span class="number">1</span>&#125;, digits...)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> digits</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h5><blockquote><p>执行用时 :0 ms, 在所有 Go 提交中击败了 100.00%的用户<br>内存消耗 :2.2 MB, 在所有 Go 提交中击败了 30.57%的用户</p></blockquote><h3 id="67-二进制求和"><a href="#67-二进制求和" class="headerlink" title="67.二进制求和"></a>67.二进制求和</h3><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-21de0dac.png" alt="image.png"></p><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>判断两个字符串的大小，保证 a 为较长的一个</li><li>从后往前循环相加，先循环较短的字符串，再循环长字符串剩余的，定义一个变量记录是否需要进位，两个字符串相加是需要加上进位的值</li><li>最后判断进位值是否为 0，不为 0 则在相加后字符串最前面一位加 1</li></ul><h5 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addBinary</span><span class="params">(a <span class="keyword">string</span>, b <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">la, lb := <span class="built_in">len</span>(a), <span class="built_in">len</span>(b)</span><br><span class="line"><span class="keyword">if</span> la &lt; lb &#123;</span><br><span class="line">la, lb = lb, la</span><br><span class="line">a, b = b, a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> carry, s <span class="keyword">byte</span></span><br><span class="line">str := <span class="built_in">make</span>([]<span class="keyword">byte</span>, la+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> lb &gt; <span class="number">0</span> &#123;</span><br><span class="line">la--</span><br><span class="line">lb--</span><br><span class="line">s = <span class="keyword">byte</span>(a[la]-<span class="string">&#x27;0&#x27;</span>) + <span class="keyword">byte</span>(b[lb]-<span class="string">&#x27;0&#x27;</span>) + carry</span><br><span class="line">carry = s / <span class="number">2</span></span><br><span class="line">s = s % <span class="number">2</span></span><br><span class="line">str[la+<span class="number">1</span>] = <span class="keyword">byte</span>(s + <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> la &gt; <span class="number">0</span> &#123;</span><br><span class="line">la--</span><br><span class="line">s = <span class="keyword">byte</span>(a[la]-<span class="string">&#x27;0&#x27;</span>) + carry</span><br><span class="line">carry = s / <span class="number">2</span></span><br><span class="line">s = s % <span class="number">2</span></span><br><span class="line">str[la+<span class="number">1</span>] = <span class="keyword">byte</span>(s + <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> carry == <span class="number">1</span> &#123;</span><br><span class="line">str[la] = carry + <span class="string">&#x27;0&#x27;</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">str = str[la+<span class="number">1</span>:]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">string</span>(str[la:])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果"></a>运行结果</h5><blockquote><p>执行用时 :0 ms, 在所有 Go 提交中击败了 100.00%的用户<br>内存消耗 :2.3 MB, 在所有 Go 提交中击败了 68.18%的用户</p></blockquote><h3 id="69-x-的平方根"><a href="#69-x-的平方根" class="headerlink" title="69. x 的平方根"></a>69. x 的平方根</h3><h4 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-66ad4fc1.png" alt="image.png"></p><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路 1"></a>解题思路 1</h4><ul><li>使用官方包 math.Sqrt，然后提取整数部分即可(不提供代码)</li></ul><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路 2"></a>解题思路 2</h4><ul><li>使用二分法，判断中位数的积是否大于 x，是则右边向左移，否则左边直接等于中位数</li><li>注意的是取中位数是要取右中位数，也就是要加１，不然会死循环</li></ul><h5 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码 2"></a>示例代码 2</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mySqrt</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">l, r := <span class="number">0</span>, x/<span class="number">2</span>+<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> l &lt; r &#123;</span><br><span class="line">mid := (l + r + <span class="number">1</span>) / <span class="number">2</span></span><br><span class="line">sqrt := mid * mid</span><br><span class="line"><span class="keyword">if</span> sqrt &gt; x &#123;</span><br><span class="line">r = mid - <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">l = mid</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(l, r, mid)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> l</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行结果-3"><a href="#运行结果-3" class="headerlink" title="运行结果"></a>运行结果</h5><blockquote><p>执行用时 :8 ms, 在所有 Go 提交中击败了 29.75%的用户<br>内存消耗 :2.8 MB, 在所有 Go 提交中击败了 5.23%的用户</p></blockquote><h3 id="70-爬楼梯"><a href="#70-爬楼梯" class="headerlink" title="70. 爬楼梯"></a>70. 爬楼梯</h3><h4 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-4aa9ad43.png" alt="image.png"></p><h4 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>这是一个标准的斐波拉切数列，所以就不多说</li></ul><h5 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">climbStairs</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> n &lt; <span class="number">3</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a, b := <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">res := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">2</span>; i &lt; n; i++ &#123;</span><br><span class="line">res = a + b</span><br><span class="line">a, b = b, res</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行结果-4"><a href="#运行结果-4" class="headerlink" title="运行结果"></a>运行结果</h5><blockquote><p>执行用时 :0 ms, 在所有 Go 提交中击败了 100.00%的用户<br>内存消耗 :2 MB, 在所有 Go 提交中击败了 52.61%的用户</p></blockquote><h3 id="83-删除排序链表中的重复"><a href="#83-删除排序链表中的重复" class="headerlink" title="83. 删除排序链表中的重复"></a>83. 删除排序链表中的重复</h3><h4 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-191c979d.png" alt="image.png"></p><h4 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>因为是排序了的，所以就相对来说比较简单，判断是否与下一个相等，相等即后移即可，讲<code>Next</code>指向<code>Next.Next</code></li></ul><h5 id="示例代码-3"><a href="#示例代码-3" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteDuplicates</span><span class="params">(head *ListNode)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> head == <span class="literal">nil</span> || head.Next == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">carry := head</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> carry != <span class="literal">nil</span> &amp;&amp; carry.Next != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> carry.Val == carry.Next.Val &#123;</span><br><span class="line">carry.Next = carry.Next.Next</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">carry = carry.Next</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> head</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行结果-5"><a href="#运行结果-5" class="headerlink" title="运行结果"></a>运行结果</h5><blockquote><p>执行用时 :4 ms, 在所有 Go 提交中击败了 96.46%的用户<br>内存消耗 :3.2 MB, 在所有 Go 提交中击败了 48.18%的用户</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20190809 TGIF</title>
      <link href="/articles/2019/08/09/1565315193270.html"/>
      <url>/articles/2019/08/09/1565315193270.html</url>
      
        <content type="html"><![CDATA[<h1 id="史上最水的TGIF来了"><a href="#史上最水的TGIF来了" class="headerlink" title="史上最水的TGIF来了"></a>史上最水的TGIF来了</h1><p>想抢这个好几次了，可是每次都是在拥挤的地铁里就被人抢了，今天居然还在，既然抢到了就水一篇吧。</p><p>不知不觉来社区已经67天了，想起注册社区，搭建博客的时候我还在成都。还坐在办公室里悠闲的摸鱼，划水，想着回到家里晚上吃着女朋友做的饭菜，妙啊。</p><p>转眼间，两个月的时间，我已经来到广州工作，也入职了一个月，也成功从PHP转成了GO，看起来似乎完成了来广州的目的，然后女朋友去了新疆，又开始了异地。</p><p>初来广州时，我踌躇满志，幻想着来到这边之后的一切一切。一开始打算用一个月的时间来找工作，毕竟我知道刚从成都跑到广州来的时候状态有多么的不好，毕竟在成都真的是天天摸鱼划水，太久没写代码，啥都忘了。可以一边面试一边总结，这次一定要找到一个称心如意的工作，毕竟前两次选择的工作都过于草率，也很不利于自己以后的发展。记得是晚上11点多到的广州，很讽刺的是我父母都在这边却并没有人来接我，虽然早知如此，但多少还是有一丝的遗憾吧，最后那晚我去了我姑姑家，第二天，我把箱子扔到我爸那里，就直接去面试了。</p><p>来广州后的第一场面试，记得那天在下了很大的雨，去面试的路上鞋子都湿透了，心里在想下雨太难受了，还是天天出太阳比较好(我现在知道当时的想法有多么的愚蠢了，TMD好热)，扯远了…..那家公司是做外包的，我面试的是PHP，面试官是做JAVA的，所以没问些什么，问了些数据库的东西，就随意吹了一下，这算是我强项，然后问我能不能独立完成项目，我告诉他能。然后就是老板之类的来面试我，就瞎吹了一些：公司刚刚淘汰一个团队，想重新组建一个团队，屋外坐着的就是刚找来没几天的Java和前端，给了我5K+提成，转正后6-8K+提成(不就是6吗)。毕竟来广州是想往go的方向走，而且不想去外包公司，所以当时没答应，算是婉拒了。</p><p>出门就接到我妈的微信电话，如实告诉我妈刚刚的情况。然后我妈就让我别挑，直接去上班，不满意可以慢慢找，但是就我就直接不干，说是要慢慢找下，然后我妈就不乐意了让我赶紧找，我头天晚上半夜到第二天就已经在面试了还要怎么赶紧找。</p><p>后面稀稀疏疏的面了几家，但是都是PHP，大多都在6-8k的样子。因为当时使用boss方式不对，所以没投到多少go的岗位，也就没多少面试机会。</p><p>后面面试了两家看着算是比较大公司，都是go，记得第一家离网易不是特别远，面试题我还做的不错，最后正式面试的时候回答的一塌糊涂，那时的我才发现自己好像只会最基础的CURD，所以面试的结果可想而知。第二家是映客直播，问了一些和头一天一样的问题，因为有做面试笔记的习惯，虽然都基本上回答上来了，但是感觉跟他要的人还是有所差距，看的出来面试官也在纠结，然后因为自己的不自信说错话导致面试凉凉。</p><p>我保持这每天跑3-4场面试的频率，但是我的父母好像都在不断地催促我快点找工作，我自己清楚的知道我当时的状态不是特别好，需要沉淀一下，总结一下再接着面试，可是我回家连电脑摆出来都困难，所有的面试比较都是手机做的。一场有一场的面试打得我头昏脑涨。索性在第四天，我找到了两家在当时的情况下来说还不错的公司，当时还有些纠结<a href="https://hacpai.com/article/1561715541829">选哪个 Offer</a>，最后我选了第二家，在纠结选哪家公司的时候我也从我爸那儿搬到了我妈那儿，在我妈附件租了房子，因为我父母离异10多年了，我妈担心我跟着我爸学坏了，一天3-4个电话打过来(我从没见过她这么关心我)。</p><p>来公司一个月了，办公室一天安静的飞起(除了敲键盘的声音)，明明就坐在你对面的人，交流却要用钉钉，所以也导致的了我现在都说不出办公室里面所以人的名字。不算压抑，我习惯了。但是慢慢发现公司似乎与自己预想的出入有些大，6.5的薪资跟我来广州预计的还是差别有些大，当时说的是后面可以加，入职了才发现好像都没调薪制度；公司架构模式这些听起来很高大上，毕竟我也是在写微服务的人了，回头一想，我还是在写接口，还是整天CURD，虽然是电商项目，但是我想象中的高并发之类的东西，好像跟我不想关呀，只是个拧螺丝的；我知道自己能力不够，可我是一个在项目中学习的人，对于我来说能学到东西或者能挣到钱，我觉得天天加班到11点都无所谓(反正我1点左右才睡)，然后现在一天闲的飞起，我已经连续看了两天小说了。既来之则安之吧。</p><p>最近整个人都变得很丧，回家倒头就玩手机，完全没有斗志，也不知道未来在何方，感觉上班有一次变成了摸鱼混日子，虽然知道自己要学的有很多，但是却不知道从何学起。熬夜玩手机成了日常，跑步记单词什么已经被抛之脑后，突然找不到一个奋斗的方向了，又陷入了“间歇性踌躇满志，持续性混吃等死”的状态。</p><p>不说了，对接下业务，鼓捣点新东西</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TGIF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始安装 solo 博客</title>
      <link href="/articles/2019/08/06/1565021931775.html"/>
      <url>/articles/2019/08/06/1565021931775.html</url>
      
        <content type="html"><![CDATA[<p>之前也写过类似的帖子，但是由于那时自己的各种原因写的不是特别好，所以今天写一个聚合帖，记录从购买服务器到安装solo然后通过nginx反向代理，最后升级https的全过程。此贴献给完全无基础的人，所以废话较多，见谅</p><h1 id="1-购买服务器"><a href="#1-购买服务器" class="headerlink" title="1. 购买服务器"></a>1. 购买服务器</h1><p>首先你得有自己的服务器，有的话就跳过。服务商可选的有很多，比如：<a href="https://cn.aliyun.com/">阿里云</a>、<a href="https://cloud.tencent.com/">腾讯云</a>、<a href="https://cloud.baidu.com/">百度云</a>、还有一些香港的服务商以及国外的（有特殊需求的可以考虑下）。腾讯和阿里对于新用户以及学生都有很大的优惠，配置的话如果只挂solo，买最低配1G1核1M即可。国内的几家都可以关注下，不定时会有很好的优惠活动。我比较推荐<a href="https://cn.aliyun.com/">阿里云</a>，前段时间刚买了一台3年才668多，不知道活动结束没有。阿里云购买服务器时会要求你安装系统（不知道可不可以不选），推荐选择centos。</p><h1 id="2-购买域名-可不买"><a href="#2-购买域名-可不买" class="headerlink" title="2. 购买域名(可不买)"></a>2. 购买域名(可不买)</h1><p>建议还是买一个域名，直接通过IP访问的话不是特别好。购买域名时不要盯着 <code>.com</code>，<code>.cn</code>这种比较热门的域名，往往很贵。还有尽量选择可备案的域名，否则就会像<a href="https://sszsj.cc:444/">鼠鼠在碎觉</a>一样只能挂载444端口上运行。可通过<a href="http://域名.信息/">域名.信息</a>查看可备案域名。如果你服务器买着国外的话似乎就不用备案。</p><h1 id="3-域名解析与备案"><a href="#3-域名解析与备案" class="headerlink" title="3. 域名解析与备案"></a>3. 域名解析与备案</h1><p>服务器和域名购买完后需要将域名解析到服务器，有些服务商可能不支持跨服务商解析，腾讯云域名可以解析阿里云服务器。解析过程大概需要10分钟。解析完成后如下图所示：<br><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-5ff5a25e.png" alt="image.png"><br>如果不备案的话，80端口与443端口大概率会被封。所以备案还是需要的，备案的过程有点麻烦需要耐心。大致步骤如下：<br><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-4527c63e.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-056ca9d6.png" alt="image.png"><br>接入备案很快，几天就完事了。</p><h1 id="4-为服务器安装系统"><a href="#4-为服务器安装系统" class="headerlink" title="4. 为服务器安装系统"></a>4. 为服务器安装系统</h1><p>给服务器安装系统不用像你给自己装系统那样麻烦，很方便，由于我使用的centos，所以推荐安装centos，以免出现不必要的错误。后续操作嘘设置服务器安全组，开发如下端口：<code>80</code>、<code>8080</code>、<code>3306</code>、<code>443</code>、<code>22</code>。具体左右我会在下面一一说明，<code>22用来远程连接服务器使用</code>，windows用户可下载xshell远程链接服务器。</p><h1 id="5-安装docker"><a href="#5-安装docker" class="headerlink" title="5. 安装docker"></a>5. 安装docker</h1><p>直接使用yum安装，简单快捷</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#安装 Docker</span><br><span class="line">yum -y install docker</span><br><span class="line"></span><br><span class="line">#启动 Docker 后台服务</span><br><span class="line">service docker start</span><br><span class="line"></span><br><span class="line">#测试运行 hello-world</span><br><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><p>出现hello world 就证明安装正常了<br><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-cc55a2ad.png" alt="image.png"></p><h1 id="6-安装Mysql"><a href="#6-安装Mysql" class="headerlink" title="6.安装Mysql"></a>6.安装Mysql</h1><p>版本随意，我这里选择的5.6，你可以选择更高版本的，这个没关系，不影响使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 安装mysql:5.6,直接docker run 他会自动去官方镜想下载</span><br><span class="line"># MYSQL_ROOT_PASSWORD&#x3D;你的数据库密码</span><br><span class="line">docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD&#x3D;123456 -d mysql:5.6</span><br><span class="line"></span><br><span class="line"># docker安装的mysql默认允许远程连接，可以使用Navicat等软件连接数据库</span><br><span class="line"># 进入容器mysql</span><br><span class="line">docker exec -it mysql bash</span><br><span class="line"></span><br><span class="line"># 进入数据库 p后面跟你的密码</span><br><span class="line">mysql -uroot -pXXX</span><br><span class="line"></span><br><span class="line"># 创建数据库(数据库名:solo;字符集utf8mb4;排序规则utf8mb4_general_ci)</span><br><span class="line">create database solo DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;</span><br><span class="line"># 出现Query OK, 1 row affected (0.00 sec)表示成功</span><br><span class="line">#退出数据库</span><br><span class="line">exit</span><br><span class="line">#退出容器</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><h1 id="7-安装solo"><a href="#7-安装solo" class="headerlink" title="7. 安装solo"></a>7. 安装solo</h1><p>直接运行以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run --detach --name solo --network&#x3D;host \</span><br><span class="line">--env RUNTIME_DB&#x3D;&quot;MYSQL&quot; \</span><br><span class="line">--env JDBC_USERNAME&#x3D;&quot;root&quot; \</span><br><span class="line">--env JDBC_PASSWORD&#x3D;&quot;123456&quot; \</span><br><span class="line">--env JDBC_DRIVER&#x3D;&quot;com.mysql.cj.jdbc.Driver&quot; \</span><br><span class="line">--env JDBC_URL&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;solo?useUnicode&#x3D;yes&amp;characterEncoding&#x3D;UTF-8&amp;useSSL&#x3D;false&amp;serverTimezone&#x3D;UTC&quot; \</span><br><span class="line">--rm \</span><br><span class="line">b3log&#x2F;solo --listen_port&#x3D;8080 --server_scheme&#x3D;http --server_host&#x3D;www.jinjianh.com</span><br></pre></td></tr></table></figure><p>上面的命令建议手敲，免得出错，参数说明</p><ul><li><code>--env JDBC_PASSWORD=&quot;123456&quot;</code> 将123456换成你的密码</li><li><code>--listen_port=8080</code> 监听的端口</li><li><code>--server_scheme=http</code> 请求方式，暂时使用http，后面我们会换成https</li><li><code>--server_host=www.jinjianh.com</code> 你的域名，如果你没有域名可以写ip地址</li><li><code>--rm</code>因为这个容器后面要删掉，带上rm会省很多事。</li></ul><p>命令成功执行没有报错的话，通过 <code>docker ps</code>查看执行的容器列表中是否存在solo，存在这表示启动成功，直接访问你的域名加:8080即可访问你的博客，<a href="http://www.jinjianh.com:8080/">金戋博客–http://www.jinjianh.com:8080</a><br>如果你尚在备案中，你可以收藏本帖，后面等备案通过了在研究后面的部分。<br>如果你不想使用nginx也不想升级https，那么你可以先执行 <code>docker stop solo</code>，然后将上面 <code>--listen_port=8080</code>的 <code>8080</code>换成 <code>80</code>，然后去掉 <code>--rm</code>，再执行一次就ok。</p><h1 id="8-安装nginx"><a href="#8-安装nginx" class="headerlink" title="8. 安装nginx"></a>8. 安装nginx</h1><p>安装nginx前，我们现在本地建立几个文件，用于存放nginx的配置文件等</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 切换到服务器根目录</span><br><span class="line">cd &#x2F;</span><br><span class="line"># 创建主目录</span><br><span class="line">mkdir dockerData</span><br><span class="line"># 创建文件</span><br><span class="line">mkdir dockerData&#x2F;nginx dockerData&#x2F;nginx&#x2F;conf dockerData&#x2F;nginx&#x2F;logs dockerData&#x2F;nginx&#x2F;www dockerData&#x2F;nginx&#x2F;ssl</span><br></pre></td></tr></table></figure><p>上面的 <code>dockerData</code>可以换成自己喜欢的名字</p><ul><li><code>dockerData/nginx</code> 用于存放docker下nginx自定义文件</li><li><code> dockerData/nginx/conf</code> 存放nginx配置文件</li><li><code>dockerData/nginx/log</code> 存放nginx日志文件</li><li><code>dockerData/nginx/www</code> 存放nginx访问的资源文件</li><li><code>dockerData/nginx/ssl</code> 存放ssl证书<br>启动nginx</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx -p 80:80 -d --rm nginx</span><br></pre></td></tr></table></figure><p>如果你没有备案，可以将上面的 <code>80:80</code>换成 <code>8081:80</code>，因为这个东西一会儿也要删掉，所以加上 <code>--rm</code>参数，命令执行玩后通过 <code>docker ps</code>查看nginx是否在运行，在运行的情况下访问你的域名加端口号查看是否正常安装，<code>80</code>直接省略。如下表示访问成功<br><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-ec38061d.png" alt="image.png"><br>导出配置文件</p><ul><li><code>docker cp nginx:/etc/nginx/nginx.conf /dockerData/nginx/conf/nginx.conf</code> 导出配置文件nginx.conf</li><li><code>docker cp nginx:/etc/nginx/conf.d /dockerData/nginx/conf/conf.d</code> 导出配置为你nginx.conf<br>执行 <code>docker stop nginx</code>，会自动删除现在的nginx容器，然后执行如下命令重新启动一个nginx容器</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 80:80 --name nginx \</span><br><span class="line">-v &#x2F;dockerData&#x2F;nginx&#x2F;conf&#x2F;nginx.conf:&#x2F;etc&#x2F;nginx&#x2F;nginx.conf \</span><br><span class="line">-v &#x2F;dockerData&#x2F;nginx&#x2F;conf&#x2F;conf.d:&#x2F;etc&#x2F;nginx&#x2F;conf.d \</span><br><span class="line">-v &#x2F;dockerData&#x2F;nginx&#x2F;www:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html \</span><br><span class="line">-v &#x2F;dockerData&#x2F;nginx&#x2F;logs:&#x2F;var&#x2F;log&#x2F;nginx nginx</span><br></pre></td></tr></table></figure><ul><li><code>-v /dockerData/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \</code> 挂载配置文件 <code>nginx.conf</code></li><li><code>-v /dockerData/nginx/conf/conf.d:/etc/nginx/conf.d</code> 挂载配置文件 <code>default.conf</code></li><li><code>-v /dockerData/nginx/www:/usr/share/nginx/html </code> 挂载项目文件</li><li><code>-v /dockerData/nginx/logs:/var/log/nginx</code> 挂载配置文件</li></ul><p>访问你的域名，你会发现报错了</p><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-9c8de340.png" alt="image.png"><br>这时我们可以前往 <code>/dockerData/nginx/logs</code>下查看日志文件</p><p><code>2019/08/05 14:57:54 [error] 6#6: *3 directory index of &quot;/usr/share/nginx/html/&quot; is forbidden, client: 121.32.33.217, server: localhost, request: &quot;GET / HTTP/1.1&quot;, host: &quot;www.jinjianh.com&quot; </code></p><p>因为 <code>/usr/share/nginx/html/</code>被挂载到了服务器上面的 <code>/dockerData/nginx/www</code>目录下，原来的欢迎页面在 <code>dockerData/nginx/www</code>是没有的，所有就报错了，这里我们随便建一个。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 打开项目文件</span><br><span class="line">cd &#x2F;dockerData&#x2F;nginx&#x2F;www</span><br><span class="line"># 使用vim 创建并编辑文件</span><br><span class="line">vim index.html</span><br><span class="line"># 此时我们会进入vim界面，按 i 插入，然后输入</span><br><span class="line">&lt;h1&gt;Hello Docker-Nginx&lt;&#x2F;h1&gt;</span><br><span class="line"># 输入完后，按 esc，然后输入 :wq</span><br></pre></td></tr></table></figure><p>再次访问我们的域名就可以看到我们刚刚写的 <code>h1</code>标签内容</p><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-70a4130f.png" alt="image.png"></p><h1 id="9-申请ssl证书，将http升级为https-可跳过"><a href="#9-申请ssl证书，将http升级为https-可跳过" class="headerlink" title="9. 申请ssl证书，将http升级为https(可跳过)"></a>9. 申请ssl证书，将http升级为https(可跳过)</h1><p><code>https</code>想比与 <code>http</code>来说，最核心的内容就是多了一个ssl证书，证书是可以免费申请的。</p><h2 id="腾讯云"><a href="#腾讯云" class="headerlink" title="腾讯云"></a>腾讯云</h2><p>访问 <a href="https://buy.cloud.tencent.com/ssl?fromSource=ssl">SSL证书选购</a> 申请</p><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-05285d99.png" alt="image.png"></p><p>私钥可不填写<br><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-98544bc3.png" alt="image.png"></p><p>选择手动DNS验证</p><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-44754a07.png" alt="image.png"></p><p>可直接前往 <a href="https://cloud.tencent.com/document/product/400/4142#ManualVerification">SSL 证书 域名验证指引 - 操作指南 - 文档中心 - 腾讯云</a>查看</p><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-3e6695e5.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-8828eaa2.png" alt="image.png"></p><p>前往<a href="https://console.cloud.tencent.com/ssl">证书管理-控制台</a>等待验证通过即可</p><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-4c7bcc44.png" alt="image.png"></p><p>将 <code>nginx</code>下文件上传到 <code>/dockerData/nginx/ssl</code>目录下即可</p><h2 id="阿里云"><a href="#阿里云" class="headerlink" title="阿里云"></a>阿里云</h2><p>访问<a href="https://common-buy.aliyun.com/?spm=5176.10695662.958455.3.3f9140d55mPzFH&commodityCode=cas#/buy">云盾证书服务</a>申请，访问后如果有无内容可复制 <a href="https://common-buy.aliyun.com/?spm=5176.10695662.958455.3.3f9140d55mPzFH&amp;commodityCode=cas#/buy">https://common-buy.aliyun.com/?spm=5176.10695662.958455.3.3f9140d55mPzFH&amp;commodityCode=cas#/buy</a> 打开<br><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-2f8ed8b3.png" alt="image.png"></p><p>走一下支付流程，然后申请</p><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-af887011.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-a3de4d98.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-8ef94cdf.png" alt="image.png"><br>操作流程基本与腾讯云一样，我就不详细说明了</p><h2 id="其他平台"><a href="#其他平台" class="headerlink" title="其他平台"></a>其他平台</h2><p>免费的证书平台有很多，也可以去别的地方申请</p><h2 id="上传证书"><a href="#上传证书" class="headerlink" title="上传证书"></a>上传证书</h2><p>一下示例为腾讯云证书，阿里云<br><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-f9c0bb7e.png" alt="image.png"></p><p>验证完后，我们下载证书，解压后得到</p><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-5b610f8d.png" alt="image.png"></p><p>最后把 <code>Nginx</code>下的两个文件上传至服务器 <code>/dockerDat/nginx/ssl</code>目录下，别的服务商申请的证书也一样，将最后的ssl证书放到 <code>/dockerDat/nginx/ssl</code>下即可</p><h2 id="配置nginx配置文件"><a href="#配置nginx配置文件" class="headerlink" title="配置nginx配置文件"></a>配置nginx配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;dockerData&#x2F;nginx&#x2F;conf&#x2F;conf.d</span><br><span class="line">vim default.conf</span><br><span class="line"></span><br><span class="line"># 参考我的配置，配置自己的default.conf文件</span><br><span class="line">server &#123;</span><br><span class="line">    listen       443;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    ssl on;</span><br><span class="line"></span><br><span class="line">    #charset koi8-r;</span><br><span class="line">    #access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;host.access.log  main;</span><br><span class="line"></span><br><span class="line">    ssl_certificate &#x2F;ssl&#x2F;1_www.jinjianh.com_bundle.crt;  # ssl 证书目录</span><br><span class="line">    ssl_certificate_key &#x2F;ssl&#x2F;2_www.jinjianh.com.key;</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"># ......</span><br><span class="line">&#125;</span><br><span class="line">server&#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name localhost;</span><br><span class="line">  rewrite ^(.*) https:&#x2F;&#x2F;$host$1 permanent;</span><br><span class="line">&#125;</span><br><span class="line"># 按esc，然后输入:wq保持退出</span><br></pre></td></tr></table></figure><p>不重要的部分我省略了，可根据自己服务器配置做出相应调整<br>由于我们现在用的nginx容器并未监听443端口，所以需要删除现在的容器，重新启动一个新的nginx容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker stop nginx  # 停止容器</span><br><span class="line">docker rm nginx # 删除容器</span><br><span class="line"># 启动新的</span><br><span class="line">docker run -d -p 80:80 -p 443:443 --name nginx \</span><br><span class="line">-v &#x2F;dockerData&#x2F;nginx&#x2F;conf&#x2F;nginx.conf:&#x2F;etc&#x2F;nginx&#x2F;nginx.conf \</span><br><span class="line">-v &#x2F;dockerData&#x2F;nginx&#x2F;conf&#x2F;conf.d:&#x2F;etc&#x2F;nginx&#x2F;conf.d \</span><br><span class="line">-v &#x2F;dockerData&#x2F;nginx&#x2F;ssl:&#x2F;ssl&#x2F; \</span><br><span class="line">-v &#x2F;dockerData&#x2F;nginx&#x2F;www:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html \</span><br><span class="line">-v &#x2F;dockerData&#x2F;nginx&#x2F;logs:&#x2F;var&#x2F;log&#x2F;nginx nginx</span><br></pre></td></tr></table></figure><ul><li><code>-p 443:443</code> 监听443端口</li><li><code>-v /dockerData/nginx/ssl:/ssl/</code> 挂载ssl证书目录</li></ul><p>访问查看，一切正常<br><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-d2e1477f.png" alt="image.png"></p><h1 id="10-将solo通过nginx方向代理实现https访问"><a href="#10-将solo通过nginx方向代理实现https访问" class="headerlink" title="10. 将solo通过nginx方向代理实现https访问"></a>10. 将solo通过nginx方向代理实现https访问</h1><p>让solo还是跑在8080端口上，通过nginx代理到443端口即可，由于我们上面启动solo时添加了 <code>--rm</code>参数，只需要 <code>docker stop solo</code>即可自动删除solo容器，然后我们重新启动一个solo容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run --detach --name solo --network&#x3D;host \</span><br><span class="line">--env RUNTIME_DB&#x3D;&quot;MYSQL&quot; \</span><br><span class="line">--env JDBC_USERNAME&#x3D;&quot;root&quot; \</span><br><span class="line">--env JDBC_PASSWORD&#x3D;&quot;123123&quot; \</span><br><span class="line">--env JDBC_DRIVER&#x3D;&quot;com.mysql.cj.jdbc.Driver&quot; \</span><br><span class="line">--env JDBC_URL&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;solo?useUnicode&#x3D;yes&amp;characterEncoding&#x3D;UTF-8&amp;useSSL&#x3D;false&amp;serverTimezone&#x3D;UTC&quot; \</span><br><span class="line">b3log&#x2F;solo --listen_port&#x3D;8080 --server_scheme&#x3D;https --server_host&#x3D;www.jinjianh.com --server_port&#x3D;</span><br></pre></td></tr></table></figure><ul><li><code>--server_scheme=http</code>换成 <code>--server_scheme=https</code>即可</li><li><code>--server_port</code>：最终访问端口，使用浏览器默认的 80 或者 443 的话值留空即可</li></ul><p>然后我们去配置nginx配置文件，实现nginx反向代理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;dockerData&#x2F;nginx&#x2F;conf&#x2F;conf.d</span><br><span class="line">vim default.conf</span><br><span class="line"> location &#x2F; &#123;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;backend$request_uri;</span><br><span class="line">        proxy_set_header  Host $http_host;</span><br><span class="line">        proxy_set_header  X-Real-IP $remote_addr;</span><br><span class="line">        #root   &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</span><br><span class="line">        #index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"># 替换上面部分即可</span><br><span class="line"># 按esc，然后输入:wq保持退出</span><br></pre></td></tr></table></figure><h2 id="注意！！！Nginx反代理上面的方式可能出现问题参考Nginx反代"><a href="#注意！！！Nginx反代理上面的方式可能出现问题参考Nginx反代" class="headerlink" title="注意！！！Nginx反代理上面的方式可能出现问题参考Nginx反代"></a>注意！！！Nginx反代理上面的方式可能出现问题参考<a href="https://hacpai.com/article/1492881378588#NGINX-%E5%8F%8D%E4%BB%A3">Nginx反代</a></h2><h2 id="注意！！！Nginx反代理上面的方式可能出现问题参考Nginx反代-1"><a href="#注意！！！Nginx反代理上面的方式可能出现问题参考Nginx反代-1" class="headerlink" title="注意！！！Nginx反代理上面的方式可能出现问题参考Nginx反代"></a>注意！！！Nginx反代理上面的方式可能出现问题参考<a href="https://hacpai.com/article/1492881378588#NGINX-%E5%8F%8D%E4%BB%A3">Nginx反代</a></h2><h2 id="注意！！！Nginx反代理上面的方式可能出现问题参考Nginx反代-2"><a href="#注意！！！Nginx反代理上面的方式可能出现问题参考Nginx反代-2" class="headerlink" title="注意！！！Nginx反代理上面的方式可能出现问题参考Nginx反代"></a>注意！！！Nginx反代理上面的方式可能出现问题参考<a href="https://hacpai.com/article/1492881378588#NGINX-%E5%8F%8D%E4%BB%A3">Nginx反代</a></h2><p>重启nginx，<code>docker restart nginx</code></p><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-2c7eb017.png" alt="image.png"></p><p>完美</p><h1 id="11-后记"><a href="#11-后记" class="headerlink" title="11. 后记"></a>11. 后记</h1><h2 id="皮肤挂载"><a href="#皮肤挂载" class="headerlink" title="皮肤挂载"></a>皮肤挂载</h2><ul><li>在你的服务器上创建一个目录用于存放皮肤，比如我的 <code>/dockerData/solo/skins/</code></li><li>然后将你要挂载的皮肤放到上面那个目录下</li><li>最后删除当前容器 重新启动一个容器，添加参数 <code>--v /dockerData/solo/skins/:/opt/solo/skins/</code>，这个添加时要注意位置，要添加到 <code>b3log/solo --listen...</code> 的上面一排</li><li>使用挂载皮肤时，默认会使用 <code>Pingsu</code>,</li></ul><h2 id="皮肤推荐"><a href="#皮肤推荐" class="headerlink" title="皮肤推荐"></a>皮肤推荐</h2><p>我开源了两款皮肤 <a href="https://hacpai.com/article/1566468138289">solo-nexmoe</a>，因为我很懒的原因，solo-star没有手机端，所以你可以多挂载一款皮肤们比如官方皮肤 <code>Pinghsu</code>，如果你没有这款皮肤就会报错，没有请前往<a href="https://github.com/b3log/solo-skins">solo-skins</a>下载</p><h2 id="数据库占用内存过大优化"><a href="#数据库占用内存过大优化" class="headerlink" title="数据库占用内存过大优化"></a>数据库占用内存过大优化</h2><p>由于我们购买的服务器是内存只有1G，然后docker安装的mysql虽然很快，但是实际上占用内存非常大，之前服务器在腾讯云的时候就经常挂掉，排查了很久才发现是docker下mysql的问题，迁移到阿里云后倒是没出先挂掉的问题，但是服务器内存占用也一直在90%以上，所以我们对mysql容器进行一些优化。<br>由于容器内不能vim，所以我们将mysql的配置文件复制到服务器上改了之后再复制回去，也可以将配置文件挂载到服务器上，过程我不多讲，只讲核心部分。</p><p>这里注意，如果你要删除容器重新挂载的话，请提前备份mysql数据，不然你就属于删库了<br>这里注意，如果你要删除容器重新挂载的话，请提前备份mysql数据，不然你就属于删库了<br>这里注意，如果你要删除容器重新挂载的话，请提前备份mysql数据，不然你就属于删库了<br>重要的话说三遍</p><p>在配置文件 <code>/etc/mysql/mysql.conf.d/mysqld.cnf</code>中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">performance_schema_max_table_instances&#x3D;400</span><br><span class="line">table_definition_cache&#x3D;400</span><br><span class="line">table_open_cache&#x3D;256</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 从容器中复制到服务器</span><br><span class="line">docker cp mysql:&#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf &#x2F;dockerData&#x2F;mysql</span><br><span class="line"># 从服务器复制到容器</span><br><span class="line">docker cp &#x2F;dockerData&#x2F;mysql&#x2F;mysqld.cnf mysql:&#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf</span><br></pre></td></tr></table></figure><p>改完之后记得重启mysql，<code>docker restart mysql</code></p><h2 id="启用lute"><a href="#启用lute" class="headerlink" title="启用lute"></a>启用lute</h2><p><strong>此内容适用于solo3.6.5+</strong></p><ul><li>启动Lute参考<a href="https://hacpai.com/article/1569240189601">Lute HTTP 使用指南</a></li><li>在solo启动参数末尾追加 <code>--lute_http=http://127.0.0.1:8249</code>/<code>--lute_http=http://localhost:8249</code>/<code>--lute_http=</code><br>solo成功启动后在终端输入 <code>docker logs solo</code>,日志显示有 <code>luteAvailable=true</code>即表示启用lute成功</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Solo </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法的时间复杂度计算</title>
      <link href="/articles/2019/08/03/1564826524260.html"/>
      <url>/articles/2019/08/03/1564826524260.html</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>   时间复杂度与空间复杂度直接决定着一个算法的好坏，而大多时候在设计算法是时间复杂度要优先于空间复杂度。</p><h2 id="时间复杂度是什么-以下内容来着维基百科"><a href="#时间复杂度是什么-以下内容来着维基百科" class="headerlink" title="时间复杂度是什么(以下内容来着维基百科)"></a>时间复杂度是什么(以下内容来着维基百科)</h2><blockquote><p>在<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6" title="计算机科学">计算机科学</a>中，<a href="https://zh.wikipedia.org/wiki/%E7%AE%97%E6%B3%95" title="算法">算法</a>的<strong>时间复杂度</strong>（Time complexity）是一个<a href="https://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B0" title="函数">函数</a>，它定性描述该算法的运行时间。这是一个代表算法输入值的<a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2" title="字符串">字符串</a>的长度的函数。时间复杂度常用<a href="https://zh.wikipedia.org/wiki/%E5%A4%A7O%E7%AC%A6%E5%8F%B7" title="大O符号">大O符号</a>表述，不包括这个函数的低阶项和首项系数。使用这种方式时，时间复杂度可被称为是<a href="https://zh.wikipedia.org/wiki/%E6%B8%90%E8%BF%91%E5%88%86%E6%9E%90" title="渐近分析">渐近</a>的，亦即考察输入值大小趋近无穷时的情况。例如，如果一个算法对于任何大小为 <em>n</em> （必须比 <em>n0</em> 大）的输入，它至多需要 5<em>n</em>3 + 3<em>n</em> 的时间运行完毕，那么它的渐近时间复杂度是 O(<em>n</em>3)。<br/><br>为了计算时间复杂度，我们通常会估计算法的操作单元数量，每个单元运行的时间都是相同的。因此，总运行时间和算法的操作单元数量最多相差一个常量系数。<br/><br>相同大小的不同输入值仍可能造成算法的运行时间不同，因此我们通常使用算法的最坏情况复杂度，记为 <strong><em>T</em>(<em>n</em>)</strong> ，定义为任何大小的输入 <em>n</em> 所需的最大运行时间。另一种较少使用的方法是平均情况复杂度，通常有特别指定才会使用。时间复杂度可以用函数 <em>T</em>(<em>n</em>) 的自然特性加以分类，举例来说，有着 <em>T</em>(<em>n</em>) = <em>O</em>(<em>n</em>) 的算法被称作“线性时间算法”；而 <em>T</em>(<em>n</em>) = <em>O</em>(<em>M**n</em>) 和 <em>M**n</em>= O(<em>T</em>(<em>n</em>)) ，其中 <em>M</em> ≥ <em>n</em> &gt; 1 的算法被称作“指数时间算法”。</p></blockquote><h2 id="常见算法时间复杂度"><a href="#常见算法时间复杂度" class="headerlink" title="常见算法时间复杂度"></a>常见算法时间复杂度</h2><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-8ba9a3db.png" alt="image.png"></p><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-3a8afbfd.png" alt="image.png"></p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-fc45c2ae.png" alt="image.png"></p><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-ed711758.png" alt="image.png"></p><h3 id="图"><a href="#图" class="headerlink" title="图"></a>图</h3><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-813479ac.png" alt="image.png"></p><h2 id="计算时间复杂度"><a href="#计算时间复杂度" class="headerlink" title="计算时间复杂度"></a>计算时间复杂度</h2><p><strong>算法的时间复杂度，用来度量算法的运行时间，记作: T(n) = O(f(n))。它表示随着 输入大小n 的增大，算法执行需要的时间的增长速度可以用 f(n) 来描述</strong><br>1.在一个函数中，常数项对于函数的增长速度并不大，随意当T(n)=一个常数事，我们就可以说这个算法的时间复杂度为O(1)；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">   i :&#x3D; 1</span><br><span class="line">   fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 该函数总共两条执行语句，所以时间复杂度T(n) &#x3D; 2，所以时间复杂度为O(1)</span><br></pre></td></tr></table></figure><p>2.如果T(n)不等于一个常数项时，可直接将常数项省略</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for i :&#x3D; 0; i &lt; n; i++ &#123;</span><br><span class="line">sum +&#x3D; i</span><br><span class="line">&#125;</span><br><span class="line">sum +&#x3D; 1</span><br><span class="line">sum +&#x3D; 2</span><br><span class="line">sum +&#x3D; 3</span><br><span class="line">此函数共执行了 n+3次，所以T(n) &#x3D; n+3，时间复杂度为O(n)</span><br></pre></td></tr></table></figure><p>3.对于有高次幂的，低次幂的影响可以说是微乎其微。比如n^3对于n^2,n^2对于n，由于时间复杂度要求不是特别高，所以低次幂直接忽略</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">for i :&#x3D; 0; i &lt; n; i++ &#123;</span><br><span class="line"></span><br><span class="line">        for j :&#x3D; 0; j &lt; n; j++ &#123;</span><br><span class="line"></span><br><span class="line">            for k :&#x3D; 0; k &lt; n; k++ &#123;</span><br><span class="line">                &#x2F;&#x2F; xxx</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for i :&#x3D; 0; i &lt; n; i++ &#123;</span><br><span class="line">        for j :&#x3D; 0; j &lt; n; j++ &#123;</span><br><span class="line">                &#x2F;&#x2F; xxx</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">上面函数的执行次数为n^3 + n^2，所以T(n) &#x3D; n^3 + n^2, 时间复杂度为O(n^3)</span><br></pre></td></tr></table></figure><p>4.因为函数的阶数对函数的增长速度的影响是最显著的，所以我们忽略与最高阶相乘的常数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">比如</span><br><span class="line">T(n) &#x3D; 3n^3，此时时间复杂度为 O(n^3)。</span><br></pre></td></tr></table></figure><p><strong>综合一下:只取最高次幂，最高次幂常数归1</strong></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《追风筝的人》阅读笔记</title>
      <link href="/articles/2019/07/30/1564419665414.html"/>
      <url>/articles/2019/07/30/1564419665414.html</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;离开成都时，励志要成为一个书虫，所以心一横买了Kindle，在买了一个半月后终于看完了第一本书——《追风筝的人》。</p><p>&emsp;&emsp;“一个不能为自己挺身而出的孩子，长大之后只能是个懦夫”，如其父亲所说少年时的阿米尔确实是一个懦夫，在哈桑被欺凌时没有挺身而出，没有为自己口中的朋友挺身而出，这也成为了两人之间不可逾越的鸿沟。这个时候我试着问了一下自己，如果我是阿米尔我是否会挺身而出，是否会不顾一切的冲出求，而被阿塞弗折磨、欺辱与伤害。哈桑 —— 一个哈扎拉人，所以我理解了阿米尔，在那样的背景下，没有真正的人人平等，即使他们之间的关系如朋友般亲密也无济于事。</p><p>&emsp;&emsp;在阿富汗遭到俄国入侵后，阿米尔与父亲来到了美国。在这里，他从一个平凡的人开始做起，过着一个普通人的生活，他失去了曾经的优越感，也和自己的父亲有了童年所没有的父子之情，生活过得还是非常幸福。</p><p>&emsp;&emsp;当接到 拉辛汗电话时，他没有犹豫就走上了自我救赎的道路。在见到拉辛汗后，随之而来的是三观的崩塌，父亲的“偷窃”、哈桑的死亡、故乡的改变。虽有过犹豫，但是阿米尔战胜了自己属于美国人的优越感，走上了自我救赎的道路。</p><p>&emsp;&emsp;文章除了对任务感情的描写，也详细的描述了阿富汗战后的惨状，索拉博是无数阿呼喊儿童的缩影，我很庆幸我所在的国家没有战乱。</p><p>&emsp;&emsp;”我追。一个成年人在一群尖叫的孩子中奔跑。但我不在乎。我追，风拂过我脸庞，我唇上挂着一个潘杰希尔峡谷那样大大的微笑。我追”</p><p>&emsp;&emsp;文章的结局对我来说是一个完美的结局，完成自我救赎的阿米尔仿佛回到了童年与哈桑一起追风筝的世界</p><h4 id="书籍下载：追风筝的人kindle正版-rar"><a href="#书籍下载：追风筝的人kindle正版-rar" class="headerlink" title="书籍下载：追风筝的人kindle正版.rar"></a>书籍下载：<a href="https://cdn.jsdelivr.net/gh/inkdp/CDN@master/other/%E8%BF%BD%E9%A3%8E%E7%AD%9D%E7%9A%84%E4%BA%BAkindle%E6%AD%A3%E7%89%88-145b724e.rar">追风筝的人kindle正版.rar</a></h4>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日刷leetcode--简单版（二）</title>
      <link href="/leetcode2.html"/>
      <url>/leetcode2.html</url>
      
        <content type="html"><![CDATA[<h3 id="返回总目录"><a href="#返回总目录" class="headerlink" title="返回总目录"></a>返回总目录</h3><p><a href="/leetcode.html">日刷leetcode–简单版</a></p><hr><h3 id="26-删除排序数组中的重复项"><a href="#26-删除排序数组中的重复项" class="headerlink" title="26. 删除排序数组中的重复项"></a>26. 删除排序数组中的重复项</h3><blockquote><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。<br>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。<br>示例 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">给定数组 nums &#x3D; [1,1,2],</span><br><span class="line">函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。</span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">给定 nums &#x3D; [0,0,1,1,1,2,2,3,3,4],</span><br><span class="line">函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。</span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><p>说明:<br>为什么返回数值是整数，但输出的答案是数组呢?<br>请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。<br>你可以想象内部操作如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝</span><br><span class="line">int len &#x3D; removeDuplicates(nums);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 在函数里修改输入数组对于调用者是可见的。</span><br><span class="line">&#x2F;&#x2F; 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。</span><br><span class="line">for (int i &#x3D; 0; i &lt; len; i++) &#123;</span><br><span class="line">    print(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>题目中已说明，这是有序数组</li><li>采用双指针的方式，一个用于循环，一个用于记录不同的数</li></ul><h5 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeDuplicates</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">i := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> j :=  <span class="number">1</span>; j &lt; <span class="built_in">len</span>(nums); j++ &#123;</span><br><span class="line"><span class="keyword">if</span> nums[i] != nums[j] &#123;</span><br><span class="line">i++</span><br><span class="line">nums[i] = nums[j]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> i + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h5><blockquote><p>执行用时 :100 ms, 在所有 Go 提交中击败了 84.75%的用户<br>内存消耗 :7.9 MB, 在所有 Go 提交中击败了 66.91%的用户</p></blockquote><hr><h3 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27. 移除元素"></a>27. 移除元素</h3><blockquote><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，返回移除后数组的新长度。<br>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。<br>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。<br>示例 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">给定 nums &#x3D; [3,2,2,3], val &#x3D; 3,</span><br><span class="line">函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。</span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">给定 nums &#x3D; [0,1,2,2,3,0,4,2], val &#x3D; 2,</span><br><span class="line">函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。</span><br><span class="line">注意这五个元素可为任意顺序。</span><br><span class="line">你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><p>说明:<br>为什么返回数值是整数，但输出的答案是数组呢?<br>请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。<br>你可以想象内部操作如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝</span><br><span class="line">int len &#x3D; removeElement(nums, val);</span><br><span class="line">&#x2F;&#x2F; 在函数里修改输入数组对于调用者是可见的。</span><br><span class="line">&#x2F;&#x2F; 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。</span><br><span class="line">for (int i &#x3D; 0; i &lt; len; i++) &#123;</span><br><span class="line">    print(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>因为<code>你不需要考虑数组中超出新长度后面的元素</code>，所以遇到相同的移除就完事了</li></ul><h5 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeElement</span><span class="params">(nums []<span class="keyword">int</span>, val <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line"><span class="keyword">if</span> nums[i] == val &#123;</span><br><span class="line">nums = <span class="built_in">append</span>(nums[:i], nums[i+<span class="number">1</span>:]...)</span><br><span class="line">i--</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span>(nums)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h5><blockquote><p>执行用时 :0 ms, 在所有 Go 提交中击败了 100.00%的用户<br>内存消耗 :2.4 MB, 在所有 Go 提交中击败了 44.67%的用户</p></blockquote><hr><h3 id="28-实现-strStr"><a href="#28-实现-strStr" class="headerlink" title="28. 实现 strStr()"></a>28. 实现 strStr()</h3><blockquote><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><p>实现 strStr() 函数。<br>给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个 &gt; 位置 (从 0 开始)。如果不存在，则返回  -1。<br>示例 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: haystack &#x3D; &quot;hello&quot;, needle &#x3D; &quot;ll&quot;</span><br><span class="line">输出: 2</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: haystack &#x3D; &quot;aaaaa&quot;, needle &#x3D; &quot;bba&quot;</span><br><span class="line">输出: -1</span><br></pre></td></tr></table></figure></blockquote><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>定义两个数组指针 i 和 j，分别记录 haystack 和 needle</li><li>i 递增，从左往右依次匹配，如果当前 haystack 和 needle 字符相等，则继续匹配下一位，直到 j 的长度大于 needle 或者 haystack 和 needle 字符不相等</li><li>如果 haystack 和 needle 字符不相等，则 i 回到第一次匹配的位置，j 归 0 等待下一次匹配</li><li>判断 j 是否等于 needle 的长度，如果是这表示完全匹配</li></ul><h5 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">removeElement</span><span class="params">(nums []<span class="keyword">int</span>, val <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line"><span class="keyword">if</span> nums[i] == val &#123;</span><br><span class="line">nums = <span class="built_in">append</span>(nums[:i], nums[i+<span class="number">1</span>:]...)</span><br><span class="line">i--</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span>(nums)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果"></a>运行结果</h5><blockquote><p>执行用时 :0 ms, 在所有 Go 提交中击败了 100.00%的用户<br>内存消耗 :2.3 MB, 在所有 Go 提交中击败了 53.10%的用户</p></blockquote><h3 id="35-搜索插入位置"><a href="#35-搜索插入位置" class="headerlink" title="35. 搜索插入位置"></a>35. 搜索插入位置</h3><blockquote><h4 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。<br>你可以假设数组中无重复元素。<br>示例 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,3,5,6], 5</span><br><span class="line">输出: 2</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,3,5,6], 2</span><br><span class="line">输出: 1</span><br></pre></td></tr></table></figure><p>示例 3:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,3,5,6], 7</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure><p>示例 4:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,3,5,6], 0</span><br><span class="line">输出: 0</span><br></pre></td></tr></table></figure></blockquote><h4 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>这似乎是经典的二分了吧，所以微分就完事了</li></ul><h5 id="示例代码-3"><a href="#示例代码-3" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">searchInsert</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">l, r := <span class="number">0</span>, <span class="built_in">len</span>(nums)</span><br><span class="line"><span class="keyword">for</span> ; l &lt; r; &#123;</span><br><span class="line">mid := (l + r) / <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> nums[mid] == target &#123;</span><br><span class="line"><span class="keyword">return</span> mid</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> nums[mid] &lt; target &#123;</span><br><span class="line">l = mid + <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">r = mid</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> l</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行结果-3"><a href="#运行结果-3" class="headerlink" title="运行结果"></a>运行结果</h5><blockquote><p>执行用时 :4 ms, 在所有 Go 提交中击败了 97.04%的用户<br>内存消耗 :3.1 MB, 在所有 Go 提交中击败了 50.79%的用户</p></blockquote><h3 id="38-报数"><a href="#38-报数" class="headerlink" title="38. 报数"></a>38. 报数</h3><blockquote><h4 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h4><p>报数序列是一个整数序列，按照其中的整数的顺序进行报数，得到下一个数。其前五项如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.     1</span><br><span class="line">2.     11</span><br><span class="line">3.     21</span><br><span class="line">4.     1211</span><br><span class="line">5.     111221</span><br><span class="line">1 被读作  &quot;one 1&quot;  (&quot;一个一&quot;) , 即 11。</span><br><span class="line">11 被读作 &quot;two 1s&quot; (&quot;两个一&quot;）, 即 21。</span><br><span class="line">21 被读作 &quot;one 2&quot;,  &quot;one 1&quot; （&quot;一个二&quot; ,  &quot;一个一&quot;) , 即 1211。</span><br></pre></td></tr></table></figure><p>给定一个正整数 n（1 ≤ n ≤ 30），输出报数序列的第 n 项。<br>注意：整数顺序将表示为一个字符串。<br>示例 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 1</span><br><span class="line">输出: &quot;1&quot;</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 4</span><br><span class="line">输出: &quot;1211&quot;</span><br></pre></td></tr></table></figure></blockquote><h4 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>这道题其实并不难，难得是题目的描述可能让你弄不明白是怎么回事,</li><li>从第二行开始，后面的每一行都是数前面的<code>数字</code>有几个连续的，比如第二行数第一行有<code>1</code>个<code>1</code>，所以第二行对应<code>11</code></li><li>依次类推，第二行有<code>2</code>个<code>1</code>，所以第三行<code>21</code></li><li>4: <code>1211</code></li><li>5: <code>111221</code>(数连续的，<code>1</code>个<code>1</code>，<code>1</code>个<code>2</code>,<code>2</code>个<code>1</code>)</li><li>…</li><li>我们循环判断一个数字字符串，首先定义一个参照标准:<code>this := str[0]</code>，一个计数器<code>count := 1</code>,循环和从<code>str[1]</code>开始，判断<code>str[i] == this</code>，为真则<code>count ++ </code>，否则从新对<code>this</code>与<code>count</code>赋值。这样我们就完成了一次报数操作</li><li>要求求到第 N 位，这个 N 可以循环也可以递归，看个人喜好</li></ul><h5 id="示例代码-4"><a href="#示例代码-4" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">countStr</span><span class="params">(n <span class="keyword">int</span>, str []<span class="keyword">byte</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br><span class="line">s := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">0</span>, <span class="built_in">len</span>(str)*<span class="number">2</span>)</span><br><span class="line">this := str[<span class="number">0</span>]</span><br><span class="line">count := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(str); i++ &#123;</span><br><span class="line"><span class="keyword">if</span> this == str[i] &#123;</span><br><span class="line">count++</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="keyword">byte</span>(count+<span class="string">&#x27;0&#x27;</span>), this) <span class="comment">// count为int型，+&#x27;0&#x27;相当于+48，得到count对应的ASCII码值</span></span><br><span class="line">this = str[i]</span><br><span class="line">count = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="keyword">byte</span>(count+<span class="string">&#x27;0&#x27;</span>), this)</span><br><span class="line"><span class="keyword">return</span> countStr(n<span class="number">-1</span>, s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行结果-4"><a href="#运行结果-4" class="headerlink" title="运行结果"></a>运行结果</h5><blockquote><p>执行用时 :0 ms, 在所有 Go 提交中击败了 100.00%的用户<br>内存消耗 :2.2 MB, 在所有 Go 提交中击败了 50.58%的用户</p></blockquote><h3 id="53-最大子序列合"><a href="#53-最大子序列合" class="headerlink" title="53. 最大子序列合"></a>53. 最大子序列合</h3><blockquote><h4 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><p>示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [-2,1,-3,4,-1,2,1,-5,4],</span><br><span class="line">输出: 6</span><br><span class="line">解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。</span><br></pre></td></tr></table></figure><p>进阶:</p><p>如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的分治法求解。</p></blockquote><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路 1"></a>解题思路 1</h4><ul><li>暴力法，时间复杂度为 O(n^2)使用双循环的形式累加即可，这里不过多阐述</li></ul><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路 2"></a>解题思路 2</h4><ul><li>分治法，这道题分治法并不是最简方式，但还是大概讲下思路</li><li>最大子序和要么在左半边，要么在右半边，要么是穿过中间，对于左右边的序列，情况也是一样，因此可以用递归处理。中间部分的则可以直接计算出来，3 个值取最大的即可，时间复杂度是 O(nlogn)</li></ul><h5 id="示例代码-5"><a href="#示例代码-5" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxSubArray</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> maxSum(nums, <span class="number">0</span>, <span class="built_in">len</span>(nums)<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxSum</span><span class="params">(nums []<span class="keyword">int</span>, l, r <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> l == r &#123;</span><br><span class="line">        <span class="keyword">return</span> nums[l]</span><br><span class="line">    &#125;</span><br><span class="line">    mid := (l + r) / <span class="number">2</span></span><br><span class="line">    maxLeft := maxSum(nums, l, mid)</span><br><span class="line">    maxRight := maxSum(nums, mid+<span class="number">1</span>, r)</span><br><span class="line">    lSum, sum := math.MinInt64, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i := mid; i &gt;= l; i-- &#123;</span><br><span class="line">        sum += nums[i]</span><br><span class="line">        <span class="keyword">if</span> sum &gt; lSum &#123;</span><br><span class="line">            lSum = sum</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    rSum, sum := math.MinInt64, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i := mid + <span class="number">1</span>; i &lt;= r; i++ &#123;</span><br><span class="line">        sum += nums[i]</span><br><span class="line">        <span class="keyword">if</span> sum &gt; rSum &#123;</span><br><span class="line">            rSum = sum</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max(max(maxLeft, maxRight), lSum+rSum)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="运行结果-5"><a href="#运行结果-5" class="headerlink" title="运行结果"></a>运行结果</h5><blockquote><p>执行用时 :8 ms, 在所有 Go 提交中击败了 92.80%的用户</p><p>内存消耗 :3.3 MB, 在所有 Go 提交中击败了 73.67%的用户</p></blockquote><h4 id="解题思路-2-1"><a href="#解题思路-2-1" class="headerlink" title="解题思路 2"></a>解题思路 2</h4><ul><li>动态规划，有关这个思路我找到了一段通熟易懂的理解方式</li></ul><blockquote><p>假设你是一个选择性遗忘的赌徒，数组表示你这几天来赢钱或者输钱，<br>你用 sum 来表示这几天来的输赢，<br>用 ans 来存储你手里赢到的最多的钱，</p><p>如果昨天你手上还是输钱（sum &lt; 0），你忘记它，明天继续赌钱；<br>如果你手上是赢钱(sum &gt; 0), 你记得，你继续赌钱；<br>你记得你手赢到的最多的钱</p></blockquote><h5 id="示例代码-6"><a href="#示例代码-6" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxSubArrays</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    sum, ans := math.MinInt64, math.MinInt64</span><br><span class="line">    <span class="keyword">for</span> _,v := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        <span class="keyword">if</span> sum &gt; <span class="number">0</span> &#123;</span><br><span class="line">            sum += v</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            sum = v</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ans &lt; sum &#123;</span><br><span class="line">            ans = sum</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行结果-6"><a href="#运行结果-6" class="headerlink" title="运行结果"></a>运行结果</h5><blockquote><p>执行用时 :4 ms, 在所有 Go 提交中击败了 99.10%的用户<br>内存消耗 :3.3 MB, 在所有 Go 提交中击败了 80.78%的用户</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日刷leetcode（目录篇）</title>
      <link href="/leetcode.html"/>
      <url>/leetcode.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>谨以此贴记录我刷题的过程，那么我为啥要刷题呢</p><ol><li>熟悉各互联网公司的算法题目，为找工作做准备。</li><li>复习以前学过的编程语言，LeetCode支持几乎所有主流编程语言，大家可以用不同语言来做题。</li><li>熟悉常见的算法和数据结构，LeetCode提供了交流平台，一些大神会将自己的解法贴出来共享，有些巧妙的解法实在令人叫绝，虽然几乎都是英文，但上面的国人也特别多（中文拼音名字&gt;_&lt;）。</li><li>学习别人的编程思维，加快编程的速度，避免常见的BUG。</li></ol><p>以上内容摘抄自网络，纯属瞎说，真是的原因是：</p><ul><li>因为上班工作做完后，不敢明目张胆的摸鱼</li><li>下班无聊不想打游戏</li><li>算法真的很弱</li><li>……</li></ul><p>时过境迁，上次打开leetcode的时候还没有中文版，而现在已经有了–<a href="https://leetcode-cn.com/">力扣</a>。<br>由于篇幅的问题，我觉得5题一篇，话不多说。</p><h3 id="目录："><a href="#目录：" class="headerlink" title="目录："></a>目录：</h3><ul><li><a href="https://inkdp.cn/leetcode1.html">日刷leetcode–简单版系列（一）</a></li><li><a href="https://inkdp.cn/leetcode2.html">日刷leetcode–简单版系列（二）</a></li><li><a href="https://inkdp.cn/leetcode3.html">日刷leetcode–简单版系列（三）</a></li><li><a href="https://inkdp.cn/leetcode4.html">日刷leetcode–简单版系列（四）</a></li><li><a href="https://inkdp.cn/leetcode5.html">日刷leetcode–简单版系列（五）</a></li><li><a href="https://inkdp.cn/leetcode6.html">日刷leetcode–简单版系列（六）</a></li></ul><h4 id="简单篇暂停更新，后续打算系统的刷，目录做出更改"><a href="#简单篇暂停更新，后续打算系统的刷，目录做出更改" class="headerlink" title="简单篇暂停更新，后续打算系统的刷，目录做出更改"></a>简单篇暂停更新，后续打算系统的刷，目录做出更改</h4><p>全系列源码：<a href="https://github.com/InkDP/leetcode">https://github.com/InkDP/leetcode</a></p><ol><li>数组<ul><li>简单[进行中]：此篇章尽量补书写题解<ul><li><a href="https://inkdp.cn/leetcode_array1.html">leetcode-数组系列1</a></li><li><a href="/skill/algorithm/51727.html">leetcode-数组系列2</a></li><li><a href="/skill/algorithm/56303.html">leetcode-数组系列3</a></li></ul></li><li>中等[未开始]</li><li>困难[未开始]</li></ul></li><li>字符串</li><li>队列</li><li>栈</li><li>哈希表</li><li>树</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go 语言圣经练习解答 -- 第四章 (关闭)</title>
      <link href="/articles/2019/06/12/1560331304695.html"/>
      <url>/articles/2019/06/12/1560331304695.html</url>
      
        <content type="html"><![CDATA[<h2 id="go语言圣经-The-Go-Programming-Language-第四章练习题答案"><a href="#go语言圣经-The-Go-Programming-Language-第四章练习题答案" class="headerlink" title="go语言圣经(The Go Programming Language)第四章练习题答案"></a>go语言圣经(The Go Programming Language)第四章练习题答案</h2><h4 id="练习-4-1：-编写一个函数，计算两个SHA256哈希码中不同bit的数目。（参考2-6-2节的-PopCount函数。"><a href="#练习-4-1：-编写一个函数，计算两个SHA256哈希码中不同bit的数目。（参考2-6-2节的-PopCount函数。" class="headerlink" title="练习 4.1： 编写一个函数，计算两个SHA256哈希码中不同bit的数目。（参考2.6.2节的 PopCount函数。)"></a>练习 4.1： 编写一个函数，计算两个SHA256哈希码中不同bit的数目。（参考2.6.2节的 PopCount函数。)</h4><blockquote><p>解题思路</p></blockquote><ul><li>循环字节数组</li><li>循环字节bit，对比是否相同<iframe style="border:1px solid" src="https://wide.b3log.org/playground/1de1b0989661e96a455fb5f24c9752d2.go" width="99%" height="600"></iframe></li></ul><h4 id="练习-4-2：-编写一个程序，默认打印标准输入的以SHA256哈希码，也可以通过命令行标准参-数选择SHA384或SHA512哈希算法。"><a href="#练习-4-2：-编写一个程序，默认打印标准输入的以SHA256哈希码，也可以通过命令行标准参-数选择SHA384或SHA512哈希算法。" class="headerlink" title="练习 4.2： 编写一个程序，默认打印标准输入的以SHA256哈希码，也可以通过命令行标准参 数选择SHA384或SHA512哈希算法。"></a>练习 4.2： 编写一个程序，默认打印标准输入的以SHA256哈希码，也可以通过命令行标准参 数选择SHA384或SHA512哈希算法。</h4><blockquote><p>解题思路</p></blockquote><ul><li>获取命令行输入的参数</li><li>通过命令行参数返回值<iframe style="border:1px solid" src="https://wide.b3log.org/playground/8a883544635b919cd2f822312adb81cf.go" width="99%" height="600"></iframe>> 实际效果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-0d9ee8d7.png" alt="image.png"></p><h4 id="练习-4-3-重写reverse函数-使用数组指针代替slice。"><a href="#练习-4-3-重写reverse函数-使用数组指针代替slice。" class="headerlink" title="练习 4.3: 重写reverse函数,使用数组指针代替slice。"></a>练习 4.3: 重写reverse函数,使用数组指针代替slice。</h4><blockquote><p>解题思路(无)</p></blockquote><iframe style="border:1px solid" src="https://wide.b3log.org/playground/12a10f74a7fc189d271d8c6aa1de3d95.go" width="99%" height="600"></iframe><h4 id="练习-4-4-编写一个rotate函数-通过一次循环完成旋转。"><a href="#练习-4-4-编写一个rotate函数-通过一次循环完成旋转。" class="headerlink" title="练习 4.4: 编写一个rotate函数,通过一次循环完成旋转。"></a>练习 4.4: 编写一个rotate函数,通过一次循环完成旋转。</h4><blockquote><p>解题思路</p></blockquote><ul><li>从新创建一个数组，新数组下标为原数组下标加上偏移值</li><li>如果超出最大长度则从最左边开始</li></ul><iframe style="border:1px solid" src="https://wide.b3log.org/playground/c7b0b5fc4d02333f29038bd4953cf880.go" width="99%" height="600"></iframe><h4 id="练习-4-6-写一个函数在原地完成消除-string中相邻重复的字符串的操作。"><a href="#练习-4-6-写一个函数在原地完成消除-string中相邻重复的字符串的操作。" class="headerlink" title="练习 4.6: 写一个函数在原地完成消除[]string中相邻重复的字符串的操作。"></a>练习 4.6: 写一个函数在原地完成消除[]string中相邻重复的字符串的操作。</h4><blockquote><p>解题思路</p></blockquote><ul><li><strong>原地完成消除</strong> / <strong>相邻重复</strong></li><li>原地消除表示必须在原有的数组上操作</li><li>遇到相同的先前移一位</li><li>下标保持不动继续检测当前位置是否跟下一位重复<iframe style="border:1px solid" src="https://wide.b3log.org/playground/7504134d6e7f8ea5167e9afc393338bc.go" width="99%" height="600"></iframe></li></ul><h4 id="练习-4-6-编写一个函数-原地将一个UTF-8编码的-byte类型的slice中相邻的空格-参考"><a href="#练习-4-6-编写一个函数-原地将一个UTF-8编码的-byte类型的slice中相邻的空格-参考" class="headerlink" title="练习 4.6: 编写一个函数,原地将一个UTF-8编码的[]byte类型的slice中相邻的空格(参考"></a>练习 4.6: 编写一个函数,原地将一个UTF-8编码的[]byte类型的slice中相邻的空格(参考</h4><p>unicode.IsSpace)替换成一个空格返回</p><blockquote><p>解题思路</p></blockquote><ul><li>基本一4.5一致，只是判断字母变成了判断空格</li></ul><iframe style="border:1px solid" src="https://wide.b3log.org/playground/4699347511e21456ae37d8d335046732.go" width="99%" height="600"></iframe><h4 id="练习-4-7-修改reverse函数用于原地反转UTF-8编码的-byte。是否可以不用分配额外的内"><a href="#练习-4-7-修改reverse函数用于原地反转UTF-8编码的-byte。是否可以不用分配额外的内" class="headerlink" title="练习 4.7: 修改reverse函数用于原地反转UTF-8编码的[]byte。是否可以不用分配额外的内"></a>练习 4.7: 修改reverse函数用于原地反转UTF-8编码的[]byte。是否可以不用分配额外的内</h4><p>存?</p><blockquote><p>解题思路</p></blockquote><ul><li>与原本的reverse基本一致<iframe style="border:1px solid" src="https://wide.b3log.org/playground/1f127d8f4ff6c25d302547ebef5b5a35.go" width="99%" height="600"></iframe></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日刷leetcode--简单版（一）</title>
      <link href="/leetcode1.html"/>
      <url>/leetcode1.html</url>
      
        <content type="html"><![CDATA[<h3 id="返回总目录"><a href="#返回总目录" class="headerlink" title="返回总目录"></a>返回总目录</h3><p><a href="/leetcode.html">日刷leetcode–简单版</a></p><h3 id="1-两数之后"><a href="#1-两数之后" class="headerlink" title="1.两数之后"></a>1.两数之后</h3><blockquote><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">给定 nums &#x3D; [2, 7, 11, 15], target &#x3D; 9</span><br><span class="line">因为 nums[0] + nums[1] &#x3D; 2 + 7 &#x3D; 9</span><br><span class="line">所以返回 [0, 1]</span><br></pre></td></tr></table></figure></blockquote><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路 1"></a>解题思路 1</h4><ul><li>暴力法，双循环相加结果等于 target 就返回</li></ul><h5 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">func twoSum(nums []int, target int) []int &#123;</span><br><span class="line">    for i :&#x3D; 0; i &lt; len(nums); i++ &#123;</span><br><span class="line">        for j :&#x3D; i + 1; j &lt; len(nums); j++ &#123;</span><br><span class="line">            if nums[i] + nums[j] &#x3D;&#x3D;target &#123;</span><br><span class="line">                return []int&#123;i,j&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h5><blockquote><p>执行用时 :56 ms, 在所有 Go 提交中击败了 32.33%的用户<br>内存消耗 :3 MB, 在所有 Go 提交中击败了 78.76%的用户</p></blockquote><h4 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路 2"></a>解题思路 2</h4><ul><li>遍历一次，求当前值的下标是否存在哈希表中，存在就返回，不存在就将当前值与下标存入哈希表</li></ul><h5 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    maps := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> k, v := <span class="keyword">range</span> nums &#123;</span><br><span class="line">        difference := target - v</span><br><span class="line">        <span class="keyword">if</span> _, ok := maps[difference]; ok &#123;  <span class="comment">// 判断是否存在指定k的值</span></span><br><span class="line">            <span class="keyword">return</span> []<span class="keyword">int</span>&#123;maps[difference], k&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        maps[v] = k <span class="comment">// 将值作为key存储到map中</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h5><blockquote><p>执行用时 :4 ms, 在所有 Go 提交中击败了 89.93%的用户<br>内存消耗 :3.8 MB, 在所有 Go 提交中击败了 30.06%的用户</p></blockquote><hr><h3 id="7-整数反转"><a href="#7-整数反转" class="headerlink" title="7.整数反转"></a>7.整数反转</h3><blockquote><h5 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h5><p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。<br>示例 1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 123</span><br><span class="line">输出: 321</span><br></pre></td></tr></table></figure><p>示例 2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: -123</span><br><span class="line">输出: -321</span><br></pre></td></tr></table></figure><p>示例 3</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 120</span><br><span class="line">输出: 21</span><br></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [− 231,  231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</p></blockquote><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>依次取模再乘以 10 即可，注意取值范围</li></ul><h5 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverse</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    num := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x != <span class="number">0</span> &#123;</span><br><span class="line">num = num*<span class="number">10</span> + x%<span class="number">10</span></span><br><span class="line">x = x / <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> num &gt; math.MaxInt32 || num &lt; math.MinInt32 &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> num</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果"></a>运行结果</h5><blockquote><p>执行用时 :0 ms, 在所有 Go 提交中击败了 100.00%的用户<br>内存消耗 :2.2 MB, 在所有 Go 提交中击败了 41.71%的用户</p></blockquote><hr><h3 id="9-回文数"><a href="#9-回文数" class="headerlink" title="9.回文数"></a>9.回文数</h3><blockquote><h5 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h5><p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。<br>示例 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 121</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: -121</span><br><span class="line">输出: false</span><br><span class="line">解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</span><br></pre></td></tr></table></figure><p>示例 3:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: 10</span><br><span class="line">输出: false</span><br><span class="line">解释: 从右向左读, 为 01 。因此它不是一个回文数。</span><br></pre></td></tr></table></figure></blockquote><h4 id="解题思路-1-1"><a href="#解题思路-1-1" class="headerlink" title="解题思路 1"></a>解题思路 1</h4><ul><li>从示例中可以看出，负数和 10 的倍数的数都不是回文数，所以首先排除他们</li><li>转换为字符串，从两头往中间判断是否相等</li></ul><h5 id="示例代码-3"><a href="#示例代码-3" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPalindrome</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> x &lt; <span class="number">0</span> || (x != <span class="number">0</span> &amp;&amp; x%<span class="number">10</span> == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">s := strconv.Itoa(x)</span><br><span class="line">fmt.Println(s)</span><br><span class="line"><span class="keyword">for</span> i, j := <span class="number">0</span>, <span class="built_in">len</span>(s)<span class="number">-1</span>; i &lt; j; i, j = i+<span class="number">1</span>, j<span class="number">-1</span> &#123;</span><br><span class="line"><span class="keyword">if</span> s[i] != s[j] &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行结果-3"><a href="#运行结果-3" class="headerlink" title="运行结果"></a>运行结果</h5><blockquote><p>执行用时 :20 ms, 在所有 Go 提交中击败了 81.69%的用户<br>内存消耗 :5.5 MB, 在所有 Go 提交中击败了 15.78%的用户</p></blockquote><h4 id="解题思路-2-1"><a href="#解题思路-2-1" class="headerlink" title="解题思路 2"></a>解题思路 2</h4><ul><li>从示例中可以看出，负数和 10 的倍数的数都不是回文数，所以首先排除他们</li><li>将数字分为两部分，的后半部分反转过来，要求后半部分不得大于前半部分</li><li>查看数字后半部分是否与前半部分相同，相同既是回文数，比如<code>1221</code>前半部分为<code>12</code>，后半部分也为<code>12</code>，所以他是回文数</li><li>如果数字位数为奇数，比如<code>12321</code>就会出现前半部分为<code>12</code>，后半部分为<code>123</code>，这样就不相等了，我们将后半部分除以 10 即可。</li></ul><h5 id="示例代码-4"><a href="#示例代码-4" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPalindrome</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> x &lt; <span class="number">0</span> || (x != <span class="number">0</span> &amp;&amp; x%<span class="number">10</span> == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span></span><br><span class="line"><span class="keyword">for</span> i &lt; x &#123;</span><br><span class="line">i = i * <span class="number">10</span> + x%<span class="number">10</span></span><br><span class="line">x /= <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x == i || x == i/<span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行结果-4"><a href="#运行结果-4" class="headerlink" title="运行结果"></a>运行结果</h5><blockquote><p>执行用时 :4 ms, 在所有 Go 提交中击败了 100.00%的用户<br>内存消耗 :5.1 MB, 在所有 Go 提交中击败了 65.52%的用户</p></blockquote><hr><p><strong>PS:</strong> <font color="red">执行速度感觉是和网速有关的，如果你觉得你的程序够快，就多提交几次。上面思路二的代码一开始 40 多秒。</font></p><hr><h3 id="13-罗马数字转整数"><a href="#13-罗马数字转整数" class="headerlink" title="13. 罗马数字转整数"></a>13. 罗马数字转整数</h3><blockquote><h5 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h5><p>罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">字符          数值</span><br><span class="line">I             1</span><br><span class="line">V             5</span><br><span class="line">X             10</span><br><span class="line">L             50</span><br><span class="line">C             100</span><br><span class="line">D             500</span><br><span class="line">M             1000</span><br></pre></td></tr></table></figure><p>例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。<br>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。</span><br><span class="line">X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。</span><br><span class="line">C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。</span><br></pre></td></tr></table></figure><p>给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。</p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;III&quot;</span><br><span class="line">输出: 3</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;IV&quot;</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure><p>示例 3:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;IX&quot;</span><br><span class="line">输出: 9</span><br></pre></td></tr></table></figure><p>示例 4:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;LVIII&quot;</span><br><span class="line">输出: 58</span><br><span class="line">解释: L &#x3D; 50, V&#x3D; 5, III &#x3D; 3.</span><br></pre></td></tr></table></figure><p>示例 5:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;MCMXCIV&quot;</span><br><span class="line">输出: 1994</span><br><span class="line">解释: M &#x3D; 1000, CM &#x3D; 900, XC &#x3D; 90, IV &#x3D; 4.</span><br></pre></td></tr></table></figure></blockquote><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><ul><li>将罗马数字对应值放入哈希表中，注意哈希表 key 类型，因为字符串通过<code>s[i]</code>的方式取出来是对应的 ASCII ，所以哈希表的 key 最好使用<code>byte</code>类型。</li><li>定义一个变量记录当前罗马数字，循环字符串，依次相加，判断定义的变了是否小于当前相加的罗马数字，是即减去记录值的二倍。</li></ul><h5 id="示例代码-5"><a href="#示例代码-5" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">romanToInt</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">roman := <span class="keyword">map</span>[<span class="keyword">byte</span>]<span class="keyword">int</span>&#123;</span><br><span class="line"><span class="string">&#x27;I&#x27;</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">&#x27;V&#x27;</span>: <span class="number">5</span>,</span><br><span class="line"><span class="string">&#x27;X&#x27;</span>: <span class="number">10</span>,</span><br><span class="line"><span class="string">&#x27;L&#x27;</span>: <span class="number">50</span>,</span><br><span class="line"><span class="string">&#x27;C&#x27;</span>: <span class="number">100</span>,</span><br><span class="line"><span class="string">&#x27;D&#x27;</span>: <span class="number">500</span>,</span><br><span class="line"><span class="string">&#x27;M&#x27;</span>: <span class="number">1000</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> sum <span class="keyword">int</span></span><br><span class="line">index := <span class="number">999</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line">this := roman[s[i]]</span><br><span class="line"><span class="keyword">if</span> index &lt; this &#123;</span><br><span class="line">sum = sum - index*<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">sum += this</span><br><span class="line">index = this</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行结果-5"><a href="#运行结果-5" class="headerlink" title="运行结果"></a>运行结果</h5><blockquote><p>执行用时 :4 ms, 在所有 Go 提交中击败了 97.65%的用户<br>内存消耗 :3 MB, 在所有 Go 提交中击败了 45.05%的用户</p></blockquote><h3 id="14-最长公共前缀"><a href="#14-最长公共前缀" class="headerlink" title="14. 最长公共前缀"></a>14. 最长公共前缀</h3><blockquote><h5 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h5><p>编写一个函数来查找字符串数组中的最长公共前缀。<br>如果不存在公共前缀，返回空字符串 &quot;&quot;。<br>示例 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</span><br><span class="line">输出: &quot;fl&quot;</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</span><br><span class="line">输出: &quot;&quot;</span><br><span class="line">解释: 输入不存在公共前缀。</span><br></pre></td></tr></table></figure></blockquote><h5 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h5><ul><li>使用双循环的方式，取出第一个字符串的的一个字符，依次判断是否与剩余字符串的第一个字符相等</li><li>不相等或者剩余字符串长度不够时返回</li><li>如果双循环没有返回公共前缀则表示只传入了一个字符串，直接返回即可</li></ul><h5 id="示例代码-6"><a href="#示例代码-6" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">longestCommonPrefix</span><span class="params">(strs []<span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(strs) == <span class="number">0</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(strs[<span class="number">0</span>]); i++ &#123;</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">1</span>; j &lt; <span class="built_in">len</span>(strs); j++ &#123;</span><br><span class="line"><span class="keyword">if</span> i == <span class="built_in">len</span>(strs[j]) || strs[j][i] != strs[<span class="number">0</span>][i] &#123;</span><br><span class="line"><span class="keyword">return</span> strs[<span class="number">0</span>][:i]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> strs[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行结果-6"><a href="#运行结果-6" class="headerlink" title="运行结果"></a>运行结果</h5><blockquote><p>执行用时 :0 ms, 在所有 Go 提交中击败了 100.00%的用户<br>内存消耗 :2.5 MB, 在所有 Go 提交中击败了 35.75%的用户</p></blockquote><h3 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20. 有效的括号"></a>20. 有效的括号</h3><blockquote><h5 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h5><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。<br>有效字符串需满足：</p><ol><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。<br>注意空字符串可被认为是有效字符串。<br>示例 1:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;()&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; 示例 2:</span><br></pre></td></tr></table></figure><blockquote><p>输入: “()[]{}”<br>输出: true</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">示例 3:</span><br></pre></td></tr></table></figure><p>输入: “(]”<br>输出: false</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt; 示例 4:</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><blockquote><p>输入: “([)]”<br>输出: false</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">示例 5:</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输入: “{[]}”<br>输出: true</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##### 解题思路</span><br><span class="line"></span><br><span class="line">* 使用栈的特效，后进先出，匹配到右括号时去查询栈最后一个是否是相对应的左括号，如果是则从栈中去除，不是则返回 false</span><br><span class="line">* 最后判断剩余栈长度是否为 0</span><br><span class="line">* 使用切片模仿栈操作</span><br><span class="line"></span><br><span class="line">##### 示例代码</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;go</span><br><span class="line">func isValid(s string) bool &#123;</span><br><span class="line">brackets :&#x3D; map[int32]int32&#123;</span><br><span class="line">&#39;)&#39;: &#39;(&#39;,</span><br><span class="line">&#39;&#125;&#39;: &#39;&#123;&#39;,</span><br><span class="line">&#39;]&#39;: &#39;[&#39;,</span><br><span class="line">&#125;</span><br><span class="line">list :&#x3D; []int32&#123;&#125;</span><br><span class="line">for _, v :&#x3D; range s &#123;</span><br><span class="line">if v &#x3D;&#x3D; &#39;(&#39; || v &#x3D;&#x3D; &#39;&#123;&#39; || v &#x3D;&#x3D; &#39;[&#39; &#123;</span><br><span class="line">list &#x3D; append(list, v)</span><br><span class="line">&#125;else&#123;</span><br><span class="line">l :&#x3D; len(list) - 1</span><br><span class="line">if len(list) !&#x3D; 0 &amp;&amp; list[l] &#x3D;&#x3D; brackets[v] &#123;</span><br><span class="line">list &#x3D; list[:l]</span><br><span class="line">&#125;else&#123;</span><br><span class="line">return false</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return len(list) &#x3D;&#x3D; 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h5 id="运行结果-7"><a href="#运行结果-7" class="headerlink" title="运行结果"></a>运行结果</h5><blockquote><p>执行用时 :0 ms, 在所有 Go 提交中击败了 100.00%的用户<br>内存消耗 :2.1 MB, 在所有 Go 提交中击败了 33.87%的用户</p></blockquote><h3 id="21-合并两个有序链表"><a href="#21-合并两个有序链表" class="headerlink" title="21.合并两个有序链表"></a>21.合并两个有序链表</h3><blockquote><h5 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h5><p>将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。<br>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4</span><br><span class="line">输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</span><br></pre></td></tr></table></figure></blockquote><h5 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h5><ul><li>判断两个链表哪一个较小，然后递归地决定下一个添加到结果里的值。</li><li>判断两个链表是否为空，为空直接返回</li></ul><h5 id="示例代码-7"><a href="#示例代码-7" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mergeTwoLists</span><span class="params">(l1 *ListNode, l2 *ListNode)</span> *<span class="title">ListNode</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> l1 == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> l2</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> l2 == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> l1</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> l1.Val &lt; l2.Val &#123;</span><br><span class="line">l1.Next = mergeTwoLists(l1.Next, l2)</span><br><span class="line"><span class="keyword">return</span> l1</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">l2.Next = mergeTwoLists(l1, l2.Next)</span><br><span class="line"><span class="keyword">return</span> l2</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行结果-8"><a href="#运行结果-8" class="headerlink" title="运行结果"></a>运行结果</h5><blockquote><p>执行用时 :0 ms, 在所有 Go 提交中击败了 100%的用户<br>内存消耗 :2.6 MB, 在所有 Go 提交中击败了 35.89%的用户</p></blockquote><h3 id="返回总目录-1"><a href="#返回总目录-1" class="headerlink" title="返回总目录"></a>返回总目录</h3><p><a href="https://www.jinjianh.com/leetcode.html">日刷leetcode–简单版</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【go 语言圣经】练习答案 -- 目录篇 (关闭)</title>
      <link href="/articles/2019/06/16/1560663440490.html"/>
      <url>/articles/2019/06/16/1560663440490.html</url>
      
        <content type="html"><![CDATA[<h2 id="go语言圣经-The-Go-Programming-Language-练习题答案"><a href="#go语言圣经-The-Go-Programming-Language-练习题答案" class="headerlink" title="go语言圣经(The Go Programming Language)练习题答案"></a>go语言圣经(The Go Programming Language)练习题答案</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>go语言圣经是一本go入门非常不错的书籍，翻译至The Go Programming Language，本文记录该书章节后练习题答案</p><ul><li><a href="https://github.com/ThomasHuke/books/blob/master/gopl-zh.pdf">中文pdf获取地址1</a>  <a href="https://books.studygolang.com/download/gopl-zh.pdf">中文pdf获取地址2</a></li><li><a href="https://github.com/KeKe-Li/book/blob/master/Go/The.Go.Programming.Language.pdf">英文原版获取地址</a></li><li><a href="https://https//weidian.com/item.html?itemID=2176920472">中文实体书获取地址</a> (一个还不赖的盗版书网站)</li><li>由于在书写过程中跟换了博客地址，所以你想阅读所有的需要同时关注两个博客</li><li>1-3章请前往我的<a href="https://blog.csdn.net/q1576962841">CSDN</a>查看</li><li>4-13章请关注我的<a href="https://www.jinjianh.com/">个人博客(金戋博客)</a>或<a href="https://hacpai.com/member/jinjianh/articles">黑客派</a>查看。</li></ul><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li><p><a href="https://blog.csdn.net/q1576962841/article/details/85162346">【go语言圣经】练习答案–第一章</a> （完结）</p></li><li><p><a href="https://blog.csdn.net/q1576962841/article/details/85163080">【go语言圣经】练习答案–第二章</a> （完结）</p></li><li><p><a href="https://blog.csdn.net/q1576962841/article/details/86084461">【go语言圣经】练习答案–第三章</a> （完结）</p></li><li><p><a href="/articles/2019/06/10/1560159392016.html">【go语言圣经】练习答案–第三章(3.10-3.13)</a> （完结）</p></li><li><p><a href="/articles/2019/06/12/1560331304695.html">【go语言圣经】练习答案 – 第四章(更新中)</a></p></li></ul><p>此贴关闭–400多页的书我看不下去了:huaji:，因为我懒</p><p>查看剩余部分习题请移步<a href="https://www.cnblogs.com/taoshihan/p/8677343.html">[日常] Go语言圣经前言</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker导出mysql数据</title>
      <link href="/articles/2019/06/11/1560267833958.html"/>
      <url>/articles/2019/06/11/1560267833958.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&emsp;&emsp;前几天无意中在社区看到一个帖子（<a href="https://hacpai.com/article/1553941852324">记一次清空数据仓库的过程</a>），讲的是自己无意中删库的经历。如文中所讲，大多时候删库这件事我们只是耳闻，并没有遇到过，可要是万一呢，到时候恐怕是追悔莫及，而且mysql也没有oracle的恢复机制，所以备份就成了一个非常有必要的操作。</p><p>&emsp;&emsp;由于没有相关操作经验，所以从零开始讲如何数据，毕竟我还是比较珍惜我的小博客的。</p><h1 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h1><p>&emsp;&emsp;以前也导出过sql文件，但是都是直接用Navicat导出就完事了，但是这次我想实现的是自动备份，最好写成脚本的方式。</p><p>&emsp;&emsp;基本思路：使用命令将数据库数据从docker容器中导出来，以时间戳命名。最多保持7天，过期文件自动删除。</p><h3 id="导出mysql数据"><a href="#导出mysql数据" class="headerlink" title="导出mysql数据"></a>导出mysql数据</h3><h4 id="间接导出"><a href="#间接导出" class="headerlink" title="间接导出"></a>间接导出</h4><p>&emsp;&emsp;mysql 导出数据的命令还是蛮简单的：<code>mysqldump -u 用户名 -p 数据库名 &gt; 导出的文件名</code>，但这是linux里面执行的，我们的放在docker里面，所以要先进入容器，然后执行上述命令。然后你就会惊讶的发现，导出的文件在你的容器里面，然后你再从容器里面copy到你的主机上。这样做会在容器上产生大量sql文件，写定时任务是需要及时清理。</p><h4 id="直接导出"><a href="#直接导出" class="headerlink" title="直接导出"></a>直接导出</h4><p>&emsp;&emsp;上述方法是可行的，但是过于麻烦，有没有一步到位的呢？很显然是有的，命令是这个样子的：<code>docker exec -it [docker容器名称/ID] mysqldump -u[数据库用户名] -p[数据库密码] [数据库名称] &gt; [导出表格路径]</code>，比如我的<code>docker exec -it mysql mysqldump -uroot -p123456 solo &gt; /var/www/solo.sql</code>。没有报错的话，导出的数据库文件就会到你指定的目录下了。</p><h3 id="写成脚本方式运行"><a href="#写成脚本方式运行" class="headerlink" title="写成脚本方式运行"></a>写成脚本方式运行</h3><p>博主是不会写Shell脚本的，所以现学了下，参考<a href="https://github.com/qinjx/30min_guides/blob/master/shell.md">Shell脚本编程30分钟入门</a></p><blockquote><p>间接导出(间接导出时请先创建相关文件目录)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -i mysql bash&lt;&lt;<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line"><span class="comment"># solo 为数据库的名称</span></span><br><span class="line"> XXX为数据库密码</span><br><span class="line">mysqldump -uroot -pXXX solo &gt; /mysqlData/$(date +%Y%m%d).sql</span><br><span class="line"><span class="comment">#删除超过1天的数据</span></span><br><span class="line">find /mysqlData/ -mtime +1 -<span class="built_in">type</span> f | xargs rm -rf</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">EOF</span><br><span class="line"><span class="comment"># 将docker中的备份的数据拷贝到宿主机上。</span></span><br><span class="line">docker cp mysql:/mysqlData/$(date +%Y%m%d).sql /var/www/html/solo/sqlData/</span><br><span class="line"><span class="comment">#删除超过7天的数据</span></span><br><span class="line">find /var/www/html/solo/sqlData -mtime +7 -<span class="built_in">type</span> f | xargs rm -rf</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>直接导出(导出时<code>exec</code>不需指定参数<code>-it</code>)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment"># 进入你要保持数据的文件</span></span><br><span class="line"><span class="built_in">cd</span> /var/www/html/solo/sqlData</span><br><span class="line"><span class="comment"># 导出今日的sql</span></span><br><span class="line">docker <span class="built_in">exec</span> mysql mysqldump -uroot -p123123 solo &gt;`date +%Y%m%d%H%M%S`.sql</span><br><span class="line"><span class="comment"># 删除7天前的sql(+号后面跟天数,N天前,find后指定目录)</span></span><br><span class="line">find . -mtime +7 -<span class="built_in">type</span> f | xargs rm -rf</span><br></pre></td></tr></table></figure><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>&emsp;&emsp;导出的sql文件中会出现一些版本备注信息等，这样的sql文件导入时有时会出现问题，会报错，导入之前需要将sql文件中的无用信息删除。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*!40101 SET @OLD_CHARACTER_SET_CLIENT&#x3D;@@CHARACTER_SET_CLIENT *&#x2F;;</span><br><span class="line">&#x2F;*!40101 SET @OLD_CHARACTER_SET_RESULTS&#x3D;@@CHARACTER_SET_RESULTS *&#x2F;;</span><br><span class="line">&#x2F;*!40101 SET @OLD_COLLATION_CONNECTION&#x3D;@@COLLATION_CONNECTION *&#x2F;;</span><br><span class="line">&#x2F;*!40101 SET NAMES utf8 *&#x2F;;</span><br><span class="line">&#x2F;*!40103 SET @OLD_TIME_ZONE&#x3D;@@TIME_ZONE *&#x2F;;</span><br><span class="line">&#x2F;*!40103 SET TIME_ZONE&#x3D;&#39;+00:00&#39; *&#x2F;;</span><br><span class="line">&#x2F;*!40014 SET @OLD_UNIQUE_CHECKS&#x3D;@@UNIQUE_CHECKS, UNIQUE_CHECKS&#x3D;0 *&#x2F;;</span><br><span class="line">&#x2F;*!40014 SET @OLD_FOREIGN_KEY_CHECKS&#x3D;@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS&#x3D;0 *&#x2F;;</span><br><span class="line">&#x2F;*!40101 SET @OLD_SQL_MODE&#x3D;@@SQL_MODE, SQL_MODE&#x3D;&#39;NO_AUTO_VALUE_ON_ZERO&#39; *&#x2F;;</span><br><span class="line">&#x2F;*!40111 SET @OLD_SQL_NOTES&#x3D;@@SQL_NOTES, SQL_NOTES&#x3D;0 *&#x2F;;</span><br></pre></td></tr></table></figure><p>这样的内容在sql中还不是一两句，到处都是。这里提供一段正则，可快速匹配到sql文件中所有<code>/*!40101XXXXX*/;</code>，通过正则<code>\/\*\![0-9]+\s[\s\S]+?\s\*\/;\n</code>实现快速替换。<br>替换完后的效果如下所示，多舒服。<br><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-3766354f.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> docker </tag>
            
            <tag> Solo </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 语言圣经练习解答 -- 第三章</title>
      <link href="/articles/2019/06/10/1560159392016.html"/>
      <url>/articles/2019/06/10/1560159392016.html</url>
      
        <content type="html"><![CDATA[<h2 id="go语言圣经-The-Go-Programming-Language-第三章练习题答案"><a href="#go语言圣经-The-Go-Programming-Language-第三章练习题答案" class="headerlink" title="go语言圣经(The Go Programming Language)第三章练习题答案"></a>go语言圣经(The Go Programming Language)第三章练习题答案</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>go语言圣经是一本go入门非常不错的书籍，翻译至The Go Programming Language，本文记录该书章节后练习题答案</p><ul><li><a href="https://github.com/ThomasHuke/books/blob/master/gopl-zh.pdf">中文pdf获取地址1</a>  <a href="https://books.studygolang.com/download/gopl-zh.pdf">中文pdf获取地址2</a></li><li><a href="https://github.com/KeKe-Li/book/blob/master/Go/The.Go.Programming.Language.pdf">英文原版获取地址</a></li><li><a href="https://https//weidian.com/item.html?itemID=2176920472">中文实体书获取地址</a> (一个还不赖的盗版书网站)</li><li>本文从第三章练习3.10开始，前面的请查看移步我的<a href="https://blog.csdn.net/q1576962841">CSDN</a></li></ul><h4 id="练习-3-10：-编写一个非递归版本的comma函数，使用bytes-Buffer代替字符串链接操作。"><a href="#练习-3-10：-编写一个非递归版本的comma函数，使用bytes-Buffer代替字符串链接操作。" class="headerlink" title="练习 3.10： 编写一个非递归版本的comma函数，使用bytes.Buffer代替字符串链接操作。"></a>练习 3.10： 编写一个非递归版本的comma函数，使用bytes.Buffer代替字符串链接操作。</h4><blockquote><p>解题思路:</p></blockquote><ul><li>参考书中的comma函数，即实现基本的为数字添加逗号分隔符</li><li>确定了第一个逗号位置后，每隔三个数字添加一个逗号，最后末尾会多出来一个逗号，去掉即可</li><li>使用bytes.Buffe而非”+”</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">comma</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> buffer bytes.Buffer</span><br><span class="line">    l := <span class="built_in">len</span>(s)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s); i++ &#123;</span><br><span class="line">        buffer.WriteString(<span class="keyword">string</span>(s[i]))</span><br><span class="line"><span class="comment">// 取余3可以得到第一个插入逗号的位置,后面依次+3即可,末尾不加&quot;,&quot;</span></span><br><span class="line">        <span class="keyword">if</span> (i+<span class="number">1</span>)%<span class="number">3</span> == l%<span class="number">3</span> &#123;  <span class="keyword">if</span> (i+<span class="number">1</span>)%<span class="number">3</span> == l%<span class="number">3</span> &amp;&amp; i != l<span class="number">-1</span> &#123;</span><br><span class="line">            buffer.WriteString(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    s = buffer.String()</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">``</span><span class="string">``</span></span><br><span class="line"></span><br><span class="line">#### 练习 <span class="number">3.11</span>： 完善comma函数，以支持浮点数处理和一个可选的正负号的处理。</span><br><span class="line">&gt; 解题思路:</span><br><span class="line"></span><br><span class="line">* 将整数部分分离处理处理即可，整树部分与<span class="number">3.10</span>相同</span><br><span class="line">* 首先判读第一个字符是否为<span class="string">&quot;+/-&quot;</span>，如果是，将符号添加到buffer中，然后去掉原字符串的第一个字符。</span><br><span class="line">* 通过小数点将字符串分隔为两个数组，下标为<span class="number">0</span>的为整数部分，如果存在小数点则下标为<span class="number">1</span>的为小数部分</span><br><span class="line">* 处理完整数部分后判断是否存在小数部分，存在着添加到buffer中</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`go</span></span><br><span class="line"><span class="string">// 判断是否有正负号</span></span><br><span class="line"><span class="string">// 判断是否有小数部分</span></span><br><span class="line"><span class="string">func comma(s string) string &#123;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    var buffer bytes.Buffer</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // 获取正负号</span></span><br><span class="line"><span class="string">    if s[0] == &#x27;-&#x27; || s[0] == &#x27;+&#x27; &#123;</span></span><br><span class="line"><span class="string">        // 将符号添加到返回的字符串中</span></span><br><span class="line"><span class="string">        buffer.WriteByte(s[0])</span></span><br><span class="line"><span class="string">        s = s[1:]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // 分离整数部分与小数部位</span></span><br><span class="line"><span class="string">    arr := strings.Split(s, &quot;.&quot;)</span></span><br><span class="line"><span class="string">    s = arr[0]</span></span><br><span class="line"><span class="string">    l := len(s)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // 格式整数部分</span></span><br><span class="line"><span class="string">    for i := 0; i &lt; len(s); i++ &#123;</span></span><br><span class="line"><span class="string">        buffer.WriteString(string(s[i]))</span></span><br><span class="line"><span class="string">        // 取余3可以得到第一个插入逗号的位置,后面依次+3即可,末尾不加&quot;,&quot;</span></span><br><span class="line"><span class="string">        if (i+1)%3 == l%3 &amp;&amp; i != l-1 &#123;</span></span><br><span class="line"><span class="string">            buffer.WriteString(&quot;,&quot;)</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // 存在小数部分</span></span><br><span class="line"><span class="string">    if len(arr) &gt; 1 &#123;</span></span><br><span class="line"><span class="string">        buffer.WriteString(&quot;.&quot;)</span></span><br><span class="line"><span class="string">        buffer.WriteString(arr[1])</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    s = buffer.String()</span></span><br><span class="line"><span class="string">    return s // 末尾会多一个逗号,去掉 + &quot;.&quot; + arr[1]</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="练习-3-12：-编写一个函数，判断两个字符串是否是是相互打乱的，也就是说它们有着相同的字符，但是对应不同的顺序。"><a href="#练习-3-12：-编写一个函数，判断两个字符串是否是是相互打乱的，也就是说它们有着相同的字符，但是对应不同的顺序。" class="headerlink" title="练习 3.12： 编写一个函数，判断两个字符串是否是是相互打乱的，也就是说它们有着相同的字符，但是对应不同的顺序。"></a>练习 3.12： 编写一个函数，判断两个字符串是否是是相互打乱的，也就是说它们有着相同的字符，但是对应不同的顺序。</h4><blockquote><p>解题思路:</p></blockquote><ul><li>拥有相同字符那么他们长度肯定是相同的</li><li>每个字符都有自己的Unicode码，记录每个字符串中每个字符出现的次数</li><li>循环记录的数组，对比个数是否相同</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isReverse</span><span class="params">(a, b <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="comment">// 长度不一样直接返回false</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(a) != <span class="built_in">len</span>(b) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 用于记录每个字符串出现的次数</span></span><br><span class="line">    m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">rune</span>]<span class="keyword">int</span>)</span><br><span class="line">    n := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">rune</span>]<span class="keyword">int</span>)</span><br><span class="line">    <span class="comment">// 以字符串Unicode码作为map的Key</span></span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> a &#123;</span><br><span class="line">        m[v]++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> b &#123;</span><br><span class="line">    n[v]++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断相同下标值是否相同</span></span><br><span class="line">    <span class="keyword">for</span> i, v := <span class="keyword">range</span> m &#123;</span><br><span class="line">        <span class="keyword">if</span> n[i] != v &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="练习-3-13：-编写KB、MB的常量声明，然后扩展到YB。"><a href="#练习-3-13：-编写KB、MB的常量声明，然后扩展到YB。" class="headerlink" title="练习 3.13： 编写KB、MB的常量声明，然后扩展到YB。"></a>练习 3.13： 编写KB、MB的常量声明，然后扩展到YB。</h4><blockquote><p>1.简单粗暴法(没有解题思路)</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    KB = <span class="number">1000</span></span><br><span class="line">    MB = KB * KB</span><br><span class="line">    GB = MB * KB</span><br><span class="line">    TB = GB * KB</span><br><span class="line">    PB = TB * KB</span><br><span class="line">    EB = PB * KB</span><br><span class="line">    ZB = EB * KB</span><br><span class="line">    YB = ZB * KB</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>2.结合书中例子定义KiB到YiB解决</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">KiB &#x3D; 1024,       KB &#x3D; 1000</span><br><span class="line">MiB &#x3D; 1048576,    MB &#x3D; 1000000</span><br><span class="line">GiB &#x3D; 1073741824, GB&#x3D; 1000000000</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li>KiB减去24就是KB</li><li>MIB减去48576就是MB</li><li>…<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    _   = <span class="number">1</span> &lt;&lt; (<span class="number">10</span> * <span class="literal">iota</span>)</span><br><span class="line">    KiB  <span class="comment">// 1024</span></span><br><span class="line">    MiB  <span class="comment">// 1048576</span></span><br><span class="line">    GiB  <span class="comment">// 1073741824</span></span><br><span class="line">    TiB  <span class="comment">// 1099511627776 (exceeds 1 &lt;&lt; 32)</span></span><br><span class="line">    PiB  <span class="comment">// 1125899906842624</span></span><br><span class="line">    EiB  <span class="comment">// 1152921504606846976</span></span><br><span class="line">    ZiB  <span class="comment">// 1180591620717411303424 (exceeds 1 &lt;&lt; 64)</span></span><br><span class="line">    YiB  <span class="comment">// 1208925819614629174706176</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    KB = <span class="number">1000</span></span><br><span class="line">    MB = MiB - MiB % (KB * KB)</span><br><span class="line">    GB = GiB - GiB % (MB * KB)</span><br><span class="line">    TB = TiB - TiB % (GB * KB)</span><br><span class="line">    PB = PiB - PiB % (TB * KB)</span><br><span class="line">    EB = EiB - EiB % (PB * KB)</span><br><span class="line">    ZB = ZiB - ZiB % (EB * KB)</span><br><span class="line">    YB = YiB - YiB % (ZB * KB)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>感觉第一种更加简单粗暴</li></ul><p><a href="https://www.jinjianh.com/articles/2019/06/16/1560663440490.html">返回目录</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 学习 </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>未来的路</title>
      <link href="/articles/2019/06/07/1559921813174.html"/>
      <url>/articles/2019/06/07/1559921813174.html</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;博客莫名其妙挂了，重启后大概追踪到问题所在了，想着随便写点啥。</p><p>&emsp;&emsp;于上周五和公司提出了离职，下周帮公司招聘到合适的人之后就可以离职了，其实很不愿意离开这家公司，很棒的领导，我目前见过的最好的福利，唯一的缺点就是没事做吧，毕竟非互联网公司，但是还是不得不离开。大学尚未毕业，已经前前后后待了三家公司了，这并非我所愿，我其实很想在一个公司好好待下去，工作个三五年，但是总有一些不可控因素影响着我。</p><p>&emsp;&emsp;回想当初来到成都时，信誓旦旦的说自己要转go，可是由于大半个月没敲代码，自己就否定了自己，然后回家过年，年后回成都了继续做PHP了。这么想来这小半年待在成都还是有些失败呢。回想下大三结束后出来找工作的经历，似乎发现找的都是比较好玩的公司，导致这一年下来技术基本在原地踏步，也是学到了一些新的东西，但大多都只是demo级别，没有任何的实际项目经验。仔细想想，自己似乎没有好好地做过职业规划，这也许与我随遇而安的性格有关，也许是该为自己好好地做一个未来的规划。</p><p>&emsp;&emsp;离职后估计要第一时间回学校考三级，不知道这次能不能考过，估计很悬。考完试估计就要回家里溜达一圈，再然后就去广州看看吧（虽然我很不想去，但是现在看来广州是我现在能选择的最好的地方），看看那边的机会，没能拿到毕业证与学位证真的很恼火。再找工作的时候一定要找一家能让自己充分提升能力的公司，而不是让自己继续天天摸鱼，人总要逼自己一把才能知道自己的潜力有多大。</p><p>&emsp;&emsp;第一次写随笔，文笔很差，将就看吧。记单词去了~~~</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS/Javascript实现Word Clock</title>
      <link href="/articles/2019/06/02/1559477290334.html"/>
      <url>/articles/2019/06/02/1559477290334.html</url>
      
        <content type="html"><![CDATA[<h3 id="无意中看到了一款锁屏效果–world-clock，感觉有点意思，就想着用前端来实现他。"><a href="#无意中看到了一款锁屏效果–world-clock，感觉有点意思，就想着用前端来实现他。" class="headerlink" title="无意中看到了一款锁屏效果–world clock，感觉有点意思，就想着用前端来实现他。"></a>无意中看到了一款锁屏效果–world clock，感觉有点意思，就想着用前端来实现他。</h3><h3 id="实现这个效果主要需要实现两个部分"><a href="#实现这个效果主要需要实现两个部分" class="headerlink" title="实现这个效果主要需要实现两个部分"></a>实现这个效果主要需要实现两个部分</h3><ul><li>时间元素旋转显示</li><li>时间自动旋转</li></ul><blockquote><p>实现元素旋转显示</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">// <span class="selector-tag">li</span> 通用样式</span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#777</span>;</span><br><span class="line">        <span class="attribute">list-style</span>: none;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">        <span class="attribute">text-transform</span>: lowercase;</span><br><span class="line">        <span class="attribute">transform-origin</span>: <span class="number">0</span> center;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">// <span class="selector-tag">li</span> 行内样式</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(1)</span>&#123; <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>); &#125;</span><br><span class="line">``````</span><br><span class="line">### 每个<span class="selector-tag">li</span>根据实际位置，旋转度数不同，总的加起来360度就可以了</span><br><span class="line"></span><br><span class="line">&gt; 时间初始化与自动旋转</span><br><span class="line"></span><br><span class="line">* 每一个<span class="selector-tag">li</span>去做循环，等于当前日期值的<span class="selector-tag">li</span>旋转度数为0，小于的当前日期值为负，大于为正。</span><br><span class="line">```<span class="selector-tag">html</span></span><br><span class="line">&lt;!<span class="selector-tag">--</span> 当前月份为6月，所以6月对应的旋转角度为0，小于6月的为负，大于6月为正<span class="selector-tag">--</span>&gt;</span><br><span class="line">&lt;!<span class="selector-tag">--</span> 整个旋转度数为360度，<span class="selector-tag">-30</span>°与330°效果一致<span class="selector-tag">--</span>&gt;</span><br><span class="line">&lt;ul class=&quot;month&quot; id=&quot;month&quot;&gt;</span><br><span class="line">    &lt;li style=&quot;transform: rotate(-150deg); color: rgb(119, 119, 119);&quot;&gt;一月&lt;/li&gt;</span><br><span class="line">    &lt;li style=&quot;transform: rotate(-120deg); color: rgb(119, 119, 119);&quot;&gt;二月&lt;/li&gt;</span><br><span class="line">    &lt;li style=&quot;transform: rotate(-90deg); color: rgb(119, 119, 119);&quot;&gt;三月&lt;/li&gt;</span><br><span class="line">    &lt;li style=&quot;transform: rotate(-60deg); color: rgb(119, 119, 119);&quot;&gt;四月&lt;/li&gt;</span><br><span class="line">    &lt;li style=&quot;transform: rotate(-30deg); color: rgb(119, 119, 119);&quot;&gt;五月&lt;/li&gt;</span><br><span class="line">    &lt;li style=&quot;transform: rotate(0deg); color: rgb(255, 255, 255);&quot;&gt;六月&lt;/li&gt;</span><br><span class="line">    &lt;li style=&quot;transform: rotate(30deg); color: rgb(119, 119, 119);&quot;&gt;七月&lt;/li&gt;</span><br><span class="line">    &lt;li style=&quot;transform: rotate(60deg); color: rgb(119, 119, 119);&quot;&gt;八月&lt;/li&gt;</span><br><span class="line">    &lt;li style=&quot;transform: rotate(90deg); color: rgb(119, 119, 119);&quot;&gt;九月&lt;/li&gt;</span><br><span class="line">    &lt;li style=&quot;transform: rotate(120deg); color: rgb(119, 119, 119);&quot;&gt;十月&lt;/li&gt;</span><br><span class="line">    &lt;li style=&quot;transform: rotate(150deg); color: rgb(119, 119, 119);&quot;&gt;十一月&lt;/li&gt;</span><br><span class="line">    &lt;li style=&quot;transform: rotate(180deg); color: rgb(119, 119, 119);&quot;&gt;十二月&lt;/li&gt;</span><br><span class="line">&lt;/<span class="selector-tag">ul</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="源码如下"><a href="#源码如下" class="headerlink" title="源码如下"></a>源码如下</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Word Clock<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://code.jquery.com/jquery-latest.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    body &#123;</span><br><span class="line">        height: 100%;</span><br><span class="line">        width: 100%;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    div &#123;</span><br><span class="line">        height: 1000px;</span><br><span class="line">        width: 100%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ul &#123;</span><br><span class="line">        position: absolute;</span><br><span class="line">        left: 50%;</span><br><span class="line">        top: 500px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    li &#123;</span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#777</span>;</span></span><br><span class="line">        list-style: none;</span><br><span class="line">        width: 150px;</span><br><span class="line">        text-transform: lowercase;</span><br><span class="line">        transform-origin: 0 center;</span><br><span class="line">        position: absolute;</span><br><span class="line">        left: 0;</span><br><span class="line">        top: 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.month</span> &gt; <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">        padding: 0 0 0 80px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.day</span> &gt; <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">        padding: 0 0 0 130px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.week</span> &gt; <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">        padding: 0 0 0 200px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.hour</span> &gt; <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">        padding: 0 0 0 260px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.minute</span> &gt; <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">        padding: 0 0 0 325px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.second</span> &gt; <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">        padding: 0 0 0 410px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;month&quot;</span> <span class="attr">id</span>=<span class="string">&quot;month&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;transform: rotate(-150deg); color: rgb(119, 119, 119);&quot;</span>&gt;</span>一月<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;transform: rotate(-120deg); color: rgb(119, 119, 119);&quot;</span>&gt;</span>二月<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;transform: rotate(-90deg); color: rgb(119, 119, 119);&quot;</span>&gt;</span>三月<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;transform: rotate(-60deg); color: rgb(119, 119, 119);&quot;</span>&gt;</span>四月<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;transform: rotate(-30deg); color: rgb(119, 119, 119);&quot;</span>&gt;</span>五月<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;transform: rotate(0deg); color: rgb(255, 255, 255);&quot;</span>&gt;</span>六月<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;transform: rotate(30deg); color: rgb(119, 119, 119);&quot;</span>&gt;</span>七月<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;transform: rotate(60deg); color: rgb(119, 119, 119);&quot;</span>&gt;</span>八月<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;transform: rotate(90deg); color: rgb(119, 119, 119);&quot;</span>&gt;</span>九月<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;transform: rotate(120deg); color: rgb(119, 119, 119);&quot;</span>&gt;</span>十月<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;transform: rotate(150deg); color: rgb(119, 119, 119);&quot;</span>&gt;</span>十一月<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&quot;transform: rotate(180deg); color: rgb(119, 119, 119);&quot;</span>&gt;</span>十二月<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;day&quot;</span> <span class="attr">id</span>=<span class="string">&quot;day&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;week&quot;</span> <span class="attr">id</span>=<span class="string">&quot;week&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;hour&quot;</span> <span class="attr">id</span>=<span class="string">&quot;hour&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;minute&quot;</span> <span class="attr">id</span>=<span class="string">&quot;minute&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;second&quot;</span> <span class="attr">id</span>=<span class="string">&quot;second&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">mGetDate</span>(<span class="params">year, month</span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>(year, month, <span class="number">0</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> d.getDate();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">numberToChinese</span>(<span class="params">num</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> chineseNum = <span class="string">&#x27;零一二三四五六七八九十&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> chinese = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (num &lt;= <span class="number">10</span>) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> chineseNum.split(<span class="string">&#x27;&#x27;</span>)[num]</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num &lt; <span class="number">20</span>) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="string">&#x27;十&#x27;</span> + chineseNum.split(<span class="string">&#x27;&#x27;</span>)[num - <span class="number">10</span>]</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (num % <span class="number">10</span> == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> chineseNum.split(<span class="string">&#x27;&#x27;</span>)[num / <span class="number">10</span>] + <span class="string">&#x27;十&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> chineseNum.split(<span class="string">&#x27;&#x27;</span>)[<span class="built_in">parseInt</span>(num / <span class="number">10</span>)] + <span class="string">&#x27;十&#x27;</span> + chineseNum.split(<span class="string">&#x27;&#x27;</span>)[<span class="built_in">parseInt</span>(num % <span class="number">10</span>)]</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> month = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;month&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> day = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;day&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> week = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;week&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> hour = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;hour&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> minute = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;minute&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> second = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;second&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> html = <span class="string">``</span>;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 生成月html</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++) &#123;</span></span><br><span class="line"><span class="javascript">        html += <span class="string">`&lt;li&gt;`</span> + numberToChinese(i + <span class="number">1</span>) + <span class="string">`月&lt;/li&gt;`</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    month.innerHTML = html;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//  生成日html</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> months = myDate.getMonth() + <span class="number">1</span>;   <span class="comment">//月份从0开始获取，所以需要加1</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> year = myDate.getYear();</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>(year, months, <span class="number">0</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> days = d.getDate();</span></span><br><span class="line"><span class="javascript">    html = <span class="string">``</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; days; i++) &#123;</span></span><br><span class="line"><span class="javascript">        html += <span class="string">`&lt;li&gt;`</span> + numberToChinese(i + <span class="number">1</span>) + <span class="string">`日&lt;/li&gt;`</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    day.innerHTML = html;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 星期html</span></span></span><br><span class="line"><span class="javascript">    html = <span class="string">``</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (i == <span class="number">6</span>) &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">            html += `<span class="tag">&lt;<span class="name">li</span>&gt;</span>星期日<span class="tag">&lt;/<span class="name">li</span>&gt;</span>`</span></span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            html += <span class="string">`&lt;li&gt;星期`</span> + numberToChinese(i + <span class="number">1</span>) + <span class="string">`&lt;/li&gt;`</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    week.innerHTML = html;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 时html</span></span></span><br><span class="line"><span class="javascript">    html = <span class="string">``</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">24</span>; i++) &#123;</span></span><br><span class="line"><span class="javascript">        html += <span class="string">`&lt;li&gt;`</span> + numberToChinese(i) + <span class="string">`时&lt;/li&gt;`</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    hour.innerHTML = html;</span><br><span class="line"><span class="javascript">    <span class="comment">//分html</span></span></span><br><span class="line"><span class="javascript">    html = <span class="string">``</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">60</span>; i++) &#123;</span></span><br><span class="line"><span class="javascript">        html += <span class="string">`&lt;li&gt;`</span> + numberToChinese(i) + <span class="string">`分&lt;/li&gt;`</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    minute.innerHTML = html;</span><br><span class="line"><span class="javascript">    <span class="comment">//秒html</span></span></span><br><span class="line"><span class="javascript">    html = <span class="string">``</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">60</span>; i++) &#123;</span></span><br><span class="line"><span class="javascript">        html += <span class="string">`&lt;li&gt;`</span> + numberToChinese(i) + <span class="string">`秒&lt;/li&gt;`</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    second.innerHTML = html;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">setTime</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 获取当前时间</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> myDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> numArray = [myDate.getMonth() + <span class="number">1</span>, myDate.getDate(), myDate.getDay(), myDate.getHours() + <span class="number">1</span>, myDate.getMinutes() + <span class="number">1</span>, myDate.getSeconds() + <span class="number">1</span>];<span class="comment">// 月,日,星期,时,分,秒</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> l = <span class="number">6</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 遍历ul实现时间赋值与更改</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;ul&quot;</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> length = $(<span class="built_in">this</span>).children().length</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; length; j++) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> deg = <span class="string">&quot;rotate(&quot;</span> + (j + <span class="number">1</span> - numArray[<span class="number">6</span> - l]) * <span class="number">360</span> / length + <span class="string">&quot;deg)&quot;</span></span></span><br><span class="line"><span class="javascript">                $(<span class="built_in">this</span>).find(<span class="string">&quot;li&quot;</span>).eq(j).css(<span class="string">&quot;transform&quot;</span>, deg);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (j + <span class="number">1</span> - numArray[<span class="number">6</span> - l] == <span class="number">0</span> || (l == <span class="number">4</span> &amp;&amp; j == length - <span class="number">1</span> &amp;&amp; numArray[<span class="number">6</span> - l] == <span class="number">0</span>)) &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                    $(<span class="built_in">this</span>).find(<span class="string">&quot;li&quot;</span>).eq(j).css(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;#fff&quot;</span>);</span></span><br><span class="line"><span class="javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                    $(<span class="built_in">this</span>).find(<span class="string">&quot;li&quot;</span>).eq(j).css(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;#777&quot;</span>);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            l--;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setTime()</span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.setInterval(<span class="string">&quot;setTime()&quot;</span>, <span class="number">1000</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="最后的效果"><a href="#最后的效果" class="headerlink" title="最后的效果"></a>最后的效果</h3><p><img src="https://cdn.jsdelivr.net/gh/inkdp/CDN@main/img/image-7492af1c" alt="image.png"></p><h3 id="写在最后，时间直接使用jq更改很僵硬，可以通过CSS动画实现。"><a href="#写在最后，时间直接使用jq更改很僵硬，可以通过CSS动画实现。" class="headerlink" title="写在最后，时间直接使用jq更改很僵硬，可以通过CSS动画实现。"></a>写在最后，时间直接使用jq更改很僵硬，可以通过CSS动画实现。</h3>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于我</title>
      <link href="/about.html"/>
      <url>/about.html</url>
      
        <content type="html"><![CDATA[<h3 id="我是谁"><a href="#我是谁" class="headerlink" title="我是谁"></a>我是谁</h3><ul><li>墨殇(InkDP)，一个间歇性自闭，持续性没心没肺的逗比青年</li><li>一个耿直的重庆汉子，毕业后为了生计选择南下成为一名广漂(已经回来啦)</li><li>计算机专业毕业的我，如今成为了一名专职码农，在一家外包公司担任Golang开发</li><li>自愈能力极强，每天都负能量爆棚，却依旧能嘻嘻哈哈的笑着</li><li>学习能力极强，但大多时候都是被动学习，很少主动学习心得东西</li><li>拖延症晚起患者，但能分期事情轻重缓急</li><li>….</li></ul><h3 id="技能树"><a href="#技能树" class="headerlink" title="技能树"></a>技能树</h3><p>  作为后端开发的我，最开始接触的是PHP，目前主语言是Go，平时无聊的时候也会玩玩前端，还是积累了一些前端的技术栈(html，css，js，vue，小程序)</p><h3 id="爱好"><a href="#爱好" class="headerlink" title="爱好"></a>爱好</h3><p>   爱打游戏，尤其是MOBA类游戏，最爱LOL，有空一起开黑呀(班德尔城：金戋丶)，买了switch，和一些游戏卡，快一年了塞尔达至今未通关，持续性吃灰。晚上饭后会看会儿书，书单很杂，基本都是来啥看啥。不健身，但偶尔也会心血来潮去跑跑步，做做俯卧撑或仰卧起坐。爱打羽毛球，但是好久没打过了。喜欢爬山，也快一年多没爬了，想念歌乐山。</p><h3 id="联系我"><a href="#联系我" class="headerlink" title="联系我"></a>联系我</h3><ul><li>QQ：1576962841</li><li>微信：InkDPP</li><li>GitHub：<a href="https://github.com/InkDP">https://github.com/InkDP</a></li><li>技术博客：<a href="https://inkdp.cn/">https://inkdp.cn/</a></li><li>Email: <a href="mailto:&#109;&#x65;&#64;&#x69;&#x6e;&#107;&#100;&#x70;&#46;&#x63;&#x6e;">&#109;&#x65;&#64;&#x69;&#x6e;&#107;&#100;&#x70;&#46;&#x63;&#x6e;</a></li></ul><h3 id="个人简历"><a href="#个人简历" class="headerlink" title="个人简历"></a>个人简历</h3><p>  后面补</p>]]></content>
      
      
      
        <tags>
            
            <tag> 关于我 </tag>
            
            <tag> 随笔 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
